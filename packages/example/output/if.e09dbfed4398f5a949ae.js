/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/if.js":
/*!*******************!*\
  !*** ./src/if.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var zvm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zvm */ \"../zvm/dist/es/main.js\");\n\n\nconst app = (0,zvm__WEBPACK_IMPORTED_MODULE_0__.createApp)({\n  template: \"#app\",\n  data() {\n    return {\n      isShow: true,\n    };\n  },\n  methods: {\n    handleBtnClick() {\n      this.isShow = !this.isShow;\n    },\n  },\n});\n\napp.mount(\"#app\");\n\n\n//# sourceURL=webpack://example/./src/if.js?");

/***/ }),

/***/ "../zvm/dist/es/main.js":
/*!******************************!*\
  !*** ../zvm/dist/es/main.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"computed\": () => (/* binding */ computed),\n/* harmony export */   \"createApp\": () => (/* binding */ createApp),\n/* harmony export */   \"effect\": () => (/* binding */ effect),\n/* harmony export */   \"reactive\": () => (/* binding */ reactive),\n/* harmony export */   \"shallowReactive\": () => (/* binding */ shallowReactive),\n/* harmony export */   \"watch\": () => (/* binding */ watch)\n/* harmony export */ });\nvar TriggerType;\r\n(function (TriggerType) {\r\n    TriggerType[TriggerType[\"SET\"] = 0] = \"SET\";\r\n    TriggerType[TriggerType[\"ADD\"] = 1] = \"ADD\";\r\n    TriggerType[TriggerType[\"DELETE\"] = 2] = \"DELETE\";\r\n})(TriggerType || (TriggerType = {}));\n\n// 当前活动的effect函数\r\nlet activeEffectFn;\r\n// 存储副作用函数的map\r\nconst bucket = new WeakMap();\r\n// 迭代器key\r\nconst ITERATE_KEY = Symbol(\"iterate\");\r\n// effect函数栈\r\nconst effectFnStack = [];\r\n/**\r\n * 注册副作用函数，只要fn中存在代理对象/computed对象，则会把当前的副作用函数添加到响应式对象的deps中\r\n * @param fn getter函数\r\n * @param options effect函数的配置\r\n * @returns 返回副作用函数\r\n */\r\nfunction effect(fn, options = {}) {\r\n    const effectFn = () => {\r\n        // 移除上次的依赖集合\r\n        cleanUp(effectFn);\r\n        activeEffectFn = effectFn;\r\n        // 将当前的副作用函数推入栈中，嵌套effect的情况\r\n        effectFnStack.push(effectFn);\r\n        const res = fn();\r\n        effectFnStack.pop();\r\n        activeEffectFn = effectFnStack[effectFnStack.length - 1];\r\n        // 返回函数的结果\r\n        return res;\r\n    };\r\n    effectFn.options = options;\r\n    effectFn.deps = [];\r\n    if (!options.lazy) {\r\n        effectFn();\r\n    }\r\n    return effectFn;\r\n}\r\nfunction cleanUp(effectFn) {\r\n    if (!effectFn.deps)\r\n        return;\r\n    for (let i = 0; i < effectFn.deps.length; i++) {\r\n        const deps = effectFn.deps[i];\r\n        // 将当前的effctFn从deps中移除\r\n        deps.delete(effectFn);\r\n    }\r\n    // 重置effectFn的deps\r\n    effectFn.deps.length = 0;\r\n}\r\nfunction track(target, key) {\r\n    if (!activeEffectFn || !shoudTrack)\r\n        return;\r\n    const depsMap = bucket.get(target) || bucket.set(target, new Map()).get(target);\r\n    const deps = depsMap.get(key) || depsMap.set(key, new Set()).get(key);\r\n    deps.add(activeEffectFn);\r\n    activeEffectFn.deps\r\n        ? activeEffectFn.deps.push(deps)\r\n        : (activeEffectFn.deps = []).push(deps);\r\n}\r\nfunction trigger(target, key, { type, newValue, oldValue, }) {\r\n    const depsMap = bucket.get(target);\r\n    if (!depsMap)\r\n        return;\r\n    const effectsToRun = new Set();\r\n    const deps = depsMap.get(key);\r\n    const iterateEffects = depsMap.get(ITERATE_KEY);\r\n    deps &&\r\n        deps.forEach((effectFn) => {\r\n            effectsToRun.add(effectFn);\r\n        });\r\n    // 只有添加和删除操作才会改变对象的keys，故此时需要触发iterateEffects\r\n    if (type === TriggerType.ADD || type === TriggerType.DELETE) {\r\n        iterateEffects &&\r\n            iterateEffects.forEach((effectFn) => {\r\n                if (effectFn != activeEffectFn) {\r\n                    effectsToRun.add(effectFn);\r\n                }\r\n            });\r\n    }\r\n    // 如果TriggerType === ADD, 并且target是数组，说明数组的长度发生变化，则需要把数组的length也触发\r\n    if (type === TriggerType.ADD && Array.isArray(target)) {\r\n        const lengthEffects = depsMap.get(\"length\");\r\n        lengthEffects &&\r\n            lengthEffects.forEach((effectFn) => {\r\n                if (effectFn != activeEffectFn) {\r\n                    effectsToRun.add(effectFn);\r\n                }\r\n            });\r\n    }\r\n    effectsToRun.forEach((effectFn) => {\r\n        // 避免循环触发\r\n        if (activeEffectFn !== effectFn) {\r\n            if (effectFn.options && effectFn.options.scheduler) {\r\n                effectFn.options.scheduler(effectFn);\r\n            }\r\n            else {\r\n                effectFn();\r\n            }\r\n        }\r\n    });\r\n}\n\nconst RAW_KEY = Symbol(\"raw_key\");\r\n// 创建一个map来记录已经被代理的对象，避免重复代理\r\n//TODO\r\nconst shoudTrack = true;\r\nconst reactiveMap = new Map();\r\n/**\r\n * 创建一个响应式对象\r\n * @param obj 对象\r\n * @param isShallow 是否浅拷贝\r\n * @param isReadonly 是否只读\r\n * @returns\r\n */\r\nfunction createReactive(obj, { isShallow = false }) {\r\n    return new Proxy(obj, {\r\n        get(target, key, receiver) {\r\n            // 代理对象可以通过RAW_KEY获取到原始数据\r\n            if (key === RAW_KEY) {\r\n                return target;\r\n            }\r\n            if (typeof key !== \"symbol\") {\r\n                // 如果不是只读，并且key不是symbol，则添加副作用函数\r\n                track(target, key);\r\n            }\r\n            const res = Reflect.get(target, key, receiver);\r\n            // 如果为浅响应，则不对值进行响应式化\r\n            if (isShallow) {\r\n                return res;\r\n            }\r\n            // 如果是深响应，则递归响应式化值\r\n            if (typeof res === \"object\" && res !== null) {\r\n                return reactive(res);\r\n            }\r\n            return res;\r\n        },\r\n        set(target, key, newVal, receiver) {\r\n            const oldVal = target[key];\r\n            const type = Array.isArray(target)\r\n                ? // 如果是数组且key值小于长度，则认为是set，否则是插入新元素\r\n                    Number(key) < target.length\r\n                        ? TriggerType.SET\r\n                        : TriggerType.ADD\r\n                : // 如果对象含有key属性，则认为是set，否则是新增属性\r\n                    Object.prototype.hasOwnProperty.call(target, key)\r\n                        ? TriggerType.SET\r\n                        : TriggerType.ADD;\r\n            const res = Reflect.set(target, key, newVal, receiver);\r\n            if (oldVal !== newVal) {\r\n                trigger(target, key, {\r\n                    type: type,\r\n                    oldValue: oldVal,\r\n                    newValue: newVal,\r\n                });\r\n            }\r\n            return res;\r\n        },\r\n        has(target, key) {\r\n            track(target, key);\r\n            return Reflect.has(target, key);\r\n        },\r\n        ownKeys(target) {\r\n            track(target, Array.isArray(target) ? \"length\" : ITERATE_KEY);\r\n            return Reflect.ownKeys(target);\r\n        },\r\n        deleteProperty(target, key) {\r\n            const hasKey = Object.prototype.hasOwnProperty.call(target, key);\r\n            const res = Reflect.deleteProperty(target, key);\r\n            if (hasKey && res) {\r\n                Array.isArray(target)\r\n                    ? trigger(target, key, {\r\n                        type: TriggerType.SET,\r\n                    })\r\n                    : trigger(target, key, {\r\n                        type: TriggerType.DELETE,\r\n                    });\r\n            }\r\n            return res;\r\n        },\r\n    });\r\n}\r\n// 默认reactive函数, 深响应式化\r\nfunction reactive(obj) {\r\n    // 先查找当前对象是否已经代理过\r\n    const existProxy = reactiveMap.get(obj);\r\n    if (existProxy) {\r\n        // 存在则直接返回\r\n        return existProxy;\r\n    }\r\n    // 否则创建代理对象\r\n    const proxy = createReactive(obj, {});\r\n    reactiveMap.set(obj, proxy);\r\n    return proxy;\r\n}\r\nfunction shallowReactive(obj) {\r\n    return createReactive(obj, { isShallow: true });\r\n}\n\nfunction computed(getter) {\r\n    let value;\r\n    // 设置标志位，dirty表示数据发生改变，需要更新，实现computed惰性求值\r\n    let dirty = true;\r\n    const effectFn = effect(getter, {\r\n        // 设置lazy为true，表示不会立即执行effectFn，而是在调用computed的时候才执行，实现computed惰性求值\r\n        lazy: true,\r\n        scheduler() {\r\n            if (!dirty) {\r\n                // 将dirty设为true，表示数据发生改变，需要更新\r\n                dirty = true;\r\n                // 调用trigger，告知computed的依赖发生变化让他们重新执行\r\n                trigger(obj, \"value\", {\r\n                    type: TriggerType.SET,\r\n                });\r\n            }\r\n        },\r\n    });\r\n    // computed要返回的对象，通过obj.value获取到computed返回的值\r\n    const obj = {\r\n        get value() {\r\n            // 如果dirty为true，表示数据发生改变，需要更新\r\n            if (dirty) {\r\n                value = effectFn();\r\n                dirty = false;\r\n            }\r\n            // 收集依赖\r\n            track(obj, \"value\");\r\n            return value;\r\n        },\r\n    };\r\n    return obj;\r\n}\n\nfunction watch(getter, fn, options = {\r\n    immediate: false,\r\n}) {\r\n    let oldVal, newVal;\r\n    // 存储过期回调\r\n    let cleanUp;\r\n    function onInvalidate(fn) {\r\n        cleanUp = fn;\r\n    }\r\n    function job() {\r\n        cleanUp && cleanUp();\r\n        cleanUp = null;\r\n        newVal = effectFn();\r\n        fn(newVal, oldVal, onInvalidate);\r\n        oldVal = newVal;\r\n    }\r\n    const effectFn = effect(() => {\r\n        if (typeof getter === \"function\") {\r\n            return getter();\r\n        }\r\n        else if (typeof getter === \"object\") {\r\n            return traverse(getter);\r\n        }\r\n    }, {\r\n        lazy: true,\r\n        scheduler: () => {\r\n            if (options.flush === \"post\") {\r\n                Promise.resolve().then(job);\r\n            }\r\n            else {\r\n                job();\r\n            }\r\n        },\r\n    });\r\n    // 立即执行则调用job\r\n    if (options.immediate) {\r\n        job();\r\n    }\r\n    else {\r\n        // 由于设置了lazy:true，故需要手动调用effectFn进行依赖收集\r\n        effectFn();\r\n    }\r\n}\r\n/**\r\n * 递归读取value\r\n * @param value\r\n * @param seen 用来存储已经读取过的值，避免发生死循环\r\n * @returns\r\n */\r\nfunction traverse(value, seen = new Set()) {\r\n    if (typeof value != \"object\" || value === null || seen.has(value))\r\n        return value;\r\n    seen.add(value);\r\n    for (const k in value) {\r\n        traverse(value[k], seen);\r\n    }\r\n    return value;\r\n}\n\nfunction insertAfter(newNode, referenceNode) {\r\n    referenceNode?.parentNode?.insertBefore(newNode, referenceNode.nextSibling);\r\n}\n\nconst render = {\r\n    textRender: (node, text, replace) => {\r\n        if (!Object.hasOwn(node, \"_textContent\")) {\r\n            Object.defineProperty(node, \"_textContent\", {\r\n                value: node.textContent,\r\n            });\r\n        }\r\n        const originText = node._textContent;\r\n        replace\r\n            ? (node.textContent = originText.replace(replace, text) || \"\")\r\n            : (node.textContent = typeof text == \"undefined\" ? \"\" : text);\r\n    },\r\n    classRender: (node, value, replace) => {\r\n        for (const key in value) {\r\n            if (value[key]) {\r\n                node.classList.add(key);\r\n            }\r\n            else {\r\n                node.classList.remove(key);\r\n            }\r\n        }\r\n    },\r\n    attrRender: (attr) => (node, value, replace) => {\r\n        if (value === true)\r\n            node.setAttribute(attr, \"\");\r\n        else if (value === false)\r\n            node.removeAttribute(attr);\r\n        else {\r\n            node.setAttribute(attr, value);\r\n        }\r\n    },\r\n    forRender: (node) => {\r\n        // 利用闭包保存一个原始节点\r\n        // 私有数据，不更改\r\n        const _cloneNode = node.cloneNode(true);\r\n        const _parentNode = node.parentNode;\r\n        const _previousNode = node.previousSibling;\r\n        const forNodes = [];\r\n        _parentNode?.removeChild(node);\r\n        function clearNodes() {\r\n            forNodes.forEach((node) => {\r\n                _parentNode?.removeChild(node);\r\n            });\r\n            forNodes.length = 0;\r\n        }\r\n        return (value, index, items, vm) => {\r\n            clearNodes();\r\n            let lastNode = _previousNode;\r\n            // node.parentNode?.removeChild(node);\r\n            for (let i = 0; i < items.length; i++) {\r\n                if (!items[i])\r\n                    continue;\r\n                const cloneNode = _cloneNode.cloneNode(true);\r\n                // node.appendChild(frag);\r\n                // TODO\r\n                cloneNode.removeAttribute(\"z-for\");\r\n                if (lastNode) {\r\n                    insertAfter(cloneNode, lastNode);\r\n                }\r\n                else {\r\n                    _parentNode?.appendChild(cloneNode);\r\n                }\r\n                lastNode = cloneNode;\r\n                forNodes.push(cloneNode);\r\n                const childVm = createVM({\r\n                    data: {\r\n                        [value]: items[i],\r\n                        [index]: i,\r\n                    },\r\n                }, vm);\r\n                // debugger;\r\n                Object.setPrototypeOf(childVm, vm);\r\n                // console.log(childVm);\r\n                new Compile(cloneNode, childVm, {\r\n                    compileRoot: true,\r\n                }).mount();\r\n                lastNode = cloneNode;\r\n            }\r\n        };\r\n    },\r\n};\n\n// 根据a.b.c设置数据\r\nfunction setValueByPath(obj, path, value) {\r\n    const paths = path.split(\".\");\r\n    const len = paths.length;\r\n    let i = 0;\r\n    while (i < len - 1) {\r\n        obj = obj[paths[i++]];\r\n    }\r\n    obj[paths[i]] = value;\r\n}\r\nfunction getValueByPath(obj, path) {\r\n    const paths = path.split(\".\");\r\n    const len = paths.length;\r\n    let i = 0;\r\n    while (i < len) {\r\n        obj = obj[paths[i++]];\r\n    }\r\n    return obj;\r\n}\r\nfunction _with(scopeName, exp) {\r\n    //去除空格\r\n    exp = exp.replace(/\\s/g, \"\");\r\n    exp = \" \" + exp;\r\n    const quickRegex = /([:\\s\\+\\-\\*\\/%&\\|\\^!\\*~]\\s*?)(([a-zA-Z_$][a-zA-Z_$0-9]*))/g;\r\n    // javascript 关键字的正则\r\n    const boolRegex = /(true|false|null|undefined)/g;\r\n    exp = exp.replace(quickRegex, (a, b, c) => {\r\n        return boolRegex.test(c) ? b + c : b + scopeName + \".\" + c;\r\n    });\r\n    return exp;\r\n}\r\nfunction runInScope(scope, scopeName, exp) {\r\n    const func = new Function(scopeName, \"return \" + _with(scopeName, exp));\r\n    return func(scope);\r\n}\n\nfunction on(node, vm, directive, expression) {\r\n    // z-on:click -> click\r\n    // 函数调用\r\n    const methodReg = /^(\\w+)([(](['\\w']+)[)])?/;\r\n    const matchMethod = expression.match(methodReg);\r\n    if (!matchMethod)\r\n        return;\r\n    const method = matchMethod[1];\r\n    const methodArgs = [];\r\n    console.log(method);\r\n    const singleReg = /^'(.*)'$/;\r\n    if (matchMethod && matchMethod[3]) {\r\n        const args = matchMethod[3].split(\",\");\r\n        args.forEach((arg) => {\r\n            // 单引号正则\r\n            if (singleReg.test(arg)) {\r\n                methodArgs.push(arg.replace(singleReg, \"$1\"));\r\n            }\r\n            else {\r\n                methodArgs.push(getValueByPath(vm.$data, arg));\r\n            }\r\n        });\r\n    }\r\n    const eventType = directive.split(\":\")[1];\r\n    const fn = vm && vm[method];\r\n    if (eventType && fn) {\r\n        node.addEventListener(eventType, fn.bind(vm, ...methodArgs));\r\n    }\r\n}\r\nfunction model(node, vm, directive, expression) {\r\n    // TODO bind input\r\n    const value = vm.$data[expression];\r\n    node.value = value;\r\n    node.addEventListener(\"input\", (e) => {\r\n        setValueByPath(vm.$data, expression, e.target.value);\r\n    });\r\n}\r\n// 通用函数，既适用z-text，也适用{{text}}\r\nfunction text(node, vm, directive, expression, replace = \"\") {\r\n    const renderFn = render[\"textRender\"];\r\n    if (renderFn) {\r\n        watch(() => {\r\n            return runInScope(vm, \"scope\", expression);\r\n        }, (newValue) => {\r\n            renderFn && renderFn(node, newValue, replace);\r\n        }, {\r\n            immediate: true,\r\n        });\r\n    }\r\n}\r\nfunction _if(node, vm, directives, expression) {\r\n    const next = node.nextElementSibling;\r\n    let elseNode = null;\r\n    if (next && next.getAttribute(\"z-else\") !== undefined) {\r\n        elseNode = next;\r\n    }\r\n    const updated = (newvalue) => {\r\n        if (newvalue) {\r\n            node.style.display = \"block\";\r\n            elseNode && (elseNode.style.display = \"none\");\r\n        }\r\n        else {\r\n            node.style.display = \"none\";\r\n            elseNode && (elseNode.style.display = \"block\");\r\n        }\r\n    };\r\n    watch(() => {\r\n        return !!runInScope(vm, \"scope\", expression);\r\n    }, updated, {\r\n        immediate: true,\r\n    });\r\n}\r\nfunction _for(node, vm, directive, expression) {\r\n    //去除空格\r\n    expression = expression.replace(/\\s/g, \"\");\r\n    const REF_LIST_FOR = /[(](\\w+)(,(\\w+))[)]in(\\w+)/;\r\n    const forMatch = expression.match(REF_LIST_FOR);\r\n    if (forMatch && forMatch[4]) {\r\n        const [, value, , index, list] = forMatch;\r\n        const renderFor = render.forRender(node);\r\n        effect(() => {\r\n            renderFor(value, index, runInScope(vm, \"scope\", list), vm);\r\n        });\r\n    }\r\n}\r\nfunction bind(node, vm, directive, expression) {\r\n    const dirSplit = directive.split(\":\");\r\n    const dir = dirSplit.length > 1 ? dirSplit[1] : directive;\r\n    let renderFn = render[dir + \"Render\"];\r\n    if (!renderFn) {\r\n        renderFn = render.attrRender(dir);\r\n    }\r\n    if (renderFn) {\r\n        effect(() => {\r\n            renderFn(node, runInScope(vm, \"scope\", expression));\r\n        });\r\n    }\r\n}\r\nvar directives = { on, model, text, if: _if, bind, for: _for };\n\nconst DIR_REG = /^z-/;\r\nconst DIR_FOR_REG = /^z-for/;\r\nclass Compile {\r\n    node;\r\n    vm;\r\n    // 设置标记变量，对于v-for的子元素，不需要继续深度遍历\r\n    needDeepCompile = true;\r\n    frag;\r\n    options;\r\n    constructor(node, vm, options = { compileRoot: false }) {\r\n        this.node = node;\r\n        this.vm = vm;\r\n        this.options = options;\r\n        this.frag = this.nodeToFragment(this.node);\r\n        options.compileRoot && this.compileNode(this.node, this.vm);\r\n        this.compile(this.frag, this.vm);\r\n        // this.node.appendChild(this.frag);\r\n    }\r\n    mount(el) {\r\n        if (el) {\r\n            const element = document.querySelector(el);\r\n            element && element.appendChild(this.frag);\r\n        }\r\n        else {\r\n            this.node.appendChild(this.frag);\r\n        }\r\n    }\r\n    nodeToFragment(node) {\r\n        const frag = document.createDocumentFragment();\r\n        let child;\r\n        while ((child = node.firstChild)) {\r\n            frag.appendChild(child);\r\n        }\r\n        return frag;\r\n    }\r\n    compile(node, vm) {\r\n        const childNodes = node.childNodes;\r\n        Array.from(childNodes).forEach((node) => {\r\n            this.compileNode(node, vm);\r\n        });\r\n    }\r\n    compileNode(node, vm) {\r\n        if (node.nodeType === 1) {\r\n            //元素节点\r\n            this.compileElement(node, vm);\r\n        }\r\n        else if (node.nodeType === 3) {\r\n            this.compileText(node, vm);\r\n        }\r\n        if (node.childNodes && node.childNodes.length && this.needDeepCompile) {\r\n            this.compile(node, vm);\r\n        }\r\n        this.needDeepCompile = true;\r\n    }\r\n    compileText(node, vm) {\r\n        const text = node.textContent;\r\n        if (!text)\r\n            return;\r\n        const reg = /\\{\\{(.*)\\}\\}/;\r\n        const res = reg.exec(text);\r\n        if (res !== null) {\r\n            directives[\"text\"](node, vm, \"text\", res[1], res[0]);\r\n        }\r\n    }\r\n    compileElement(node, vm) {\r\n        const attr = Array.from(node.attributes);\r\n        console.log(attr);\r\n        const isZFor = attr.findIndex((attr) => {\r\n            return DIR_FOR_REG.test(attr.nodeName);\r\n        });\r\n        // 如果是v-for，则不需要继续深度遍历，只需要编译z-for，其他的指令在z-for内部进行编译\r\n        if (!!~isZFor) {\r\n            this.needDeepCompile = false;\r\n            this.compileDirective(node, vm, attr[isZFor]);\r\n            return;\r\n        }\r\n        Array.from(node.attributes).forEach((attr) => {\r\n            this.compileDirective(node, vm, attr);\r\n        });\r\n    }\r\n    compileDirective(node, vm, attr) {\r\n        const directive = attr.nodeName;\r\n        const expression = attr.nodeValue;\r\n        if (DIR_REG.test(directive)) {\r\n            // 例如 v-on:click，截取v-on\r\n            const dir = directive.substring(2).split(\":\")[0];\r\n            // 寻找该指令\r\n            directives[dir] && directives[dir](node, vm, directive, expression);\r\n            node.removeAttribute(directive);\r\n        }\r\n    }\r\n}\n\n// 初始化vm\r\nfunction createVM(options, parentVM = {}, needProxy = true) {\r\n    const vm = Object.create(parentVM);\r\n    vm.$el = document.querySelector(options.template);\r\n    vm.$data =\r\n        typeof options.data === \"function\"\r\n            ? needProxy\r\n                ? reactive(options.data())\r\n                : options.data()\r\n            : needProxy\r\n                ? reactive(options.data)\r\n                : options.data;\r\n    vm.$options = options;\r\n    Object.keys(vm.$data).forEach((key) => {\r\n        proxyData(vm, key);\r\n    });\r\n    //将method挂载到vm上\r\n    if (options.methods) {\r\n        Object.keys(options.methods).forEach((key) => {\r\n            proxyMethod(vm, key);\r\n        });\r\n    }\r\n    initComputed(vm, options.computed);\r\n    return vm;\r\n}\r\nfunction createApp(options) {\r\n    const vm = createVM(options, this);\r\n    const compile = new Compile(vm.$el, vm);\r\n    return { vm, mount: compile.mount.bind(compile) };\r\n}\r\nfunction proxyData(obj, key) {\r\n    Object.defineProperty(obj, key, {\r\n        configurable: false,\r\n        enumerable: true,\r\n        get: () => {\r\n            return obj.$data[key];\r\n        },\r\n        set: (newVal) => {\r\n            obj.$data[key] = newVal;\r\n        },\r\n    });\r\n}\r\nfunction proxyMethod(obj, key) {\r\n    Object.defineProperty(obj, key, {\r\n        configurable: false,\r\n        enumerable: true,\r\n        get: () => {\r\n            return obj.$options.methods[key];\r\n        },\r\n    });\r\n}\r\nfunction initComputed(context, computed) {\r\n    if (typeof computed === \"object\") {\r\n        Object.keys(computed).forEach((key) => {\r\n            Object.defineProperty(context, key, {\r\n                // 如果是函数，直接就作为get，否则可能是一个对象，使用对象的get\r\n                get: computed[key],\r\n            });\r\n        });\r\n    }\r\n}\n\nconsole.log(\"zvm 0.0.1\");\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//# sourceURL=webpack://example/../zvm/dist/es/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/if.js");
/******/ 	
/******/ })()
;