/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/bind.js":
/*!*********************!*\
  !*** ./src/bind.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var zvm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zvm */ \"../zvm/dist/es/main.js\");\n\n\nconst app = (0,zvm__WEBPACK_IMPORTED_MODULE_0__.createApp)({\n  template: \"#app\",\n  data() {\n    return {\n      data: \"这是绑定的值\",\n      isDisable: false,\n    };\n  },\n  methods: {\n    handleBtnClick() {\n      this.isDisable = !this.isDisable;\n    },\n  },\n});\n\napp.mount(\"#app\");\n\n\n//# sourceURL=webpack://example/./src/bind.js?");

/***/ }),

/***/ "../zvm/dist/es/main.js":
/*!******************************!*\
  !*** ../zvm/dist/es/main.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"computed\": () => (/* binding */ h),\n/* harmony export */   \"createApp\": () => (/* binding */ x),\n/* harmony export */   \"effect\": () => (/* binding */ s),\n/* harmony export */   \"reactive\": () => (/* binding */ p),\n/* harmony export */   \"shallowReactive\": () => (/* binding */ f),\n/* harmony export */   \"watch\": () => (/* binding */ m)\n/* harmony export */ });\nvar e;let t;!function(e){e[e.SET=0]=\"SET\",e[e.ADD=1]=\"ADD\",e[e.DELETE=2]=\"DELETE\"}(e||(e={}));const n=new WeakMap,o=Symbol(\"iterate\"),r=[];function s(e,n={}){const o=()=>{!function(e){if(!e.deps)return;for(let t=0;t<e.deps.length;t++){e.deps[t].delete(e)}e.deps.length=0}(o),t=o,r.push(o);const n=e();return r.pop(),t=r[r.length-1],n};return o.options=n,o.deps=[],n.lazy||o(),o}function i(e,o){if(!t||!a)return;const r=n.get(e)||n.set(e,new Map).get(e),s=r.get(o)||r.set(o,new Set).get(o);s.add(t),t.deps?t.deps.push(s):(t.deps=[]).push(s)}function c(r,s,{type:i,newValue:c,oldValue:l}){const a=n.get(r);if(!a)return;const d=new Set,u=a.get(s),p=a.get(o);if(u&&u.forEach((e=>{d.add(e)})),i!==e.ADD&&i!==e.DELETE||p&&p.forEach((e=>{e!=t&&d.add(e)})),i===e.ADD&&Array.isArray(r)){const e=a.get(\"length\");e&&e.forEach((e=>{e!=t&&d.add(e)}))}d.forEach((e=>{t!==e&&(e.options&&e.options.scheduler?e.options.scheduler(e):e())}))}const l=Symbol(\"raw_key\"),a=!0,d=new Map;function u(t,{isShallow:n=!1}){return new Proxy(t,{get(e,t,o){if(t===l)return e;\"symbol\"!=typeof t&&i(e,t);const r=Reflect.get(e,t,o);return n?r:\"object\"==typeof r&&null!==r?p(r):r},set(t,n,o,r){const s=t[n],i=Array.isArray(t)?Number(n)<t.length?e.SET:e.ADD:Object.prototype.hasOwnProperty.call(t,n)?e.SET:e.ADD,l=Reflect.set(t,n,o,r);return s!==o&&c(t,n,{type:i,oldValue:s,newValue:o}),l},has:(e,t)=>(i(e,t),Reflect.has(e,t)),ownKeys:e=>(i(e,Array.isArray(e)?\"length\":o),Reflect.ownKeys(e)),deleteProperty(t,n){const o=Object.prototype.hasOwnProperty.call(t,n),r=Reflect.deleteProperty(t,n);return o&&r&&(Array.isArray(t)?c(t,n,{type:e.SET}):c(t,n,{type:e.DELETE})),r}})}function p(e){const t=d.get(e);if(t)return t;const n=u(e,{});return d.set(e,n),n}function f(e){return u(e,{isShallow:!0})}function h(t){let n,o=!0;const r=s(t,{lazy:!0,scheduler(){o||(o=!0,c(l,\"value\",{type:e.SET}))}}),l={get value(){return o&&(n=r(),o=!1),i(l,\"value\"),n}};return l}function m(e,t,n={immediate:!1}){let o,r,i;function c(e){i=e}function l(){i&&i(),i=null,r=a(),t(r,o,c),o=r}const a=s((()=>\"function\"==typeof e?e():\"object\"==typeof e?y(e):void 0),{lazy:!0,scheduler:()=>{\"post\"===n.flush?Promise.resolve().then(l):l()}});n.immediate?l():a()}function y(e,t=new Set){if(\"object\"!=typeof e||null===e||t.has(e))return e;t.add(e);for(const n in e)y(e[n],t);return e}const g={textRender:(e,t,n)=>{Object.hasOwn(e,\"_textContent\")||Object.defineProperty(e,\"_textContent\",{value:e.textContent});const o=e._textContent;e.textContent=n?o.replace(n,t)||\"\":void 0===t?\"\":t},classRender:(e,t,n)=>{for(const n in t)t[n]?e.classList.add(n):e.classList.remove(n)},attrRender:e=>(t,n,o)=>{!0===n?t.setAttribute(e,\"\"):!1===n?t.removeAttribute(e):t.setAttribute(e,n)},forRender:e=>{const t=e.cloneNode(!0),n=e.parentNode,o=e.previousSibling,r=[];return n?.removeChild(e),(e,s,i,c)=>{r.forEach((e=>{n?.removeChild(e)})),r.length=0;let l=o;for(let o=0;o<i.length;o++){if(!i[o])continue;const u=t.cloneNode(!0);u.removeAttribute(\"z-for\"),l?(a=u,(d=l)?.parentNode?.insertBefore(a,d.nextSibling)):n?.appendChild(u),l=u,r.push(u);const p=D({data:{[e]:i[o],[s]:o}},c);Object.setPrototypeOf(p,c),new A(u,p,{compileRoot:!0}).mount(),l=u}var a,d}}};function b(e,t,n){const o=new Function(t,\"return \"+function(e,t){t=t.replace(/\\s/g,\"\");const n=/(true|false|null|undefined)/g;return(t=\" \"+t).replace(/([:\\s\\+\\-\\*\\/%&\\|\\^!\\*~]\\s*?)(([a-zA-Z_$][a-zA-Z_$0-9]*))/g,((t,o,r)=>n.test(r)?o+r:o+e+\".\"+r))}(t,n));return o(e)}var E={on:function(e,t,n,o){const r=(o=o.replace(/\\s/g,\"\")).match(/^(\\w+)([(]((,?[$'\\w']+)+)[)])?/);if(!r)return;const s=r[1],i=[],c=/^'(.*)'$/,l=/(\\$event)$/;let a=-1;if(r&&r[3]){r[3].split(\",\").forEach((e=>{c.test(e)?i.push(e.replace(c,\"$1\")):l.test(e)?(i.push(e),a=i.length-1):i.push(function(e,t){const n=t.split(\".\"),o=n.length;let r=0;for(;r<o;)e=e[n[r++]];return e}(t.$data,e))}))}const d=n.split(\":\")[1],u=t&&t[s];d&&u&&e.addEventListener(d,(e=>(~a&&i.splice(a,1,e),u.call(t,...i))))},model:function(e,t,n,o){const r=t.$data[o];e.value=r,e.addEventListener(\"input\",(e=>{!function(e,t,n){const o=t.split(\".\"),r=o.length;let s=0;for(;s<r-1;)e=e[o[s++]];e[o[s]]=n}(t.$data,o,e.target.value)}))},text:function(e,t,n,o,r=\"\"){const s=g.textRender;s&&m((()=>b(t,\"scope\",o)),(t=>{s&&s(e,t,r)}),{immediate:!0})},if:function(e,t,n,o){const r=e.nextElementSibling;let s=null;r&&void 0!==r.getAttribute(\"z-else\")&&(s=r),m((()=>!!b(t,\"scope\",o)),(t=>{t?(e.style.display=\"block\",s&&(s.style.display=\"none\")):(e.style.display=\"none\",s&&(s.style.display=\"block\"))}),{immediate:!0})},bind:function(e,t,n,o){const r=n.split(\":\"),i=r.length>1?r[1]:n;let c=g[i+\"Render\"];c||(c=g.attrRender(i)),c&&s((()=>{c(e,b(t,\"scope\",o))}))},for:function(e,t,n,o){const r=(o=o.replace(/\\s/g,\"\")).match(/[(](\\w+)(,(\\w+))[)]in(\\w+)/);if(r&&r[4]){const[,n,,o,i]=r,c=g.forRender(e);s((()=>{c(n,o,b(t,\"scope\",i),t)}))}}};const v=/^z-/,w=/^z-for/;class A{node;vm;needDeepCompile=!0;frag;options;constructor(e,t,n={compileRoot:!1}){this.node=e,this.vm=t,this.options=n,this.frag=this.nodeToFragment(this.node),n.compileRoot&&this.compileNode(this.node,this.vm),this.compile(this.frag,this.vm)}mount(e){if(e){const t=document.querySelector(e);t&&t.appendChild(this.frag)}else this.node.appendChild(this.frag)}nodeToFragment(e){const t=document.createDocumentFragment();let n;for(;n=e.firstChild;)t.appendChild(n);return t}compile(e,t){const n=e.childNodes;Array.from(n).forEach((e=>{this.compileNode(e,t)}))}compileNode(e,t){1===e.nodeType?this.compileElement(e,t):3===e.nodeType&&this.compileText(e,t),e.childNodes&&e.childNodes.length&&this.needDeepCompile&&this.compile(e,t),this.needDeepCompile=!0}compileText(e,t){const n=e.textContent;if(!n)return;const o=/\\{\\{(.*)\\}\\}/.exec(n);null!==o&&E.text(e,t,\"text\",o[1],o[0])}compileElement(e,t){const n=Array.from(e.attributes),o=n.findIndex((e=>w.test(e.nodeName)));if(~o)return this.needDeepCompile=!1,void this.compileDirective(e,t,n[o]);Array.from(e.attributes).forEach((n=>{this.compileDirective(e,t,n)}))}compileDirective(e,t,n){const o=n.nodeName,r=n.nodeValue;if(v.test(o)){const n=o.substring(2).split(\":\")[0];E[n]&&E[n](e,t,o,r),e.removeAttribute(o)}}}function D(e,t={},n=!0){const o=Object.create(t);return o.$el=document.querySelector(e.template),o.$data=\"function\"==typeof e.data?n?p(e.data()):e.data():n?p(e.data):e.data,o.$options=e,Object.keys(o.$data).forEach((e=>{!function(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$data[t],set:n=>{e.$data[t]=n}})}(o,e)})),e.methods&&Object.keys(e.methods).forEach((e=>{!function(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$options.methods[t]})}(o,e)})),function(e,t){\"object\"==typeof t&&Object.keys(t).forEach((n=>{Object.defineProperty(e,n,{get:t[n]})}))}(o,e.computed),o}function x(e){const t=D(e,this),n=new A(t.$el,t);return{vm:t,mount:n.mount.bind(n)}}console.log(\"zvm 0.0.1\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JlYWN0aXZpdHkvdHlwZS50cyIsIi4uLy4uL3NyYy9yZWFjdGl2aXR5L2VmZmVjdC50cyIsIi4uLy4uL3NyYy9yZWFjdGl2aXR5L3JlYWN0aXZlLnRzIiwiLi4vLi4vc3JjL3JlYWN0aXZpdHkvY29tcHV0ZWQudHMiLCIuLi8uLi9zcmMvcmVhY3Rpdml0eS93YXRjaC50cyIsIi4uLy4uL3NyYy9jb21waWxlL3JlbmRlci50cyIsIi4uLy4uL3NyYy9jb21waWxlL2RvbS50cyIsIi4uLy4uL3NyYy9jb21waWxlL3V0aWwudHMiLCIuLi8uLi9zcmMvY29tcGlsZS9kaXJlY3RpdmVzLnRzIiwiLi4vLi4vc3JjL2NvbXBpbGUvY29tcGlsZS50cyIsIi4uLy4uL3NyYy96dm0venZtLnRzIiwiLi4vLi4vc3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgRWZmZWN0Rm4gPSB7XG4gICgpOiB2b2lkO1xuICBkZXBzPzogQXJyYXk8U2V0PCgpID0+IHZvaWQ+PjtcbiAgb3B0aW9ucz86IHtcbiAgICBzY2hlZHVsZXI/OiAoZWZmZWN0Rm46IEVmZmVjdEZuKSA9PiB2b2lkO1xuICB9O1xufTtcbmV4cG9ydCBpbnRlcmZhY2UgRWZmZWN0T3B0aW9ucyB7XG4gIGxhenk/OiBib29sZWFuO1xuICBzY2hlZHVsZXI/OiAoZWZmZWN0OiBFZmZlY3RGbikgPT4gdm9pZDtcbn1cbmV4cG9ydCBlbnVtIFRyaWdnZXJUeXBlIHtcbiAgU0VULFxuICBBREQsXG4gIERFTEVURSxcbn1cbiIsImltcG9ydCB7IHNob3VkVHJhY2sgfSBmcm9tIFwiLi9yZWFjdGl2ZVwiO1xuaW1wb3J0IHsgRWZmZWN0Rm4sIEVmZmVjdE9wdGlvbnMsIFRyaWdnZXJUeXBlIH0gZnJvbSBcIi4vdHlwZVwiO1xuLy8g5b2T5YmN5rS75Yqo55qEZWZmZWN05Ye95pWwXG5sZXQgYWN0aXZlRWZmZWN0Rm46IEVmZmVjdEZuO1xuXG5leHBvcnQgbGV0IG5lZWRUcmlnZ2VyID0gdHJ1ZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZU5lZWRUcmlnZ2VyKGZsYWc6IGJvb2xlYW4pIHtcbiAgbmVlZFRyaWdnZXIgPSBmbGFnO1xufVxuXG4vLyDlrZjlgqjlia/kvZznlKjlh73mlbDnmoRtYXBcbmNvbnN0IGJ1Y2tldDogV2Vha01hcDxhbnksIE1hcDxhbnksIFNldDxFZmZlY3RGbj4+PiA9IG5ldyBXZWFrTWFwKCk7XG5cbi8vIOi/reS7o+WZqGtleVxuZXhwb3J0IGNvbnN0IElURVJBVEVfS0VZID0gU3ltYm9sKFwiaXRlcmF0ZVwiKTtcblxuLy8gZWZmZWN05Ye95pWw5qCIXG5jb25zdCBlZmZlY3RGblN0YWNrOiBBcnJheTxFZmZlY3RGbj4gPSBbXTtcblxuLyoqXG4gKiDms6jlhozlia/kvZznlKjlh73mlbDvvIzlj6ropoFmbuS4reWtmOWcqOS7o+eQhuWvueixoS9jb21wdXRlZOWvueixoe+8jOWImeS8muaKiuW9k+WJjeeahOWJr+S9nOeUqOWHveaVsOa3u+WKoOWIsOWTjeW6lOW8j+WvueixoeeahGRlcHPkuK1cbiAqIEBwYXJhbSBmbiBnZXR0ZXLlh73mlbBcbiAqIEBwYXJhbSBvcHRpb25zIGVmZmVjdOWHveaVsOeahOmFjee9rlxuICogQHJldHVybnMg6L+U5Zue5Ymv5L2c55So5Ye95pWwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlZmZlY3QoZm46ICgpID0+IHZvaWQsIG9wdGlvbnM6IEVmZmVjdE9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBlZmZlY3RGbiA9ICgpID0+IHtcbiAgICAvLyDnp7vpmaTkuIrmrKHnmoTkvp3otZbpm4blkIhcbiAgICBjbGVhblVwKGVmZmVjdEZuKTtcblxuICAgIGFjdGl2ZUVmZmVjdEZuID0gZWZmZWN0Rm47XG5cbiAgICAvLyDlsIblvZPliY3nmoTlia/kvZznlKjlh73mlbDmjqjlhaXmoIjkuK3vvIzltYzlpZdlZmZlY3TnmoTmg4XlhrVcbiAgICBlZmZlY3RGblN0YWNrLnB1c2goZWZmZWN0Rm4pO1xuICAgIGNvbnN0IHJlcyA9IGZuKCk7XG4gICAgZWZmZWN0Rm5TdGFjay5wb3AoKTtcbiAgICBhY3RpdmVFZmZlY3RGbiA9IGVmZmVjdEZuU3RhY2tbZWZmZWN0Rm5TdGFjay5sZW5ndGggLSAxXTtcblxuICAgIC8vIOi/lOWbnuWHveaVsOeahOe7k+aenFxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgZWZmZWN0Rm4ub3B0aW9ucyA9IG9wdGlvbnM7XG4gIGVmZmVjdEZuLmRlcHMgPSBbXTtcblxuICBpZiAoIW9wdGlvbnMubGF6eSkge1xuICAgIGVmZmVjdEZuKCk7XG4gIH1cblxuICByZXR1cm4gZWZmZWN0Rm47XG59XG5cbmZ1bmN0aW9uIGNsZWFuVXAoZWZmZWN0Rm46IEVmZmVjdEZuKSB7XG4gIGlmICghZWZmZWN0Rm4uZGVwcykgcmV0dXJuO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVmZmVjdEZuLmRlcHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkZXBzID0gZWZmZWN0Rm4uZGVwc1tpXTtcbiAgICAvLyDlsIblvZPliY3nmoRlZmZjdEZu5LuOZGVwc+S4reenu+mZpFxuICAgIGRlcHMuZGVsZXRlKGVmZmVjdEZuKTtcbiAgfVxuICAvLyDph43nva5lZmZlY3RGbueahGRlcHNcbiAgZWZmZWN0Rm4uZGVwcy5sZW5ndGggPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhY2sodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKCFhY3RpdmVFZmZlY3RGbiB8fCAhc2hvdWRUcmFjaykgcmV0dXJuO1xuICBjb25zdCBkZXBzTWFwID1cbiAgICBidWNrZXQuZ2V0KHRhcmdldCkgfHwgYnVja2V0LnNldCh0YXJnZXQsIG5ldyBNYXAoKSkuZ2V0KHRhcmdldCk7XG4gIGNvbnN0IGRlcHMgPSBkZXBzTWFwIS5nZXQoa2V5KSB8fCBkZXBzTWFwIS5zZXQoa2V5LCBuZXcgU2V0KCkpLmdldChrZXkpO1xuICBkZXBzIS5hZGQoYWN0aXZlRWZmZWN0Rm4pO1xuICBhY3RpdmVFZmZlY3RGbi5kZXBzXG4gICAgPyBhY3RpdmVFZmZlY3RGbi5kZXBzLnB1c2goZGVwcyEpXG4gICAgOiAoYWN0aXZlRWZmZWN0Rm4uZGVwcyA9IFtdIGFzIFNldDwoKSA9PiB2b2lkPltdKS5wdXNoKGRlcHMhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXIoXG4gIHRhcmdldCxcbiAga2V5OiBzdHJpbmcgfCBzeW1ib2wsXG4gIHtcbiAgICB0eXBlLFxuICAgIG5ld1ZhbHVlLFxuICAgIG9sZFZhbHVlLFxuICB9OiB7XG4gICAgdHlwZTogVHJpZ2dlclR5cGU7XG4gICAgb2xkVmFsdWU/OiBhbnk7XG4gICAgbmV3VmFsdWU/OiBhbnk7XG4gIH1cbikge1xuICBpZiAoIW5lZWRUcmlnZ2VyKSByZXR1cm47XG4gIGNvbnN0IGRlcHNNYXAgPSBidWNrZXQuZ2V0KHRhcmdldCk7XG5cbiAgaWYgKCFkZXBzTWFwKSByZXR1cm47XG5cbiAgY29uc3QgZWZmZWN0c1RvUnVuID0gbmV3IFNldDxFZmZlY3RGbj4oKTtcbiAgY29uc3QgZGVwcyA9IGRlcHNNYXAuZ2V0KGtleSk7XG5cbiAgY29uc3QgaXRlcmF0ZUVmZmVjdHMgPSBkZXBzTWFwLmdldChJVEVSQVRFX0tFWSk7XG5cbiAgZGVwcyAmJlxuICAgIGRlcHMuZm9yRWFjaCgoZWZmZWN0Rm4pID0+IHtcbiAgICAgIGVmZmVjdHNUb1J1bi5hZGQoZWZmZWN0Rm4pO1xuICAgIH0pO1xuXG4gIC8vIOWPquaciea3u+WKoOWSjOWIoOmZpOaTjeS9nOaJjeS8muaUueWPmOWvueixoeeahGtleXPvvIzmlYXmraTml7bpnIDopoHop6blj5FpdGVyYXRlRWZmZWN0c1xuICBpZiAodHlwZSA9PT0gVHJpZ2dlclR5cGUuQUREIHx8IHR5cGUgPT09IFRyaWdnZXJUeXBlLkRFTEVURSkge1xuICAgIGl0ZXJhdGVFZmZlY3RzICYmXG4gICAgICBpdGVyYXRlRWZmZWN0cy5mb3JFYWNoKChlZmZlY3RGbikgPT4ge1xuICAgICAgICBpZiAoZWZmZWN0Rm4gIT0gYWN0aXZlRWZmZWN0Rm4pIHtcbiAgICAgICAgICBlZmZlY3RzVG9SdW4uYWRkKGVmZmVjdEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICAvLyDlpoLmnpxUcmlnZ2VyVHlwZSA9PT0gQURELCDlubbkuJR0YXJnZXTmmK/mlbDnu4TvvIzor7TmmI7mlbDnu4TnmoTplb/luqblj5HnlJ/lj5jljJbvvIzliJnpnIDopoHmiormlbDnu4TnmoRsZW5ndGjkuZ/op6blj5FcbiAgaWYgKHR5cGUgPT09IFRyaWdnZXJUeXBlLkFERCAmJiBBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcbiAgICBjb25zdCBsZW5ndGhFZmZlY3RzID0gZGVwc01hcC5nZXQoXCJsZW5ndGhcIik7XG4gICAgbGVuZ3RoRWZmZWN0cyAmJlxuICAgICAgbGVuZ3RoRWZmZWN0cy5mb3JFYWNoKChlZmZlY3RGbikgPT4ge1xuICAgICAgICBpZiAoZWZmZWN0Rm4gIT0gYWN0aXZlRWZmZWN0Rm4pIHtcbiAgICAgICAgICBlZmZlY3RzVG9SdW4uYWRkKGVmZmVjdEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICBlZmZlY3RzVG9SdW4uZm9yRWFjaCgoZWZmZWN0Rm4pID0+IHtcbiAgICAvLyDpgb/lhY3lvqrnjq/op6blj5FcbiAgICBpZiAoYWN0aXZlRWZmZWN0Rm4gIT09IGVmZmVjdEZuKSB7XG4gICAgICBpZiAoZWZmZWN0Rm4ub3B0aW9ucyAmJiBlZmZlY3RGbi5vcHRpb25zLnNjaGVkdWxlcikge1xuICAgICAgICBlZmZlY3RGbi5vcHRpb25zLnNjaGVkdWxlcihlZmZlY3RGbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlZmZlY3RGbigpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCJpbXBvcnQgeyBJVEVSQVRFX0tFWSwgdHJhY2ssIHRyaWdnZXIgfSBmcm9tIFwiLi9lZmZlY3RcIjtcbmltcG9ydCB7IFRyaWdnZXJUeXBlIH0gZnJvbSBcIi4vdHlwZVwiO1xuXG5jb25zdCBSQVdfS0VZID0gU3ltYm9sKFwicmF3X2tleVwiKTtcblxuLy8g5Yib5bu65LiA5LiqbWFw5p2l6K6w5b2V5bey57uP6KKr5Luj55CG55qE5a+56LGh77yM6YG/5YWN6YeN5aSN5Luj55CGXG5cbi8vVE9ET1xuZXhwb3J0IGNvbnN0IHNob3VkVHJhY2sgPSB0cnVlO1xuXG5jb25zdCByZWFjdGl2ZU1hcCA9IG5ldyBNYXAoKTtcblxuLyoqXG4gKiDliJvlu7rkuIDkuKrlk43lupTlvI/lr7nosaFcbiAqIEBwYXJhbSBvYmog5a+56LGhXG4gKiBAcGFyYW0gaXNTaGFsbG93IOaYr+WQpua1heaLt+i0nVxuICogQHBhcmFtIGlzUmVhZG9ubHkg5piv5ZCm5Y+q6K+7XG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBjcmVhdGVSZWFjdGl2ZShvYmo6IGFueSwgeyBpc1NoYWxsb3cgPSBmYWxzZSB9KSB7XG4gIHJldHVybiBuZXcgUHJveHkob2JqLCB7XG4gICAgZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikge1xuICAgICAgLy8g5Luj55CG5a+56LGh5Y+v5Lul6YCa6L+HUkFXX0tFWeiOt+WPluWIsOWOn+Wni+aVsOaNrlxuICAgICAgaWYgKGtleSA9PT0gUkFXX0tFWSkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIikge1xuICAgICAgICAvLyDlpoLmnpzkuI3mmK/lj6ror7vvvIzlubbkuJRrZXnkuI3mmK9zeW1ib2zvvIzliJnmt7vliqDlia/kvZznlKjlh73mlbBcbiAgICAgICAgdHJhY2sodGFyZ2V0LCBrZXkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXMgPSBSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xuXG4gICAgICAvLyDlpoLmnpzkuLrmtYXlk43lupTvvIzliJnkuI3lr7nlgLzov5vooYzlk43lupTlvI/ljJZcbiAgICAgIGlmIChpc1NoYWxsb3cpIHtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cblxuICAgICAgLy8g5aaC5p6c5piv5rex5ZON5bqU77yM5YiZ6YCS5b2S5ZON5bqU5byP5YyW5YC8XG4gICAgICBpZiAodHlwZW9mIHJlcyA9PT0gXCJvYmplY3RcIiAmJiByZXMgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlYWN0aXZlKHJlcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXM7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBrZXksIG5ld1ZhbCwgcmVjZWl2ZXIpIHtcbiAgICAgIGNvbnN0IG9sZFZhbCA9IHRhcmdldFtrZXldO1xuXG4gICAgICBjb25zdCB0eXBlID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpXG4gICAgICAgID8gLy8g5aaC5p6c5piv5pWw57uE5LiUa2V55YC85bCP5LqO6ZW/5bqm77yM5YiZ6K6k5Li65pivc2V077yM5ZCm5YiZ5piv5o+S5YWl5paw5YWD57SgXG4gICAgICAgICAgTnVtYmVyKGtleSkgPCB0YXJnZXQubGVuZ3RoXG4gICAgICAgICAgPyBUcmlnZ2VyVHlwZS5TRVRcbiAgICAgICAgICA6IFRyaWdnZXJUeXBlLkFERFxuICAgICAgICA6IC8vIOWmguaenOWvueixoeWQq+aciWtleeWxnuaAp++8jOWImeiupOS4uuaYr3NldO+8jOWQpuWImeaYr+aWsOWinuWxnuaAp1xuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpXG4gICAgICAgID8gVHJpZ2dlclR5cGUuU0VUXG4gICAgICAgIDogVHJpZ2dlclR5cGUuQUREO1xuICAgICAgY29uc3QgcmVzID0gUmVmbGVjdC5zZXQodGFyZ2V0LCBrZXksIG5ld1ZhbCwgcmVjZWl2ZXIpO1xuXG4gICAgICBpZiAob2xkVmFsICE9PSBuZXdWYWwpIHtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIGtleSwge1xuICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgb2xkVmFsdWU6IG9sZFZhbCxcbiAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXM7XG4gICAgfSxcbiAgICBoYXModGFyZ2V0LCBrZXkpIHtcbiAgICAgIHRyYWNrKHRhcmdldCwga2V5KTtcbiAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyh0YXJnZXQsIGtleSk7XG4gICAgfSxcbiAgICBvd25LZXlzKHRhcmdldCkge1xuICAgICAgdHJhY2sodGFyZ2V0LCBBcnJheS5pc0FycmF5KHRhcmdldCkgPyBcImxlbmd0aFwiIDogSVRFUkFURV9LRVkpO1xuICAgICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xuICAgIH0sXG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGNvbnN0IGhhc0tleSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgICBjb25zdCByZXMgPSBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KTtcbiAgICAgIGlmIChoYXNLZXkgJiYgcmVzKSB7XG4gICAgICAgIEFycmF5LmlzQXJyYXkodGFyZ2V0KVxuICAgICAgICAgID8gdHJpZ2dlcih0YXJnZXQsIGtleSwge1xuICAgICAgICAgICAgICB0eXBlOiBUcmlnZ2VyVHlwZS5TRVQsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIDogdHJpZ2dlcih0YXJnZXQsIGtleSwge1xuICAgICAgICAgICAgICB0eXBlOiBUcmlnZ2VyVHlwZS5ERUxFVEUsXG4gICAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXM7XG4gICAgfSxcbiAgfSk7XG59XG5cbi8vIOm7mOiupHJlYWN0aXZl5Ye95pWwLCDmt7Hlk43lupTlvI/ljJZcbmZ1bmN0aW9uIHJlYWN0aXZlKG9iaikge1xuICAvLyDlhYjmn6Xmib7lvZPliY3lr7nosaHmmK/lkKblt7Lnu4/ku6PnkIbov4dcbiAgY29uc3QgZXhpc3RQcm94eSA9IHJlYWN0aXZlTWFwLmdldChvYmopO1xuICBpZiAoZXhpc3RQcm94eSkge1xuICAgIC8vIOWtmOWcqOWImeebtOaOpei/lOWbnlxuICAgIHJldHVybiBleGlzdFByb3h5O1xuICB9XG5cbiAgLy8g5ZCm5YiZ5Yib5bu65Luj55CG5a+56LGhXG4gIGNvbnN0IHByb3h5ID0gY3JlYXRlUmVhY3RpdmUob2JqLCB7fSk7XG4gIHJlYWN0aXZlTWFwLnNldChvYmosIHByb3h5KTtcbiAgcmV0dXJuIHByb3h5O1xufVxuXG5mdW5jdGlvbiBzaGFsbG93UmVhY3RpdmUob2JqKSB7XG4gIHJldHVybiBjcmVhdGVSZWFjdGl2ZShvYmosIHsgaXNTaGFsbG93OiB0cnVlIH0pO1xufVxuXG5leHBvcnQgeyByZWFjdGl2ZSwgc2hhbGxvd1JlYWN0aXZlIH07XG4iLCJpbXBvcnQgeyBlZmZlY3QsIHRyYWNrLCB0cmlnZ2VyIH0gZnJvbSBcIi4vZWZmZWN0XCI7XG5pbXBvcnQgeyBUcmlnZ2VyVHlwZSB9IGZyb20gXCIuL3R5cGVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVkKGdldHRlcjogKCkgPT4gYW55KSB7XG4gIGxldCB2YWx1ZTogYW55O1xuICAvLyDorr7nva7moIflv5fkvY3vvIxkaXJ0eeihqOekuuaVsOaNruWPkeeUn+aUueWPmO+8jOmcgOimgeabtOaWsO+8jOWunueOsGNvbXB1dGVk5oOw5oCn5rGC5YC8XG4gIGxldCBkaXJ0eSA9IHRydWU7XG4gIGNvbnN0IGVmZmVjdEZuID0gZWZmZWN0KGdldHRlciwge1xuICAgIC8vIOiuvue9rmxhennkuLp0cnVl77yM6KGo56S65LiN5Lya56uL5Y2z5omn6KGMZWZmZWN0Rm7vvIzogIzmmK/lnKjosIPnlKhjb21wdXRlZOeahOaXtuWAmeaJjeaJp+ihjO+8jOWunueOsGNvbXB1dGVk5oOw5oCn5rGC5YC8XG4gICAgbGF6eTogdHJ1ZSxcbiAgICBzY2hlZHVsZXIoKSB7XG4gICAgICBpZiAoIWRpcnR5KSB7XG4gICAgICAgIC8vIOWwhmRpcnR56K6+5Li6dHJ1Ze+8jOihqOekuuaVsOaNruWPkeeUn+aUueWPmO+8jOmcgOimgeabtOaWsFxuICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgIC8vIOiwg+eUqHRyaWdnZXLvvIzlkYrnn6Vjb21wdXRlZOeahOS+nei1luWPkeeUn+WPmOWMluiuqeS7luS7rOmHjeaWsOaJp+ihjFxuICAgICAgICB0cmlnZ2VyKG9iaiwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgdHlwZTogVHJpZ2dlclR5cGUuU0VULFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICAvLyBjb21wdXRlZOimgei/lOWbnueahOWvueixoe+8jOmAmui/h29iai52YWx1ZeiOt+WPluWIsGNvbXB1dGVk6L+U5Zue55qE5YC8XG4gIGNvbnN0IG9iaiA9IHtcbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAvLyDlpoLmnpxkaXJ0eeS4unRydWXvvIzooajnpLrmlbDmja7lj5HnlJ/mlLnlj5jvvIzpnIDopoHmm7TmlrBcbiAgICAgIGlmIChkaXJ0eSkge1xuICAgICAgICB2YWx1ZSA9IGVmZmVjdEZuKCk7XG4gICAgICAgIGRpcnR5ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyDmlLbpm4bkvp3otZZcbiAgICAgIHRyYWNrKG9iaiwgXCJ2YWx1ZVwiKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICB9O1xuICByZXR1cm4gb2JqO1xufVxuIiwiaW1wb3J0IHsgZWZmZWN0IH0gZnJvbSBcIi4vZWZmZWN0XCI7XG5cbmludGVyZmFjZSBXYXRjaE9wdGlvbnMge1xuICBkZWVwPzogYm9vbGVhbjtcbiAgaW1tZWRpYXRlPzogYm9vbGVhbjtcbiAgZmx1c2g/OiBcInBvc3RcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdhdGNoKFxuICBnZXR0ZXI6IG9iamVjdCB8ICgoKSA9PiB2b2lkKSxcbiAgZm46IChuZXdWYWwsIG9sZFZhbCwgb25JbnZhbGlkYXRlKSA9PiB2b2lkLFxuICBvcHRpb25zOiBXYXRjaE9wdGlvbnMgPSB7XG4gICAgaW1tZWRpYXRlOiBmYWxzZSxcbiAgfVxuKSB7XG4gIGxldCBvbGRWYWw6IGFueSwgbmV3VmFsOiBhbnk7XG5cbiAgLy8g5a2Y5YKo6L+H5pyf5Zue6LCDXG4gIGxldCBjbGVhblVwOiAoKCkgPT4gdm9pZCkgfCBudWxsO1xuXG4gIGZ1bmN0aW9uIG9uSW52YWxpZGF0ZShmbikge1xuICAgIGNsZWFuVXAgPSBmbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGpvYigpIHtcbiAgICBjbGVhblVwICYmIGNsZWFuVXAoKTtcbiAgICBjbGVhblVwID0gbnVsbDtcbiAgICBuZXdWYWwgPSBlZmZlY3RGbigpO1xuICAgIGZuKG5ld1ZhbCwgb2xkVmFsLCBvbkludmFsaWRhdGUpO1xuICAgIG9sZFZhbCA9IG5ld1ZhbDtcbiAgfVxuXG4gIGNvbnN0IGVmZmVjdEZuID0gZWZmZWN0KFxuICAgICgpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgZ2V0dGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGdldHRlcigpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZ2V0dGVyID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHJldHVybiB0cmF2ZXJzZShnZXR0ZXIpO1xuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgbGF6eTogdHJ1ZSxcbiAgICAgIHNjaGVkdWxlcjogKCkgPT4ge1xuICAgICAgICBpZiAob3B0aW9ucy5mbHVzaCA9PT0gXCJwb3N0XCIpIHtcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGpvYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgam9iKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfVxuICApO1xuXG4gIC8vIOeri+WNs+aJp+ihjOWImeiwg+eUqGpvYlxuICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcbiAgICBqb2IoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyDnlLHkuo7orr7nva7kuoZsYXp5OnRydWXvvIzmlYXpnIDopoHmiYvliqjosIPnlKhlZmZlY3RGbui/m+ihjOS+nei1luaUtumbhlxuICAgIGVmZmVjdEZuKCk7XG4gIH1cbn1cblxuLyoqXG4gKiDpgJLlvZLor7vlj5Z2YWx1ZVxuICogQHBhcmFtIHZhbHVlXG4gKiBAcGFyYW0gc2VlbiDnlKjmnaXlrZjlgqjlt7Lnu4/or7vlj5bov4fnmoTlgLzvvIzpgb/lhY3lj5HnlJ/mrbvlvqrnjq9cbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlKHZhbHVlOiBvYmplY3QsIHNlZW4gPSBuZXcgU2V0KCkpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcIm9iamVjdFwiIHx8IHZhbHVlID09PSBudWxsIHx8IHNlZW4uaGFzKHZhbHVlKSlcbiAgICByZXR1cm4gdmFsdWU7XG4gIHNlZW4uYWRkKHZhbHVlKTtcbiAgZm9yIChjb25zdCBrIGluIHZhbHVlKSB7XG4gICAgdHJhdmVyc2UodmFsdWVba10sIHNlZW4pO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbiIsImltcG9ydCB7IFZNIH0gZnJvbSBcIi4uL3p2bS90eXBlXCI7XG5pbXBvcnQgeyBjcmVhdGVWTSB9IGZyb20gXCIuLi96dm0venZtXCI7XG5pbXBvcnQgeyBDb21waWxlIH0gZnJvbSBcIi4vY29tcGlsZVwiO1xuaW1wb3J0IHsgaW5zZXJ0QWZ0ZXIgfSBmcm9tIFwiLi9kb21cIjtcblxuZXhwb3J0IGNvbnN0IHJlbmRlciA9IHtcbiAgdGV4dFJlbmRlcjogKG5vZGU6IE5vZGUsIHRleHQ6IHN0cmluZywgcmVwbGFjZTogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCFPYmplY3QuaGFzT3duKG5vZGUsIFwiX3RleHRDb250ZW50XCIpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9kZSwgXCJfdGV4dENvbnRlbnRcIiwge1xuICAgICAgICB2YWx1ZTogbm9kZS50ZXh0Q29udGVudCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBvcmlnaW5UZXh0ID0gKG5vZGUgYXMgYW55KS5fdGV4dENvbnRlbnQ7XG4gICAgcmVwbGFjZVxuICAgICAgPyAobm9kZS50ZXh0Q29udGVudCA9IG9yaWdpblRleHQucmVwbGFjZShyZXBsYWNlLCB0ZXh0KSB8fCBcIlwiKVxuICAgICAgOiAobm9kZS50ZXh0Q29udGVudCA9IHR5cGVvZiB0ZXh0ID09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogdGV4dCk7XG4gIH0sXG4gIGNsYXNzUmVuZGVyOiAobm9kZTogSFRNTEVsZW1lbnQsIHZhbHVlOiBvYmplY3QsIHJlcGxhY2U6IHN0cmluZykgPT4ge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgICBub2RlLmNsYXNzTGlzdC5hZGQoa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuY2xhc3NMaXN0LnJlbW92ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgYXR0clJlbmRlcjogKGF0dHI6IHN0cmluZykgPT4gKG5vZGU6IEhUTUxFbGVtZW50LCB2YWx1ZSwgcmVwbGFjZTogc3RyaW5nKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSB0cnVlKSBub2RlLnNldEF0dHJpYnV0ZShhdHRyLCBcIlwiKTtcbiAgICBlbHNlIGlmICh2YWx1ZSA9PT0gZmFsc2UpIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgIGVsc2Uge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpO1xuICAgIH1cbiAgfSxcbiAgZm9yUmVuZGVyOiAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAvLyDliKnnlKjpl63ljIXkv53lrZjkuIDkuKrljp/lp4voioLngrlcbiAgICAvLyDnp4HmnInmlbDmja7vvIzkuI3mm7TmlLlcbiAgICBjb25zdCBfY2xvbmVOb2RlID0gbm9kZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgY29uc3QgX3BhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgY29uc3QgX3ByZXZpb3VzTm9kZTogTm9kZSB8IG51bGwgPSBub2RlLnByZXZpb3VzU2libGluZztcbiAgICBjb25zdCBmb3JOb2RlczogTm9kZVtdID0gW107XG4gICAgX3BhcmVudE5vZGU/LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIGZ1bmN0aW9uIGNsZWFyTm9kZXMoKSB7XG4gICAgICBmb3JOb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIF9wYXJlbnROb2RlPy5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgZm9yTm9kZXMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgcmV0dXJuICh2YWx1ZSwgaW5kZXgsIGl0ZW1zLCB2bTogVk0pID0+IHtcbiAgICAgIGNsZWFyTm9kZXMoKTtcbiAgICAgIGxldCBsYXN0Tm9kZTogTm9kZSB8IG51bGwgPSBfcHJldmlvdXNOb2RlO1xuICAgICAgLy8gbm9kZS5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFpdGVtc1tpXSkgY29udGludWU7XG4gICAgICAgIGNvbnN0IGNsb25lTm9kZSA9IF9jbG9uZU5vZGUuY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgICAgIC8vIG5vZGUuYXBwZW5kQ2hpbGQoZnJhZyk7XG4gICAgICAgIC8vIFRPRE9cbiAgICAgICAgKGNsb25lTm9kZSBhcyBFbGVtZW50KS5yZW1vdmVBdHRyaWJ1dGUoXCJ6LWZvclwiKTtcblxuICAgICAgICBpZiAobGFzdE5vZGUpIHtcbiAgICAgICAgICBpbnNlcnRBZnRlcihjbG9uZU5vZGUsIGxhc3ROb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfcGFyZW50Tm9kZT8uYXBwZW5kQ2hpbGQoY2xvbmVOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0Tm9kZSA9IGNsb25lTm9kZTtcbiAgICAgICAgZm9yTm9kZXMucHVzaChjbG9uZU5vZGUpO1xuICAgICAgICBjb25zdCBjaGlsZFZtID0gY3JlYXRlVk0oXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBbdmFsdWVdOiBpdGVtc1tpXSxcbiAgICAgICAgICAgICAgW2luZGV4XTogaSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIGRlYnVnZ2VyO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY2hpbGRWbSwgdm0pO1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGNoaWxkVm0pO1xuXG4gICAgICAgIG5ldyBDb21waWxlKGNsb25lTm9kZSwgY2hpbGRWbSwge1xuICAgICAgICAgIGNvbXBpbGVSb290OiB0cnVlLFxuICAgICAgICB9KS5tb3VudCgpO1xuICAgICAgICBsYXN0Tm9kZSA9IGNsb25lTm9kZTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBpbnNlcnRBZnRlcihuZXdOb2RlOiBOb2RlLCByZWZlcmVuY2VOb2RlOiBOb2RlKSB7XG4gIHJlZmVyZW5jZU5vZGU/LnBhcmVudE5vZGU/Lmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlLm5leHRTaWJsaW5nKTtcbn1cbiIsIi8vIOagueaNrmEuYi5j6K6+572u5pWw5o2uXG5leHBvcnQgZnVuY3Rpb24gc2V0VmFsdWVCeVBhdGgob2JqLCBwYXRoLCB2YWx1ZSkge1xuICBjb25zdCBwYXRocyA9IHBhdGguc3BsaXQoXCIuXCIpO1xuICBjb25zdCBsZW4gPSBwYXRocy5sZW5ndGg7XG4gIGxldCBpID0gMDtcbiAgd2hpbGUgKGkgPCBsZW4gLSAxKSB7XG4gICAgb2JqID0gb2JqW3BhdGhzW2krK11dO1xuICB9XG4gIG9ialtwYXRoc1tpXV0gPSB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlQnlQYXRoKG9iaiwgcGF0aCkge1xuICBjb25zdCBwYXRocyA9IHBhdGguc3BsaXQoXCIuXCIpO1xuXG4gIGNvbnN0IGxlbiA9IHBhdGhzLmxlbmd0aDtcbiAgbGV0IGkgPSAwO1xuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIG9iaiA9IG9ialtwYXRoc1tpKytdXTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX3dpdGgoc2NvcGVOYW1lOiBzdHJpbmcsIGV4cDogc3RyaW5nKSB7XG4gIC8v5Y676Zmk56m65qC8XG4gIGV4cCA9IGV4cC5yZXBsYWNlKC9cXHMvZywgXCJcIik7XG4gIGV4cCA9IFwiIFwiICsgZXhwO1xuICBjb25zdCBxdWlja1JlZ2V4ID1cbiAgICAvKFs6XFxzXFwrXFwtXFwqXFwvJSZcXHxcXF4hXFwqfl1cXHMqPykoKFthLXpBLVpfJF1bYS16QS1aXyQwLTldKikpL2c7XG4gIC8vIGphdmFzY3JpcHQg5YWz6ZSu5a2X55qE5q2j5YiZXG4gIGNvbnN0IGJvb2xSZWdleCA9IC8odHJ1ZXxmYWxzZXxudWxsfHVuZGVmaW5lZCkvZztcblxuICBleHAgPSBleHAucmVwbGFjZShxdWlja1JlZ2V4LCAoYSwgYiwgYykgPT4ge1xuICAgIHJldHVybiBib29sUmVnZXgudGVzdChjKSA/IGIgKyBjIDogYiArIHNjb3BlTmFtZSArIFwiLlwiICsgYztcbiAgfSk7XG5cbiAgcmV0dXJuIGV4cDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bkluU2NvcGUoc2NvcGUsIHNjb3BlTmFtZTogc3RyaW5nLCBleHA6IHN0cmluZykge1xuICBjb25zdCBmdW5jID0gbmV3IEZ1bmN0aW9uKHNjb3BlTmFtZSwgXCJyZXR1cm4gXCIgKyBfd2l0aChzY29wZU5hbWUsIGV4cCkpO1xuICByZXR1cm4gZnVuYyhzY29wZSk7XG59XG4iLCJpbXBvcnQgeyBlZmZlY3QsIHdhdGNoIH0gZnJvbSBcIi4uL21haW5cIjtcbmltcG9ydCB7IFZNIH0gZnJvbSBcIi4uL3p2bS90eXBlXCI7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9yZW5kZXJcIjtcbmltcG9ydCB7IGdldFZhbHVlQnlQYXRoLCBydW5JblNjb3BlLCBzZXRWYWx1ZUJ5UGF0aCB9IGZyb20gXCIuL3V0aWxcIjtcblxuZnVuY3Rpb24gb24obm9kZTogRWxlbWVudCwgdm06IFZNLCBkaXJlY3RpdmU6IHN0cmluZywgZXhwcmVzc2lvbjogc3RyaW5nKSB7XG4gIC8vIHotb246Y2xpY2sgLT4gY2xpY2tcbiAgLy8g5Ye95pWw6LCD55SoXG5cbiAgY29uc3QgbWV0aG9kUmVnID0gL14oXFx3KykoWyhdKCgsP1skJ1xcdyddKykrKVspXSk/LztcbiAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24ucmVwbGFjZSgvXFxzL2csIFwiXCIpO1xuICBjb25zdCBtYXRjaE1ldGhvZCA9IGV4cHJlc3Npb24ubWF0Y2gobWV0aG9kUmVnKTtcblxuICBpZiAoIW1hdGNoTWV0aG9kKSByZXR1cm47XG5cbiAgY29uc3QgbWV0aG9kID0gbWF0Y2hNZXRob2RbMV07XG4gIGNvbnN0IG1ldGhvZEFyZ3M6IGFueVtdID0gW107XG5cbiAgY29uc3Qgc2luZ2xlUmVnID0gL14nKC4qKSckLztcbiAgY29uc3QgJGV2ZW50UmVnID0gLyhcXCRldmVudCkkLztcbiAgLy8g5aaC5p6c6IO95p+l5YiwJGV2ZW505bCx5oqK5L2N572u6K6w5LiL5p2lXG4gIGxldCAkZXZlbnRJZHggPSAtMTtcbiAgaWYgKG1hdGNoTWV0aG9kICYmIG1hdGNoTWV0aG9kWzNdKSB7XG4gICAgLy8g5Y676Zmk5ous5Y+3XG5cbiAgICBjb25zdCBhcmdzID0gbWF0Y2hNZXRob2RbM10uc3BsaXQoXCIsXCIpO1xuICAgIGFyZ3MuZm9yRWFjaCgoYXJnKSA9PiB7XG4gICAgICAvLyDljLnphY3liLDljZXlvJXlj7flsLHmmK/mma7pgJrnmoTlrZfnrKbkuLJcbiAgICAgIGlmIChzaW5nbGVSZWcudGVzdChhcmcpKSB7XG4gICAgICAgIC8vIOWOu+mZpOWNleW8leWPt1xuICAgICAgICBtZXRob2RBcmdzLnB1c2goYXJnLnJlcGxhY2Uoc2luZ2xlUmVnLCBcIiQxXCIpKTtcbiAgICAgIH0gZWxzZSBpZiAoJGV2ZW50UmVnLnRlc3QoYXJnKSkge1xuICAgICAgICBtZXRob2RBcmdzLnB1c2goYXJnKTtcbiAgICAgICAgJGV2ZW50SWR4ID0gbWV0aG9kQXJncy5sZW5ndGggLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWV0aG9kQXJncy5wdXNoKGdldFZhbHVlQnlQYXRoKHZtLiRkYXRhLCBhcmcpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBjb25zdCBldmVudFR5cGUgPSBkaXJlY3RpdmUuc3BsaXQoXCI6XCIpWzFdO1xuXG4gIGNvbnN0IGZuID0gdm0gJiYgdm1bbWV0aG9kXTtcbiAgaWYgKGV2ZW50VHlwZSAmJiBmbikge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIChlKSA9PiB7XG4gICAgICBpZiAoISF+JGV2ZW50SWR4KSB7XG4gICAgICAgIG1ldGhvZEFyZ3Muc3BsaWNlKCRldmVudElkeCwgMSwgZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZm4uY2FsbCh2bSwgLi4ubWV0aG9kQXJncyk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbW9kZWwoXG4gIG5vZGU6IEhUTUxJbnB1dEVsZW1lbnQsXG4gIHZtOiBWTSxcbiAgZGlyZWN0aXZlOiBzdHJpbmcsXG4gIGV4cHJlc3Npb246IHN0cmluZ1xuKSB7XG4gIC8vIFRPRE8gYmluZCBpbnB1dFxuICBjb25zdCB2YWx1ZSA9IHZtLiRkYXRhW2V4cHJlc3Npb25dO1xuICBub2RlLnZhbHVlID0gdmFsdWU7XG5cbiAgbm9kZS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKGU6IEV2ZW50KSA9PiB7XG4gICAgc2V0VmFsdWVCeVBhdGgodm0uJGRhdGEsIGV4cHJlc3Npb24sIChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSk7XG4gIH0pO1xufVxuXG4vLyDpgJrnlKjlh73mlbDvvIzml6LpgILnlKh6LXRleHTvvIzkuZ/pgILnlKh7e3RleHR9fVxuZnVuY3Rpb24gdGV4dChcbiAgbm9kZTogVGV4dCxcbiAgdm06IFZNLFxuICBkaXJlY3RpdmU6IHN0cmluZyxcbiAgZXhwcmVzc2lvbjogc3RyaW5nLFxuICByZXBsYWNlID0gXCJcIlxuKSB7XG4gIGNvbnN0IHJlbmRlckZuID0gcmVuZGVyW1widGV4dFJlbmRlclwiXTtcblxuICBpZiAocmVuZGVyRm4pIHtcbiAgICB3YXRjaChcbiAgICAgICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHJ1bkluU2NvcGUodm0sIFwic2NvcGVcIiwgZXhwcmVzc2lvbik7XG4gICAgICB9LFxuICAgICAgKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgIHJlbmRlckZuICYmIHJlbmRlckZuKG5vZGUsIG5ld1ZhbHVlLCByZXBsYWNlKTtcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGltbWVkaWF0ZTogdHJ1ZSxcbiAgICAgIH1cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9pZihub2RlOiBIVE1MRWxlbWVudCwgdm06IFZNLCBkaXJlY3RpdmVzLCBleHByZXNzaW9uKSB7XG4gIGNvbnN0IG5leHQgPSBub2RlLm5leHRFbGVtZW50U2libGluZztcblxuICBsZXQgZWxzZU5vZGU6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gIGlmIChuZXh0ICYmIG5leHQuZ2V0QXR0cmlidXRlKFwiei1lbHNlXCIpICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbHNlTm9kZSA9IG5leHQgYXMgSFRNTEVsZW1lbnQ7XG4gIH1cblxuICBjb25zdCB1cGRhdGVkID0gKG5ld3ZhbHVlKSA9PiB7XG4gICAgaWYgKG5ld3ZhbHVlKSB7XG4gICAgICBub2RlLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICBlbHNlTm9kZSAmJiAoZWxzZU5vZGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICBlbHNlTm9kZSAmJiAoZWxzZU5vZGUuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIik7XG4gICAgfVxuICB9O1xuICB3YXRjaChcbiAgICAoKSA9PiB7XG4gICAgICByZXR1cm4gISFydW5JblNjb3BlKHZtLCBcInNjb3BlXCIsIGV4cHJlc3Npb24pO1xuICAgIH0sXG4gICAgdXBkYXRlZCxcbiAgICB7XG4gICAgICBpbW1lZGlhdGU6IHRydWUsXG4gICAgfVxuICApO1xufVxuXG5mdW5jdGlvbiBfZm9yKG5vZGU6IEhUTUxFbGVtZW50LCB2bTogVk0sIGRpcmVjdGl2ZSwgZXhwcmVzc2lvbjogc3RyaW5nKSB7XG4gIC8v5Y676Zmk56m65qC8XG4gIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2UoL1xccy9nLCBcIlwiKTtcbiAgY29uc3QgUkVGX0xJU1RfRk9SID0gL1soXShcXHcrKSgsKFxcdyspKVspXWluKFxcdyspLztcbiAgY29uc3QgZm9yTWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKFJFRl9MSVNUX0ZPUik7XG5cbiAgaWYgKGZvck1hdGNoICYmIGZvck1hdGNoWzRdKSB7XG4gICAgY29uc3QgWywgdmFsdWUsICwgaW5kZXgsIGxpc3RdID0gZm9yTWF0Y2g7XG5cbiAgICBjb25zdCByZW5kZXJGb3IgPSByZW5kZXIuZm9yUmVuZGVyKG5vZGUpO1xuICAgIGVmZmVjdCgoKSA9PiB7XG4gICAgICByZW5kZXJGb3IodmFsdWUsIGluZGV4LCBydW5JblNjb3BlKHZtLCBcInNjb3BlXCIsIGxpc3QpLCB2bSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZChub2RlOiBOb2RlLCB2bTogVk0sIGRpcmVjdGl2ZSwgZXhwcmVzc2lvbjogc3RyaW5nKSB7XG4gIGNvbnN0IGRpclNwbGl0ID0gZGlyZWN0aXZlLnNwbGl0KFwiOlwiKTtcblxuICBjb25zdCBkaXIgPSBkaXJTcGxpdC5sZW5ndGggPiAxID8gZGlyU3BsaXRbMV0gOiBkaXJlY3RpdmU7XG5cbiAgbGV0IHJlbmRlckZuID0gcmVuZGVyW2RpciArIFwiUmVuZGVyXCJdO1xuICBpZiAoIXJlbmRlckZuKSB7XG4gICAgcmVuZGVyRm4gPSByZW5kZXIuYXR0clJlbmRlcihkaXIpO1xuICB9XG4gIGlmIChyZW5kZXJGbikge1xuICAgIGVmZmVjdCgoKSA9PiB7XG4gICAgICByZW5kZXJGbihub2RlLCBydW5JblNjb3BlKHZtLCBcInNjb3BlXCIsIGV4cHJlc3Npb24pKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7IG9uLCBtb2RlbCwgdGV4dCwgaWY6IF9pZiwgYmluZCwgZm9yOiBfZm9yIH07XG4iLCJpbXBvcnQgeyBWTSB9IGZyb20gXCIuLi96dm0vdHlwZVwiO1xuaW1wb3J0IGRpcmVjdGl2ZXMgZnJvbSBcIi4vZGlyZWN0aXZlc1wiO1xuY29uc3QgRElSX1JFRyA9IC9eei0vO1xuY29uc3QgRElSX0ZPUl9SRUcgPSAvXnotZm9yLztcbmV4cG9ydCBjbGFzcyBDb21waWxlIHtcbiAgbm9kZTogTm9kZTtcbiAgdm06IFZNO1xuICAvLyDorr7nva7moIforrDlj5jph4/vvIzlr7nkuo52LWZvcueahOWtkOWFg+e0oO+8jOS4jemcgOimgee7p+e7rea3seW6pumBjeWOhlxuICBuZWVkRGVlcENvbXBpbGUgPSB0cnVlO1xuICBmcmFnOiBEb2N1bWVudEZyYWdtZW50O1xuICBvcHRpb25zOiBhbnk7XG4gIGNvbnN0cnVjdG9yKG5vZGU6IE5vZGUsIHZtOiBWTSwgb3B0aW9ucyA9IHsgY29tcGlsZVJvb3Q6IGZhbHNlIH0pIHtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIHRoaXMudm0gPSB2bTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuZnJhZyA9IHRoaXMubm9kZVRvRnJhZ21lbnQodGhpcy5ub2RlKTtcblxuICAgIG9wdGlvbnMuY29tcGlsZVJvb3QgJiYgdGhpcy5jb21waWxlTm9kZSh0aGlzLm5vZGUsIHRoaXMudm0pO1xuICAgIHRoaXMuY29tcGlsZSh0aGlzLmZyYWcsIHRoaXMudm0pO1xuICAgIC8vIHRoaXMubm9kZS5hcHBlbmRDaGlsZCh0aGlzLmZyYWcpO1xuICB9XG5cbiAgbW91bnQoZWw/OiBzdHJpbmcpIHtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICAgIGVsZW1lbnQgJiYgZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmZyYWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQodGhpcy5mcmFnKTtcbiAgICB9XG4gIH1cblxuICBub2RlVG9GcmFnbWVudChub2RlOiBOb2RlKSB7XG4gICAgY29uc3QgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBsZXQgY2hpbGQ6IENoaWxkTm9kZSB8IG51bGw7XG5cbiAgICB3aGlsZSAoKGNoaWxkID0gbm9kZS5maXJzdENoaWxkKSkge1xuICAgICAgZnJhZy5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiBmcmFnO1xuICB9XG5cbiAgY29tcGlsZShub2RlOiBEb2N1bWVudEZyYWdtZW50IHwgSFRNTEVsZW1lbnQgfCBOb2RlLCB2bTogVk0pIHtcbiAgICBjb25zdCBjaGlsZE5vZGVzID0gbm9kZS5jaGlsZE5vZGVzO1xuXG4gICAgQXJyYXkuZnJvbShjaGlsZE5vZGVzKS5mb3JFYWNoKChub2RlOiBOb2RlKSA9PiB7XG4gICAgICB0aGlzLmNvbXBpbGVOb2RlKG5vZGUsIHZtKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbXBpbGVOb2RlKG5vZGU6IE5vZGUsIHZtOiBWTSkge1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAvL+WFg+e0oOiKgueCuVxuICAgICAgdGhpcy5jb21waWxlRWxlbWVudChub2RlIGFzIEhUTUxFbGVtZW50LCB2bSk7XG4gICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICB0aGlzLmNvbXBpbGVUZXh0KG5vZGUgYXMgVGV4dCwgdm0pO1xuICAgIH1cblxuICAgIGlmIChub2RlLmNoaWxkTm9kZXMgJiYgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCAmJiB0aGlzLm5lZWREZWVwQ29tcGlsZSkge1xuICAgICAgdGhpcy5jb21waWxlKG5vZGUgYXMgSFRNTEVsZW1lbnQsIHZtKTtcbiAgICB9XG4gICAgdGhpcy5uZWVkRGVlcENvbXBpbGUgPSB0cnVlO1xuICB9XG5cbiAgY29tcGlsZVRleHQobm9kZTogVGV4dCwgdm06IFZNKSB7XG4gICAgY29uc3QgdGV4dCA9IG5vZGUudGV4dENvbnRlbnQ7XG4gICAgaWYgKCF0ZXh0KSByZXR1cm47XG4gICAgY29uc3QgcmVnID0gL1xce1xceyguKilcXH1cXH0vO1xuICAgIGNvbnN0IHJlcyA9IHJlZy5leGVjKHRleHQpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIGRpcmVjdGl2ZXNbXCJ0ZXh0XCJdKG5vZGUsIHZtLCBcInRleHRcIiwgcmVzWzFdLCByZXNbMF0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBpbGVFbGVtZW50KG5vZGU6IEhUTUxFbGVtZW50LCB2bTogVk0pIHtcbiAgICBjb25zdCBhdHRyID0gQXJyYXkuZnJvbShub2RlLmF0dHJpYnV0ZXMpO1xuXG4gICAgY29uc3QgaXNaRm9yID0gYXR0ci5maW5kSW5kZXgoKGF0dHI6IEF0dHIpID0+IHtcbiAgICAgIHJldHVybiBESVJfRk9SX1JFRy50ZXN0KGF0dHIubm9kZU5hbWUpO1xuICAgIH0pO1xuICAgIC8vIOWmguaenOaYr3YtZm9y77yM5YiZ5LiN6ZyA6KaB57un57ut5rex5bqm6YGN5Y6G77yM5Y+q6ZyA6KaB57yW6K+Rei1mb3LvvIzlhbbku5bnmoTmjIfku6TlnKh6LWZvcuWGhemDqOi/m+ihjOe8luivkVxuICAgIGlmICghIX5pc1pGb3IpIHtcbiAgICAgIHRoaXMubmVlZERlZXBDb21waWxlID0gZmFsc2U7XG4gICAgICB0aGlzLmNvbXBpbGVEaXJlY3RpdmUobm9kZSwgdm0sIGF0dHJbaXNaRm9yXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgQXJyYXkuZnJvbShub2RlLmF0dHJpYnV0ZXMpLmZvckVhY2goKGF0dHI6IEF0dHIpID0+IHtcbiAgICAgIHRoaXMuY29tcGlsZURpcmVjdGl2ZShub2RlLCB2bSwgYXR0cik7XG4gICAgfSk7XG4gIH1cblxuICBjb21waWxlRGlyZWN0aXZlKG5vZGU6IEhUTUxFbGVtZW50LCB2bTogVk0sIGF0dHI6IEF0dHIpIHtcbiAgICBjb25zdCBkaXJlY3RpdmUgPSBhdHRyLm5vZGVOYW1lO1xuICAgIGNvbnN0IGV4cHJlc3Npb24gPSBhdHRyLm5vZGVWYWx1ZTtcbiAgICBpZiAoRElSX1JFRy50ZXN0KGRpcmVjdGl2ZSkpIHtcbiAgICAgIC8vIOS+i+WmgiB2LW9uOmNsaWNr77yM5oiq5Y+Wdi1vblxuICAgICAgY29uc3QgZGlyID0gZGlyZWN0aXZlLnN1YnN0cmluZygyKS5zcGxpdChcIjpcIilbMF07XG5cbiAgICAgIC8vIOWvu+aJvuivpeaMh+S7pFxuICAgICAgZGlyZWN0aXZlc1tkaXJdICYmIGRpcmVjdGl2ZXNbZGlyXShub2RlLCB2bSwgZGlyZWN0aXZlLCBleHByZXNzaW9uKTtcblxuICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoZGlyZWN0aXZlKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBpbGUgfSBmcm9tIFwiLi4vY29tcGlsZS9jb21waWxlXCI7XG5pbXBvcnQgeyByZWFjdGl2ZSB9IGZyb20gXCIuLi9yZWFjdGl2aXR5L3JlYWN0aXZlXCI7XG5pbXBvcnQgeyBBcHAsIFZNIH0gZnJvbSBcIi4vdHlwZVwiO1xuXG4vLyDliJ3lp4vljJZ2bVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZNKG9wdGlvbnMsIHBhcmVudFZNID0ge30sIG5lZWRQcm94eSA9IHRydWUpOiBWTSB7XG4gIGNvbnN0IHZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWTSk7XG4gIHZtLiRlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob3B0aW9ucy50ZW1wbGF0ZSk7XG4gIHZtLiRkYXRhID1cbiAgICB0eXBlb2Ygb3B0aW9ucy5kYXRhID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gbmVlZFByb3h5XG4gICAgICAgID8gcmVhY3RpdmUob3B0aW9ucy5kYXRhKCkpXG4gICAgICAgIDogb3B0aW9ucy5kYXRhKClcbiAgICAgIDogbmVlZFByb3h5XG4gICAgICA/IHJlYWN0aXZlKG9wdGlvbnMuZGF0YSlcbiAgICAgIDogb3B0aW9ucy5kYXRhO1xuXG4gIHZtLiRvcHRpb25zID0gb3B0aW9ucztcbiAgT2JqZWN0LmtleXModm0uJGRhdGEpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIHByb3h5RGF0YSh2bSwga2V5KTtcbiAgfSk7XG4gIC8v5bCGbWV0aG9k5oyC6L295Yiwdm3kuIpcbiAgaWYgKG9wdGlvbnMubWV0aG9kcykge1xuICAgIE9iamVjdC5rZXlzKG9wdGlvbnMubWV0aG9kcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBwcm94eU1ldGhvZCh2bSwga2V5KTtcbiAgICB9KTtcbiAgfVxuICBpbml0Q29tcHV0ZWQodm0sIG9wdGlvbnMuY29tcHV0ZWQpO1xuICByZXR1cm4gdm07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBcHAodGhpcywgb3B0aW9ucyk6IEFwcCB7XG4gIGNvbnN0IHZtID0gY3JlYXRlVk0ob3B0aW9ucywgdGhpcyk7XG5cbiAgY29uc3QgY29tcGlsZSA9IG5ldyBDb21waWxlKHZtLiRlbCEsIHZtKTtcbiAgcmV0dXJuIHsgdm0sIG1vdW50OiBjb21waWxlLm1vdW50LmJpbmQoY29tcGlsZSkgfTtcbn1cblxuZnVuY3Rpb24gcHJveHlEYXRhKG9iaiwga2V5KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6ICgpID0+IHtcbiAgICAgIHJldHVybiBvYmouJGRhdGFba2V5XTtcbiAgICB9LFxuICAgIHNldDogKG5ld1ZhbCkgPT4ge1xuICAgICAgb2JqLiRkYXRhW2tleV0gPSBuZXdWYWw7XG4gICAgfSxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHByb3h5TWV0aG9kKG9iaiwga2V5KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6ICgpID0+IHtcbiAgICAgIHJldHVybiBvYmouJG9wdGlvbnMubWV0aG9kc1trZXldO1xuICAgIH0sXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQoY29udGV4dCwgY29tcHV0ZWQpIHtcbiAgaWYgKHR5cGVvZiBjb21wdXRlZCA9PT0gXCJvYmplY3RcIikge1xuICAgIE9iamVjdC5rZXlzKGNvbXB1dGVkKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb250ZXh0LCBrZXksIHtcbiAgICAgICAgLy8g5aaC5p6c5piv5Ye95pWw77yM55u05o6l5bCx5L2c5Li6Z2V077yM5ZCm5YiZ5Y+v6IO95piv5LiA5Liq5a+56LGh77yM5L2/55So5a+56LGh55qEZ2V0XG4gICAgICAgIGdldDogY29tcHV0ZWRba2V5XSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iLCJleHBvcnQgeyByZWFjdGl2ZSwgc2hhbGxvd1JlYWN0aXZlIH0gZnJvbSBcIi4vcmVhY3Rpdml0eS9yZWFjdGl2ZVwiO1xuZXhwb3J0IHsgZWZmZWN0IH0gZnJvbSBcIi4vcmVhY3Rpdml0eS9lZmZlY3RcIjtcbmV4cG9ydCB7IGNvbXB1dGVkIH0gZnJvbSBcIi4vcmVhY3Rpdml0eS9jb21wdXRlZFwiO1xuZXhwb3J0IHsgd2F0Y2ggfSBmcm9tIFwiLi9yZWFjdGl2aXR5L3dhdGNoXCI7XG5leHBvcnQgeyBjcmVhdGVBcHAgfSBmcm9tIFwiLi96dm0venZtXCI7XG5jb25zb2xlLmxvZyhcInp2bSAwLjAuMVwiKTtcbiJdLCJuYW1lcyI6WyJUcmlnZ2VyVHlwZSIsImFjdGl2ZUVmZmVjdEZuIiwiYnVja2V0IiwiV2Vha01hcCIsIklURVJBVEVfS0VZIiwiU3ltYm9sIiwiZWZmZWN0Rm5TdGFjayIsImVmZmVjdCIsImZuIiwib3B0aW9ucyIsImVmZmVjdEZuIiwiZGVwcyIsImkiLCJsZW5ndGgiLCJkZWxldGUiLCJjbGVhblVwIiwicHVzaCIsInJlcyIsInBvcCIsImxhenkiLCJ0cmFjayIsInRhcmdldCIsImtleSIsInNob3VkVHJhY2siLCJkZXBzTWFwIiwiZ2V0Iiwic2V0IiwiTWFwIiwiU2V0IiwiYWRkIiwidHJpZ2dlciIsInR5cGUiLCJuZXdWYWx1ZSIsIm9sZFZhbHVlIiwiZWZmZWN0c1RvUnVuIiwiaXRlcmF0ZUVmZmVjdHMiLCJmb3JFYWNoIiwiQUREIiwiREVMRVRFIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoRWZmZWN0cyIsInNjaGVkdWxlciIsIlJBV19LRVkiLCJyZWFjdGl2ZU1hcCIsImNyZWF0ZVJlYWN0aXZlIiwib2JqIiwiaXNTaGFsbG93IiwiUHJveHkiLCJyZWNlaXZlciIsIlJlZmxlY3QiLCJyZWFjdGl2ZSIsIm5ld1ZhbCIsIm9sZFZhbCIsIk51bWJlciIsIlNFVCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImhhcyIsIm93bktleXMiLCJkZWxldGVQcm9wZXJ0eSIsImhhc0tleSIsImV4aXN0UHJveHkiLCJwcm94eSIsInNoYWxsb3dSZWFjdGl2ZSIsImNvbXB1dGVkIiwiZ2V0dGVyIiwidmFsdWUiLCJkaXJ0eSIsIndhdGNoIiwiaW1tZWRpYXRlIiwib25JbnZhbGlkYXRlIiwiam9iIiwidHJhdmVyc2UiLCJmbHVzaCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInNlZW4iLCJrIiwicmVuZGVyIiwidGV4dFJlbmRlciIsIm5vZGUiLCJ0ZXh0IiwicmVwbGFjZSIsImhhc093biIsImRlZmluZVByb3BlcnR5IiwidGV4dENvbnRlbnQiLCJvcmlnaW5UZXh0IiwiX3RleHRDb250ZW50IiwiY2xhc3NSZW5kZXIiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhdHRyUmVuZGVyIiwiYXR0ciIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImZvclJlbmRlciIsIl9jbG9uZU5vZGUiLCJjbG9uZU5vZGUiLCJfcGFyZW50Tm9kZSIsInBhcmVudE5vZGUiLCJfcHJldmlvdXNOb2RlIiwicHJldmlvdXNTaWJsaW5nIiwiZm9yTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluZGV4IiwiaXRlbXMiLCJ2bSIsImxhc3ROb2RlIiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJpbnNlcnRCZWZvcmUiLCJuZXh0U2libGluZyIsImFwcGVuZENoaWxkIiwiY2hpbGRWbSIsImNyZWF0ZVZNIiwiZGF0YSIsInNldFByb3RvdHlwZU9mIiwiQ29tcGlsZSIsImNvbXBpbGVSb290IiwibW91bnQiLCJydW5JblNjb3BlIiwic2NvcGUiLCJzY29wZU5hbWUiLCJleHAiLCJmdW5jIiwiRnVuY3Rpb24iLCJib29sUmVnZXgiLCJhIiwiYiIsImMiLCJ0ZXN0IiwiX3dpdGgiLCJkaXJlY3RpdmVzIiwib24iLCJkaXJlY3RpdmUiLCJleHByZXNzaW9uIiwibWF0Y2hNZXRob2QiLCJtYXRjaCIsIm1ldGhvZCIsIm1ldGhvZEFyZ3MiLCJzaW5nbGVSZWciLCIkZXZlbnRSZWciLCIkZXZlbnRJZHgiLCJzcGxpdCIsImFyZyIsInBhdGgiLCJwYXRocyIsImxlbiIsImdldFZhbHVlQnlQYXRoIiwiJGRhdGEiLCJldmVudFR5cGUiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInNwbGljZSIsIm1vZGVsIiwic2V0VmFsdWVCeVBhdGgiLCJyZW5kZXJGbiIsImlmIiwibmV4dCIsIm5leHRFbGVtZW50U2libGluZyIsImVsc2VOb2RlIiwidW5kZWZpbmVkIiwiZ2V0QXR0cmlidXRlIiwibmV3dmFsdWUiLCJzdHlsZSIsImRpc3BsYXkiLCJiaW5kIiwiZGlyU3BsaXQiLCJkaXIiLCJmb3IiLCJmb3JNYXRjaCIsImxpc3QiLCJyZW5kZXJGb3IiLCJESVJfUkVHIiwiRElSX0ZPUl9SRUciLCJuZWVkRGVlcENvbXBpbGUiLCJmcmFnIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwibm9kZVRvRnJhZ21lbnQiLCJjb21waWxlTm9kZSIsImNvbXBpbGUiLCJlbCIsImVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hpbGQiLCJmaXJzdENoaWxkIiwiY2hpbGROb2RlcyIsImZyb20iLCJub2RlVHlwZSIsImNvbXBpbGVFbGVtZW50IiwiY29tcGlsZVRleHQiLCJleGVjIiwiYXR0cmlidXRlcyIsImlzWkZvciIsImZpbmRJbmRleCIsIm5vZGVOYW1lIiwiY29tcGlsZURpcmVjdGl2ZSIsIm5vZGVWYWx1ZSIsInN1YnN0cmluZyIsInBhcmVudFZNIiwibmVlZFByb3h5IiwiY3JlYXRlIiwiJGVsIiwidGVtcGxhdGUiLCIkb3B0aW9ucyIsImtleXMiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwicHJveHlEYXRhIiwibWV0aG9kcyIsInByb3h5TWV0aG9kIiwiY29udGV4dCIsImluaXRDb21wdXRlZCIsImNyZWF0ZUFwcCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQVdBLElBQVlBLEVDUlosSUFBSUMsR0RRSixTQUFZRCxHQUNWQSxFQUFBQSxFQUFBLElBQUEsR0FBQSxNQUNBQSxFQUFBQSxFQUFBLElBQUEsR0FBQSxNQUNBQSxFQUFBQSxFQUFBLE9BQUEsR0FBQSxTQUhGLENBQVlBLElBQUFBLEVBSVgsS0NIRCxNQUFNRSxFQUFnRCxJQUFJQyxRQUc3Q0MsRUFBY0MsT0FBTyxXQUc1QkMsRUFBaUMsWUFRdkJDLEVBQU9DLEVBQWdCQyxFQUF5QixJQUM5RCxNQUFNQyxFQUFXLE1BMEJuQixTQUFpQkEsR0FDZixJQUFLQSxFQUFTQyxLQUFNLE9B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\n\n\n//# sourceURL=webpack://example/../zvm/dist/es/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/bind.js");
/******/ 	
/******/ })()
;