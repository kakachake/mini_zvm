/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/model.js":
/*!**********************!*\
  !*** ./src/model.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var zvm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zvm */ \"../zvm/dist/es/main.js\");\n\n\nconst app = (0,zvm__WEBPACK_IMPORTED_MODULE_0__.createApp)({\n  template: \"#app\",\n  data() {\n    return {\n      data: \"\",\n    };\n  },\n});\n\napp.mount(\"#app\");\n\n\n//# sourceURL=webpack://example/./src/model.js?");

/***/ }),

/***/ "../zvm/dist/es/main.js":
/*!******************************!*\
  !*** ../zvm/dist/es/main.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"computed\": () => (/* binding */ h),\n/* harmony export */   \"createApp\": () => (/* binding */ S),\n/* harmony export */   \"effect\": () => (/* binding */ r),\n/* harmony export */   \"reactive\": () => (/* binding */ p),\n/* harmony export */   \"shallowReactive\": () => (/* binding */ f),\n/* harmony export */   \"watch\": () => (/* binding */ m)\n/* harmony export */ });\nvar e;let t;!function(e){e[e.SET=0]=\"SET\",e[e.ADD=1]=\"ADD\",e[e.DELETE=2]=\"DELETE\"}(e||(e={}));const n=new WeakMap,o=Symbol(\"iterate\"),s=[];function r(e,n={}){const o=()=>{!function(e){if(!e.deps)return;for(let t=0;t<e.deps.length;t++){e.deps[t].delete(e)}e.deps.length=0}(o),t=o,s.push(o);const n=e();return s.pop(),t=s[s.length-1],n};return o.options=n,o.deps=[],n.lazy||o(),o}function i(e,o){if(!t||!a)return;const s=n.get(e)||n.set(e,new Map).get(e),r=s.get(o)||s.set(o,new Set).get(o);r.add(t),t.deps?t.deps.push(r):(t.deps=[]).push(r)}function c(s,r,{type:i,newValue:c,oldValue:l}){const a=n.get(s);if(!a)return;const u=new Set,d=a.get(r),p=a.get(o);if(d&&d.forEach((e=>{u.add(e)})),i!==e.ADD&&i!==e.DELETE||p&&p.forEach((e=>{e!=t&&u.add(e)})),i===e.ADD&&Array.isArray(s)){const e=a.get(\"length\");e&&e.forEach((e=>{e!=t&&u.add(e)}))}u.forEach((e=>{t!==e&&(e.options&&e.options.scheduler?e.options.scheduler(e):e())}))}const l=Symbol(\"raw_key\"),a=!0,u=new Map;function d(t,{isShallow:n=!1}){return new Proxy(t,{get(e,t,o){if(t===l)return e;\"symbol\"!=typeof t&&i(e,t);const s=Reflect.get(e,t,o);return n?s:\"object\"==typeof s&&null!==s?p(s):s},set(t,n,o,s){const r=t[n],i=Array.isArray(t)?Number(n)<t.length?e.SET:e.ADD:Object.prototype.hasOwnProperty.call(t,n)?e.SET:e.ADD,l=Reflect.set(t,n,o,s);return r!==o&&c(t,n,{type:i,oldValue:r,newValue:o}),l},has:(e,t)=>(i(e,t),Reflect.has(e,t)),ownKeys:e=>(i(e,Array.isArray(e)?\"length\":o),Reflect.ownKeys(e)),deleteProperty(t,n){const o=Object.prototype.hasOwnProperty.call(t,n),s=Reflect.deleteProperty(t,n);return o&&s&&(Array.isArray(t)?c(t,n,{type:e.SET}):c(t,n,{type:e.DELETE})),s}})}function p(e){const t=u.get(e);if(t)return t;const n=d(e,{});return u.set(e,n),n}function f(e){return d(e,{isShallow:!0})}function h(t){let n,o=!0;const s=r(t,{lazy:!0,scheduler(){o||(o=!0,c(l,\"value\",{type:e.SET}))}}),l={get value(){return o&&(n=s(),o=!1),i(l,\"value\"),n}};return l}function m(e,t,n={immediate:!1}){let o,s,i;function c(e){i=e}function l(){i&&i(),i=null,s=a(),t(s,o,c),o=s}const a=r((()=>\"function\"==typeof e?e():\"object\"==typeof e?b(e):void 0),{lazy:!0,scheduler:()=>{\"post\"===n.flush?Promise.resolve().then(l):l()}});n.immediate?l():a()}function b(e,t=new Set){if(\"object\"!=typeof e||null===e||t.has(e))return e;t.add(e);for(const n in e)b(e[n],t);return e}const y={textRender:(e,t,n)=>{Object.hasOwn(e,\"_textContent\")||Object.defineProperty(e,\"_textContent\",{value:e.textContent});const o=e._textContent;e.textContent=n?o.replace(n,t)||\"\":void 0===t?\"\":t},classRender:(e,t,n)=>{for(const n in t)t[n]?e.classList.add(n):e.classList.remove(n)},attrRender:e=>(t,n,o)=>{!0===n?t.setAttribute(e,\"\"):!1===n?t.removeAttribute(e):t.setAttribute(e,n)},forRender:e=>{const t=e.cloneNode(!0),n=e.parentNode,o=e.previousSibling,s=[];return n?.removeChild(e),(e,r,i,c)=>{console.log(i),s.forEach((e=>{n?.removeChild(e)})),s.length=0;let l=o;for(let o=0;o<i.length;o++){if(!i[o])continue;const d=t.cloneNode(!0);d.removeAttribute(\"z-for\"),l?(a=d,(u=l)?.parentNode?.insertBefore(a,u.nextSibling)):n?.appendChild(d),l=d,s.push(d);const p=x({data:{[e]:i[o],[r]:o}},c);Object.setPrototypeOf(p,c),new A(d,p,{compileRoot:!0}).mount(),l=d}var a,u}}};function g(e,t,n){const o=new Function(t,\"return \"+function(e,t){t=t.replace(/\\s/g,\"\");const n=/(true|false|null|undefined)/g;return(t=\" \"+t).replace(/([:\\s\\+\\-\\*\\/%&\\|\\^!\\*~]\\s*?)(([a-zA-Z_$][a-zA-Z_$0-9]*))/g,((t,o,s)=>n.test(s)?o+s:o+e+\".\"+s))}(t,n));return o(e)}var E={on:function(e,t,n,o){const s=(o=o.replace(/\\s/g,\"\")).match(/^(\\w+)([(]((,?[$'\\w']+)+)[)])?/);if(!s)return;const r=s[1],i=[],c=/^'(.*)'$/,l=/(\\$event)$/;let a=-1;if(s&&s[3]){s[3].split(\",\").forEach((e=>{c.test(e)?i.push(e.replace(c,\"$1\")):l.test(e)?(i.push(e),a=i.length-1):i.push(function(e,t){const n=t.split(\".\"),o=n.length;let s=0;for(;s<o;)e=e[n[s++]];return e}(t.$data,e))}))}const u=n.split(\":\")[1],d=t&&t[r];u&&d&&e.addEventListener(u,(e=>(~a&&i.splice(a,1,e),i.length||i.push(e),d.call(t,...i))))},model:function(e,t,n,o){const s=t.$data[o];e.value=s,e.addEventListener(\"input\",(e=>{!function(e,t,n){const o=t.split(\".\"),s=o.length;let r=0;for(;r<s-1;)e=e[o[r++]];e[o[r]]=n}(t.$data,o,e.target.value)}))},text:function(e,t,n,o,s=\"\"){const r=y.textRender;r&&m((()=>g(t,\"scope\",o)),(t=>{r&&r(e,t,s)}),{immediate:!0})},if:function(e,t,n,o){const s=e.nextElementSibling;let r=null;s&&void 0!==s.getAttribute(\"z-else\")&&(r=s),m((()=>!!g(t,\"scope\",o)),(t=>{t?(e.style.display=\"block\",r&&(r.style.display=\"none\")):(e.style.display=\"none\",r&&(r.style.display=\"block\"))}),{immediate:!0})},bind:function(e,t,n,o){const s=n.split(\":\"),i=s.length>1?s[1]:n;let c=y[i+\"Render\"];c||(c=y.attrRender(i)),c&&r((()=>{c(e,g(t,\"scope\",o))}))},for:function(e,t,n,o){const s=(o=o.replace(/\\s/g,\"\")).match(/[(](\\w+)(,(\\w+))[)]in(\\w+)/);if(s&&s[4]){const[,n,,o,i]=s;console.log(i);const c=y.forRender(e);r((()=>{c(n,o,g(t,\"scope\",i),t)}))}}};const v=/^z-/,w=/^z-for/;class A{node;vm;needDeepCompile=!0;frag;options;constructor(e,t,n={compileRoot:!1}){this.node=e,this.vm=t,this.options=n,this.frag=this.nodeToFragment(this.node),n.compileRoot&&this.compileNode(this.node,this.vm),this.compile(this.frag,this.vm)}mount(e){if(e){const t=document.querySelector(e);t&&t.appendChild(this.frag)}else this.node.appendChild(this.frag)}nodeToFragment(e){const t=document.createDocumentFragment();let n;for(;n=e.firstChild;)t.appendChild(n);return t}compile(e,t){const n=e.childNodes;Array.from(n).forEach((e=>{this.compileNode(e,t)}))}compileNode(e,t){1===e.nodeType?this.compileElement(e,t):3===e.nodeType&&this.compileText(e,t),e.childNodes&&e.childNodes.length&&this.needDeepCompile&&this.compile(e,t),this.needDeepCompile=!0}compileText(e,t){const n=e.textContent;if(!n)return;const o=/\\{\\{(.*)\\}\\}/.exec(n);null!==o&&E.text(e,t,\"text\",o[1],o[0])}compileElement(e,t){const n=Array.from(e.attributes),o=n.findIndex((e=>w.test(e.nodeName)));if(~o)return this.needDeepCompile=!1,void this.compileDirective(e,t,n[o]);Array.from(e.attributes).forEach((n=>{this.compileDirective(e,t,n)}))}compileDirective(e,t,n){const o=n.nodeName,s=n.nodeValue;if(v.test(o)){const n=o.substring(2).split(\":\")[0];E[n]&&E[n](e,t,o,s),e.removeAttribute(o)}}}class D{subscribers;constructor(){this.subscribers={}}subscribe(e,t){this.subscribers[e]||(this.subscribers[e]=new Set),this.subscribers[e].add(t)}publish(e,t=\"\"){this.subscribers[e]&&this.subscribers[e].forEach((e=>{e(t)}))}}function x(e,t={},n=!0){const o=Object.create(t);return o.$el=document.querySelector(e.template),o.$data=\"function\"==typeof e.data?n?p(e.data()):e.data():n?p(e.data):e.data,o.$options=e,o.pubsub=new D,function(e,t){t.created&&e.pubsub?.subscribe(\"created\",t.created.bind(e))}(o,e),Object.keys(o.$data).forEach((e=>{!function(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$data[t],set:n=>{e.$data[t]=n}})}(o,e)})),e.methods&&Object.keys(e.methods).forEach((e=>{!function(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$options?.methods?.[t]})}(o,e)})),function(e,t){\"object\"==typeof t&&Object.keys(t).forEach((n=>{Object.defineProperty(e,n,{get:t[n]})}))}(o,e.computed),o}function S(e){const t=x(e,this);t.pubsub?.publish(\"created\");const n=new A(t.$el,t);return{vm:t,mount:n.mount.bind(n)}}console.log(\"zvm 0.0.1\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//# sourceURL=webpack://example/../zvm/dist/es/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/model.js");
/******/ 	
/******/ })()
;