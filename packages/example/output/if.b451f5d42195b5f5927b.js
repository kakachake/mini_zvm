/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/if.js":
/*!*******************!*\
  !*** ./src/if.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var zvm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zvm */ \"../zvm/dist/es/main.js\");\n\n\nconst app = (0,zvm__WEBPACK_IMPORTED_MODULE_0__.createApp)({\n  template: \"#app\",\n  data() {\n    return {\n      isShow: true,\n    };\n  },\n  methods: {\n    handleBtnClick() {\n      this.isShow = !this.isShow;\n    },\n  },\n});\n\napp.mount(\"#app\");\n\n\n//# sourceURL=webpack://example/./src/if.js?");

/***/ }),

/***/ "../zvm/dist/es/main.js":
/*!******************************!*\
  !*** ../zvm/dist/es/main.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"computed\": () => (/* binding */ h),\n/* harmony export */   \"createApp\": () => (/* binding */ A),\n/* harmony export */   \"effect\": () => (/* binding */ s),\n/* harmony export */   \"reactive\": () => (/* binding */ p),\n/* harmony export */   \"shallowReactive\": () => (/* binding */ f),\n/* harmony export */   \"watch\": () => (/* binding */ m)\n/* harmony export */ });\nvar e;let t;!function(e){e[e.SET=0]=\"SET\",e[e.ADD=1]=\"ADD\",e[e.DELETE=2]=\"DELETE\"}(e||(e={}));const n=new WeakMap,o=Symbol(\"iterate\"),r=[];function s(e,n={}){const o=()=>{!function(e){if(!e.deps)return;for(let t=0;t<e.deps.length;t++){e.deps[t].delete(e)}e.deps.length=0}(o),t=o,r.push(o);const n=e();return r.pop(),t=r[r.length-1],n};return o.options=n,o.deps=[],n.lazy||o(),o}function c(e,o){if(!t||!a)return;const r=n.get(e)||n.set(e,new Map).get(e),s=r.get(o)||r.set(o,new Set).get(o);s.add(t),t.deps?t.deps.push(s):(t.deps=[]).push(s)}function i(r,s,{type:c,newValue:i,oldValue:l}){const a=n.get(r);if(!a)return;const d=new Set,u=a.get(s),p=a.get(o);if(u&&u.forEach((e=>{d.add(e)})),c!==e.ADD&&c!==e.DELETE||p&&p.forEach((e=>{e!=t&&d.add(e)})),c===e.ADD&&Array.isArray(r)){const e=a.get(\"length\");e&&e.forEach((e=>{e!=t&&d.add(e)}))}d.forEach((e=>{t!==e&&(e.options&&e.options.scheduler?e.options.scheduler(e):e())}))}const l=Symbol(\"raw_key\"),a=!0,d=new Map;function u(t,{isShallow:n=!1}){return new Proxy(t,{get(e,t,o){if(t===l)return e;\"symbol\"!=typeof t&&c(e,t);const r=Reflect.get(e,t,o);return n?r:\"object\"==typeof r&&null!==r?p(r):r},set(t,n,o,r){const s=t[n],c=Array.isArray(t)?Number(n)<t.length?e.SET:e.ADD:Object.prototype.hasOwnProperty.call(t,n)?e.SET:e.ADD,l=Reflect.set(t,n,o,r);return s!==o&&i(t,n,{type:c,oldValue:s,newValue:o}),l},has:(e,t)=>(c(e,t),Reflect.has(e,t)),ownKeys:e=>(c(e,Array.isArray(e)?\"length\":o),Reflect.ownKeys(e)),deleteProperty(t,n){const o=Object.prototype.hasOwnProperty.call(t,n),r=Reflect.deleteProperty(t,n);return o&&r&&(Array.isArray(t)?i(t,n,{type:e.SET}):i(t,n,{type:e.DELETE})),r}})}function p(e){const t=d.get(e);if(t)return t;const n=u(e,{});return d.set(e,n),n}function f(e){return u(e,{isShallow:!0})}function h(t){let n,o=!0;const r=s(t,{lazy:!0,scheduler(){o||(o=!0,i(l,\"value\",{type:e.SET}))}}),l={get value(){return o&&(n=r(),o=!1),c(l,\"value\"),n}};return l}function m(e,t,n={immediate:!1}){let o,r,c;function i(e){c=e}function l(){c&&c(),c=null,r=a(),t(r,o,i),o=r}const a=s((()=>\"function\"==typeof e?e():\"object\"==typeof e?y(e):void 0),{lazy:!0,scheduler:()=>{\"post\"===n.flush?Promise.resolve().then(l):l()}});n.immediate?l():a()}function y(e,t=new Set){if(\"object\"!=typeof e||null===e||t.has(e))return e;t.add(e);for(const n in e)y(e[n],t);return e}const g={textRender:(e,t,n)=>{Object.hasOwn(e,\"_textContent\")||Object.defineProperty(e,\"_textContent\",{value:e.textContent});const o=e._textContent;e.textContent=n?o.replace(n,t)||\"\":void 0===t?\"\":t},classRender:(e,t,n)=>{for(const n in t)t[n]?e.classList.add(n):e.classList.remove(n)},attrRender:e=>(t,n,o)=>{!0===n?t.setAttribute(e,\"\"):!1===n?t.removeAttribute(e):t.setAttribute(e,n)},forRender:e=>{const t=e.cloneNode(!0),n=e.parentNode,o=e.previousSibling,r=[];return n?.removeChild(e),(e,s,c,i)=>{r.forEach((e=>{n?.removeChild(e)})),r.length=0;let l=o;for(let o=0;o<c.length;o++){if(!c[o])continue;const u=t.cloneNode(!0);u.removeAttribute(\"z-for\"),l?(a=u,(d=l)?.parentNode?.insertBefore(a,d.nextSibling)):n?.appendChild(u),l=u,r.push(u);const p=w({data:{[e]:c[o],[s]:o}},i);console.log(p),Object.setPrototypeOf(p,i),new v(u,p).mount(),l=u}var a,d}}};function b(e,t,n){const o=new Function(t,\"return \"+function(e,t){t=t.replace(/\\s/g,\"\");const n=/(true|false|null|undefined)/g;return(t=\" \"+t).replace(/([:\\s\\+\\-\\*\\/%&\\|\\^!\\*~]\\s*?)(([a-zA-Z_$][a-zA-Z_$0-9]*))/g,((t,o,r)=>n.test(r)?o+r:o+e+\".\"+r))}(t,n));return o(e)}var E={on:function(e,t,n,o){const r=o.match(/^(\\w+)([(](['\\w']+)[)])?/);if(!r)return;const s=r[1],c=[];console.log(r);const i=/^'(.*)'$/;if(r&&r[3]){r[3].split(\",\").forEach((e=>{i.test(e)?c.push(e.replace(i,\"$1\")):c.push(function(e,t){const n=t.split(\".\"),o=n.length;let r=0;for(;r<o;)e=e[n[r++]];return e}(t.$data,e))}))}const l=n.split(\":\")[1],a=t&&t[s];l&&a&&e.addEventListener(l,a.bind(t,...c))},model:function(e,t,n,o){const r=t.$data[o];e.value=r,e.addEventListener(\"input\",(e=>{!function(e,t,n){const o=t.split(\".\"),r=o.length;let s=0;for(;s<r-1;)e=e[o[s++]];e[o[s]]=n}(t.$data,o,e.target.value)}))},text:function(e,t,n,o,r=\"\"){const s=g.textRender;s&&m((()=>b(t,\"scope\",o)),(t=>{s&&s(e,t,r)}),{immediate:!0})},if:function(e,t,n,o){const r=e.nextElementSibling;let s=null;r&&void 0!==r.getAttribute(\"z-else\")&&(s=r),m((()=>!!b(t,\"scope\",o)),(t=>{t?(e.style.display=\"block\",s&&(s.style.display=\"none\")):(e.style.display=\"none\",s&&(s.style.display=\"block\"))}),{immediate:!0})},bind:function(e,t,n,o){const r=n.split(\":\"),c=r.length>1?r[1]:n;let i=g[c+\"Render\"];i||(i=g.attrRender(c)),i&&s((()=>{i(e,b(t,\"scope\",o))}))},for:function(e,t,n,o){const r=(o=o.replace(/\\s/g,\"\")).match(/[(](\\w+)(,(\\w+))[)]in(\\w+)/);if(r&&r[4]){const[,n,,o,c]=r,i=g.forRender(e);s((()=>{i(n,o,b(t,\"scope\",c),t)}))}}};class v{node;vm;needDeepCompile=!0;frag;constructor(e,t){this.node=e,this.vm=t,this.frag=this.nodeToFragment(this.node),this.compile(this.frag,this.vm)}mount(e){if(e){const t=document.querySelector(e);t&&t.appendChild(this.frag)}else this.node.appendChild(this.frag)}nodeToFragment(e){const t=document.createDocumentFragment();let n;for(;n=e.firstChild;)t.appendChild(n);return t}compile(e,t){const n=e.childNodes;Array.from(n).forEach((e=>{1===e.nodeType?this.compileElement(e,t):3===e.nodeType&&this.compileText(e,t),e.childNodes&&e.childNodes.length&&this.needDeepCompile&&this.compile(e,t),this.needDeepCompile=!0}))}compileText(e,t){const n=e.textContent;if(!n)return;const o=/\\{\\{(.*)\\}\\}/.exec(n);null!==o&&E.text(e,t,\"text\",o[1],o[0])}compileElement(e,t){Array.from(e.attributes).forEach((n=>{this.compileDirective(e,t,n)}))}compileDirective(e,t,n){const o=/^z-for/,r=n.nodeName,s=n.nodeValue;if(/^z-/.test(r)){const n=r.substring(2).split(\":\")[0];o.test(r)&&(this.needDeepCompile=!1),E[n]&&E[n](e,t,r,s),e.removeAttribute(r)}}}function w(e,t={},n=!0){const o=Object.create(t);return o.$el=document.querySelector(e.template),o.$data=\"function\"==typeof e.data?n?p(e.data()):e.data():n?p(e.data):e.data,o.$options=e,Object.keys(o.$data).forEach((e=>{!function(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$data[t],set:n=>{e.$data[t]=n}})}(o,e)})),e.methods&&Object.keys(e.methods).forEach((e=>{!function(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$options.methods[t]})}(o,e)})),function(e,t){\"object\"==typeof t&&Object.keys(t).forEach((n=>{Object.defineProperty(e,n,{get:t[n]})}))}(o,e.computed),o}function A(e){const t=w(e,this),n=new v(t.$el,t);return{vm:t,mount:n.mount.bind(n)}}console.log(\"zvm 0.0.1\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//# sourceURL=webpack://example/../zvm/dist/es/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/if.js");
/******/ 	
/******/ })()
;