/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/text.js":
/*!*********************!*\
  !*** ./src/text.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mini_zvm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mini-zvm */ \"../zvm/dist/es/main.js\");\n\n\nconst app = (0,mini_zvm__WEBPACK_IMPORTED_MODULE_0__.createApp)({\n  template: \"#app\",\n  data() {\n    return {\n      text: \"这是z-text文字,点击它试试\",\n      count: 0,\n      message: \"hello\",\n    };\n  },\n  methods: {\n    handleClick() {\n      this.text = \"他变了\";\n    },\n    handleBtnClick() {\n      this.count++;\n    },\n    countP(count) {\n      return this.count + count;\n    },\n  },\n});\n\napp.mount(\"#app\");\n\n\n//# sourceURL=webpack://example/./src/text.js?");

/***/ }),

/***/ "../zvm/dist/es/main.js":
/*!******************************!*\
  !*** ../zvm/dist/es/main.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"computed\": () => (/* binding */ g),\n/* harmony export */   \"createApp\": () => (/* binding */ R),\n/* harmony export */   \"createVM\": () => (/* binding */ O),\n/* harmony export */   \"effect\": () => (/* binding */ a),\n/* harmony export */   \"reactive\": () => (/* binding */ b),\n/* harmony export */   \"ref\": () => (/* binding */ L),\n/* harmony export */   \"shallowReactive\": () => (/* binding */ y),\n/* harmony export */   \"shoudTrack\": () => (/* binding */ h),\n/* harmony export */   \"toRef\": () => (/* binding */ P),\n/* harmony export */   \"toRefs\": () => (/* binding */ _),\n/* harmony export */   \"track\": () => (/* binding */ l),\n/* harmony export */   \"trigger\": () => (/* binding */ u),\n/* harmony export */   \"watch\": () => (/* binding */ v)\n/* harmony export */ });\nfunction e(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}const t=Symbol(\"raw_key\"),n=Symbol(\"iterate\"),o=Symbol(\"map_key_iterate\");var r;let s;!function(e){e[e.SET=0]=\"SET\",e[e.ADD=1]=\"ADD\",e[e.DELETE=2]=\"DELETE\"}(r||(r={}));const c=new WeakMap,i=[];function a(e,t={}){const n=()=>{!function(e){if(!e.deps)return;for(let t=0;t<e.deps.length;t++){e.deps[t].delete(e)}e.deps.length=0}(n),s=n,i.push(n);const t=e();return i.pop(),s=i[i.length-1],t};return n.options=t,n.deps=[],t.lazy||n(),n}function l(e,t){if(!s||!h)return;const n=c.get(e)||c.set(e,new Map).get(e),o=n.get(t)||n.set(t,new Set).get(t);o.add(s),s.deps?s.deps.push(o):(s.deps=[]).push(o)}function u(t,i,{type:a}){const l=c.get(t);if(!l)return;const u=new Set,d=l.get(i),p=l.get(n);if(d&&d.forEach((e=>{u.add(e)})),(a===r.ADD||a===r.DELETE||a===r.SET&&\"map\"===e(t))&&p&&p.forEach((e=>{e!=s&&u.add(e)})),(a===r.ADD||a===r.DELETE)&&\"map\"===e(t)){const e=l.get(o);e&&e.forEach((e=>{e!=s&&u.add(e)}))}if(a===r.ADD&&Array.isArray(t)){const e=l.get(\"length\");e&&e.forEach((e=>{e!=s&&u.add(e)}))}u.forEach((e=>{s!==e&&(e.options&&e.options.scheduler?e.options.scheduler(e):e())}))}const d={add(e){const n=this[t],o=n.has(e),s=e[t]||e,c=n.add(s);return o||u(n,e,{type:r.ADD}),c},delete(e){const n=this[t],o=n.has(e),s=n.delete(e);return o&&u(n,e,{type:r.DELETE}),s},get(e){const n=this[t],o=n.has(e);if(l(n,e),o){const t=n.get(e);return\"object\"==typeof t?b(t):t}},set(e,n){const o=this[t],s=o.has(e),c=o.get(e),i=n[t]||n,a=o.set(e,i);return s?(c!==n||c==c&&n==n)&&u(o,e,{type:r.SET}):u(o,e,{type:r.ADD}),a},forEach(e,o){const r=this[t];return l(r,n),r.forEach(((t,n,o)=>e(p(t),p(n),o)),o)},[Symbol.iterator](){const e=this[t];l(e,n);const o=e[Symbol.iterator]();return{next(){const{value:e,done:t}=o.next();return{value:e?[p(e[0]),p(e[1])]:e,done:t}},[Symbol.iterator](){return this}}},entries(){return this[Symbol.iterator]()},values:function(){const e=this[t],o=e.values();return l(e,n),{next(){const{value:e,done:t}=o.next();return{value:e?p(e):e,done:t}},[Symbol.iterator](){return this}}},keys:function(){const e=this[t],n=e.keys();return l(e,o),{next(){const{value:e,done:t}=n.next();return{value:e?p(e):e,done:t}},[Symbol.iterator](){return this}}}};const p=e=>\"object\"==typeof e?b(e):e,h=!0,f=new Map;function m(o,{isShallow:s=!1}){const c=e(o);return new Proxy(o,{get(e,o,r){if(\"__isProxy__\"===o)return!0;if(o===t)return e;if(\"set\"===c||\"map\"===c)return\"size\"===o?(l(e,n),Reflect.get(e,o,e)):d[o]?d[o]:e[o].bind(e);\"symbol\"!=typeof o&&l(e,o);const i=Reflect.get(e,o,r);return s?i:\"object\"==typeof i&&null!==i?b(i):i},set(e,t,n,o){const s=e[t],c=Array.isArray(e)?Number(t)<e.length?r.SET:r.ADD:Object.prototype.hasOwnProperty.call(e,t)?r.SET:r.ADD,i=Reflect.set(e,t,n,o);return s!==n&&u(e,t,{type:c}),i},has:(e,t)=>(l(e,t),Reflect.has(e,t)),ownKeys:e=>(l(e,Array.isArray(e)?\"length\":n),Reflect.ownKeys(e)),deleteProperty(e,t){const n=Object.prototype.hasOwnProperty.call(e,t),o=Reflect.deleteProperty(e,t);return n&&o&&(Array.isArray(e)?u(e,t,{type:r.SET}):u(e,t,{type:r.DELETE})),o}})}function b(e){const t=f.get(e);if(t)return t;const n=m(e,{});return f.set(e,n),n}function y(e){return m(e,{isShallow:!0})}function g(e){let t,n=!0;const o=a(e,{lazy:!0,scheduler(){n||(n=!0,u(s,\"value\",{type:r.SET}))}}),s={get value(){return n&&(t=o(),n=!1),l(s,\"value\"),t}};return s}function v(e,t,n={immediate:!1}){let o,r,s;function c(e){s=e}function i(){s&&s(),s=null,r=l(),t(r,o,c),o=r}const l=a((()=>\"function\"==typeof e?e():(console.log(e),E(e))),{lazy:!0,scheduler:()=>{\"post\"===n.flush?Promise.resolve().then(i):i()}});n.immediate?i():o=l()}function E(e,t=new Set){if(\"object\"!=typeof e||null===e||t.has(e))return e;t.add(e);for(const n in e)E(e[n],t);return e}const w={textRender:(e,t,n)=>{if(\"INPUT\"===e.nodeName){const n=e.getAttribute(\"type\");if(\"radio\"===n){console.log(\"radio\");const n=e.value;return void(e.checked=t===n)}return\"checkbox\"===n?void(e.checked=!!t):void(e.value=t)}Object.hasOwn(e,\"_textContent\")||Object.defineProperty(e,\"_textContent\",{value:e.textContent});const o=e._textContent;e.textContent=n?o.replace(n,t)||\"\":void 0===t?\"\":t},classRender:(e,t)=>{for(const n in t)t[n]?e.classList.add(n):e.classList.remove(n)},attrRender:e=>(t,n)=>{!0===n?t.setAttribute(e,\"\"):!1===n?t.removeAttribute(e):t.setAttribute(e,n)},forRender:e=>{const t=e.cloneNode(!0),n=e.parentNode,o=e.previousSibling,r=[];return n?.removeChild(e),(e,s,c,i)=>{r.forEach((e=>{n?.removeChild(e)})),r.length=0;let a=o;for(let o=0;o<c.length;o++){if(!c[o])continue;const d=t.cloneNode(!0);d.removeAttribute(\"z-for\"),a?(l=d,(u=a)?.parentNode?.insertBefore(l,u.nextSibling)):n?.appendChild(d),a=d,r.push(d);const p=O({template:d,data:s?{[e]:c[o],[s]:o}:{[e]:c[o]}},i);new j(d,p,{compileRoot:!0}).mount(),a=d}var l,u}}};function D(e,t,n){const o=t.split(\".\"),r=o.length;let s=0;for(;s<r-1;)e=e[o[s++]];e[o[s]]=n}function A(e,t,n){const o=new Function(t,\"return \"+function(e,t){t=t.replace(/\\s/g,\"\");const n=/(true|false|null|undefined)/g;return(t=\" \"+t).replace(/([\\(:,\\s\\+\\-\\*\\/%&\\|\\^!\\*~]\\s*?)(([a-zA-Z_$][a-zA-Z_$0-9]*))/g,((t,o,r)=>n.test(r)?o+r:o+e+\".\"+r))}(t,n));return o(e)}const x={};function S(e,t){x[e.toLowerCase()]=t}const T={on(e,t,n,o){const r=(o=o.replace(/\\s/g,\"\")).match(/^(\\w+)([(]((,?[$'\\w']+)+)[)])?/);if(!r)return;const s=r[1],c=[],i=/^'(.*)'$/,a=/(\\$event)$/;let l=-1;if(r&&r[3]){r[3].split(\",\").forEach((e=>{i.test(e)?c.push(e.replace(i,\"$1\")):a.test(e)?(c.push(e),l=c.length-1):c.push(function(e,t){const n=t.split(\".\"),o=n.length;let r=0;for(;r<o;)e=e[n[r++]];return e}(t.$data,e))}))}const u=n.split(\":\")[1],d=t&&t[s];u&&d&&e.addEventListener(u,(e=>(~l&&c.splice(l,1,e),c.length||c.push(e),d.call(t,...c))))},model(e,t,n,o){this.text(e,t,n,o),(\"INPUT\"===e.tagName&&\"text\"===e.type||\"TEXTAREA\"===e.tagName)&&e.addEventListener(\"input\",(e=>{D(t.$data,o,e.target.value),e.preventDefault()})),\"INPUT\"===e.tagName&&\"checkbox\"===e.type&&e.addEventListener(\"change\",(e=>{D(t.$data,o,e.target.checked)})),\"INPUT\"===e.tagName&&\"radio\"===e.type&&e.addEventListener(\"change\",(e=>{D(t.$data,o,e.target.value)}))},text(e,t,n,o,r=\"\"){const s=w.textRender;s&&v((()=>A(t,\"scope\",o)),(t=>{s&&s(e,t,r)}),{immediate:!0})},if(e,t,n,o){const r=e.nextElementSibling;let s=null;r&&void 0!==r.getAttribute(\"z-else\")&&(s=r);v((()=>!!A(t,\"scope\",o)),(t=>{t?(e.style.display=\"block\",s&&(s.style.display=\"none\")):(e.style.display=\"none\",s&&(s.style.display=\"block\"))}),{immediate:!0})},for(e,t,n,o){const r=(o=o.replace(/\\s/g,\"\")).match(/([(](\\w+(,\\w+)?)[)]|(\\w+))in(\\w+)/);if(r){const[,,n,,,o]=r;let s,c=r[1];n&&([c,s]=n.split(\",\"));const i=w.forRender(e);a((()=>{i(c,s,A(t,\"scope\",o),t)}))}},bind(e,t,n,o){const r=n.split(\":\"),s=r.length>1?r[1]:n;console.log(s);let c=w[s+\"Render\"];c||(c=w.attrRender(s)),c&&a((()=>{c(e,A(t,\"scope\",o))}))}},$=/^z-/,N=/^z-for/;class j{node;vm;needDeepCompile=!0;frag;options;constructor(e,t,n={compileRoot:!1}){this.node=e,this.vm=t,this.options=n,this.frag=this.nodeToFragment(this.node),n.compileRoot&&this.compileNode(this.node,this.vm),this.compileFrag(this.frag,this.vm)}mount(e){if(e){const t=document.querySelector(e);t&&t.appendChild(this.frag)}else this.node.appendChild(this.frag);this.vm.pubsub?.publish(\"mounted\")}getFragment(){return this.frag}nodeToFragment(e){const t=document.createDocumentFragment();let n;for(;n=e.firstChild;)t.appendChild(n);return t}compileFrag(e,t){const n=e.childNodes;Array.from(n).forEach((e=>{this.compileNode(e,t),e.childNodes&&e.childNodes.length&&this.needDeepCompile&&this.compileFrag(e,t),this.needDeepCompile=!0}))}compileNode(e,t){if(t.$components&&t.$components[e.nodeName.toLowerCase()]){console.log(\"组件\");const n=R(t.$components[e.nodeName.toLowerCase()]).vm.compile.getFragment();return e.parentNode?.replaceChild(n,e),void console.log(n)}1===e.nodeType?this.compileElement(e,t):3===e.nodeType&&this.compileText(e,t)}compileText(e,t){const n=e.textContent;if(!n)return;const o=/\\{\\{(.*)\\}\\}/.exec(n);null!==o&&T.text(e,t,\"text\",o[1],o[0])}compileElement(e,t){const n=Array.from(e.attributes),o=n.findIndex((e=>N.test(e.nodeName)));if(~o)return this.needDeepCompile=!1,void this.compileDirective(e,t,n[o]);Array.from(e.attributes).forEach((n=>{this.compileDirective(e,t,n)}))}compileDirective(e,t,n){const o=n.nodeName,r=n.nodeValue||\"\";$.test(o)&&(!function(e,t,n,o){const r=n.match(/^z-(\\w+)\\s*(:(\\w*))?$/);if(!r)return;const s=r[1],c=r[3];T[s]?T[s](e,t,n,o):x[s]&&t.pubsub?.subscribe(\"mounted\",(()=>{v((()=>A(t,\"scope\",o)),(t=>{x[s](e,{arg:c,value:t})}),{immediate:!0})}))}(e,t,o,r),e.removeAttribute(o))}}class C{subscribers;constructor(){this.subscribers={}}subscribe(e,t){this.subscribers[e]||(this.subscribers[e]=new Set),this.subscribers[e].add(t)}publish(e,t=\"\"){this.subscribers[e]&&this.subscribers[e].forEach((e=>{e(t)}))}}function O(e,t={},n=!0){const o=Object.create(t);if(!e.template&&!e.render)throw new Error(\"template or render not found\");var r,s;return e.template?o.$el=\"string\"==typeof e.template?document.querySelector(e.template):e.template:e.render&&(o.$el=e.render.call(o,k)),e.data&&(o.$data=\"function\"==typeof e.data?n?b(e.data()):e.data():n?b(e.data):e.data),e.components&&Object.keys(e.components).map((t=>{o.$components={...o.$components,[t.toLowerCase()]:e.components[t]}})),o.$options=e,o.pubsub=new C,function(e,t){t.created&&e.pubsub?.subscribe(\"created\",t.created.bind(e));t.mounted&&e.pubsub?.subscribe(\"mounted\",t.mounted.bind(e))}(o,e),Object.keys(o.$data).forEach((e=>{!function(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$data[t],set:n=>{e.$data[t]=n}})}(o,e)})),e.methods&&Object.keys(e.methods).forEach((e=>{!function(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$options?.methods?.[t]})}(o,e)})),e.computed&&(r=o,\"object\"==typeof(s=e.computed)&&Object.keys(s).forEach((e=>{const t=g(s[e].bind(r));Object.defineProperty(r,e,{get:()=>t.value})}))),e.directives&&function(e,t){\"object\"==typeof t&&Object.keys(t).forEach((e=>{S(e,t[e])}))}(0,e.directives),o}function R(e){const t=O(e);t.pubsub?.publish(\"created\"),console.log(t),t.compile=new j(t.$el,t);return{vm:t,mount:e=>{t.compile.mount(e)},directive:S}}function k(e){const t=document.createElement(\"div\");return t.innerHTML=e,t}function L(e){const t={value:e};return Object.defineProperty(t,\"__v_isRef\",{value:!0}),b(t)}function P(e,t){const n={get value(){return e[t]},set value(n){e[t]=n}};return Object.defineProperty(n,\"__v_isRef\",{value:!0}),n}function _(e){const t={};return Object.keys(e).forEach((n=>{e.hasOwnProperty(n)&&(t[n]=P(e,n))})),t}console.log(\"zvm 0.0.4\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2luZGV4LnRzIiwiLi4vLi4vc3JjL3JlYWN0aXZpdHkvY29uc3RhbnQudHMiLCIuLi8uLi9zcmMvcmVhY3Rpdml0eS90eXBlLnRzIiwiLi4vLi4vc3JjL3JlYWN0aXZpdHkvZWZmZWN0LnRzIiwiLi4vLi4vc3JjL3JlYWN0aXZpdHkvcmV3cml0ZS50cyIsIi4uLy4uL3NyYy9yZWFjdGl2aXR5L3JlYWN0aXZlLnRzIiwiLi4vLi4vc3JjL3JlYWN0aXZpdHkvY29tcHV0ZWQudHMiLCIuLi8uLi9zcmMvcmVhY3Rpdml0eS93YXRjaC50cyIsIi4uLy4uL3NyYy9jb21waWxlL3JlbmRlci50cyIsIi4uLy4uL3NyYy9jb21waWxlL2RvbS50cyIsIi4uLy4uL3NyYy9jb21waWxlL3V0aWwudHMiLCIuLi8uLi9zcmMvY29tcGlsZS9kaXJlY3RpdmVzLnRzIiwiLi4vLi4vc3JjL2NvbXBpbGUvY29tcGlsZS50cyIsIi4uLy4uL3NyYy9wdWJzdWIvcHVic3ViLnRzIiwiLi4vLi4vc3JjL3p2bS96dm0udHMiLCIuLi8uLi9zcmMvcmVhY3Rpdml0eS9yZWYudHMiLCIuLi8uLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyDojrflj5bnsbvlnotcclxuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cGUob2JqOiBhbnkpOiBzdHJpbmcge1xyXG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKTtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgUkFXX0tFWSA9IFN5bWJvbChcInJhd19rZXlcIik7XHJcblxyXG4vLyDov63ku6PlmahrZXlcclxuZXhwb3J0IGNvbnN0IElURVJBVEVfS0VZID0gU3ltYm9sKFwiaXRlcmF0ZVwiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBNQVBfS0VZX0lURVJBVEVfS0VZID0gU3ltYm9sKFwibWFwX2tleV9pdGVyYXRlXCIpO1xyXG4iLCJpbXBvcnQgeyBSQVdfS0VZIH0gZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZXhwb3J0IHR5cGUgRWZmZWN0Rm4gPSB7XG4gICgpOiB2b2lkO1xuICBkZXBzPzogQXJyYXk8U2V0PCgpID0+IHZvaWQ+PjtcbiAgb3B0aW9ucz86IHtcbiAgICBzY2hlZHVsZXI/OiAoZWZmZWN0Rm46IEVmZmVjdEZuKSA9PiB2b2lkO1xuICB9O1xufTtcbmV4cG9ydCBpbnRlcmZhY2UgRWZmZWN0T3B0aW9ucyB7XG4gIGxhenk/OiBib29sZWFuO1xuICBzY2hlZHVsZXI/OiAoZWZmZWN0OiBFZmZlY3RGbikgPT4gdm9pZDtcbn1cbmV4cG9ydCBlbnVtIFRyaWdnZXJUeXBlIHtcbiAgU0VULFxuICBBREQsXG4gIERFTEVURSxcbn1cblxuZXhwb3J0IHR5cGUgcHJveHlPYmpUeXBlPFQ+ID0ge1xuICBbUkFXX0tFWV06IFQ7XG59O1xuIiwiaW1wb3J0IHsgZ2V0VHlwZSB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHsgSVRFUkFURV9LRVksIE1BUF9LRVlfSVRFUkFURV9LRVkgfSBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IHsgc2hvdWRUcmFjayB9IGZyb20gXCIuL3JlYWN0aXZlXCI7XG5pbXBvcnQgeyBFZmZlY3RGbiwgRWZmZWN0T3B0aW9ucywgVHJpZ2dlclR5cGUgfSBmcm9tIFwiLi90eXBlXCI7XG4vLyDlvZPliY3mtLvliqjnmoRlZmZlY3Tlh73mlbBcbmxldCBhY3RpdmVFZmZlY3RGbjogRWZmZWN0Rm47XG5cbi8vIOWtmOWCqOWJr+S9nOeUqOWHveaVsOeahG1hcFxuY29uc3QgYnVja2V0OiBXZWFrTWFwPGFueSwgTWFwPGFueSwgU2V0PEVmZmVjdEZuPj4+ID0gbmV3IFdlYWtNYXAoKTtcblxuLy8gZWZmZWN05Ye95pWw5qCIXG5jb25zdCBlZmZlY3RGblN0YWNrOiBBcnJheTxFZmZlY3RGbj4gPSBbXTtcblxuLyoqXG4gKiDms6jlhozlia/kvZznlKjlh73mlbDvvIzlj6ropoFmbuS4reWtmOWcqOS7o+eQhuWvueixoS9jb21wdXRlZOWvueixoe+8jOWImeS8muaKiuW9k+WJjeeahOWJr+S9nOeUqOWHveaVsOa3u+WKoOWIsOWTjeW6lOW8j+WvueixoeeahGRlcHPkuK1cbiAqIEBwYXJhbSBmbiBnZXR0ZXLlh73mlbBcbiAqIEBwYXJhbSBvcHRpb25zIGVmZmVjdOWHveaVsOeahOmFjee9rlxuICogQHJldHVybnMg6L+U5Zue5Ymv5L2c55So5Ye95pWwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlZmZlY3QoZm46ICgpID0+IHZvaWQsIG9wdGlvbnM6IEVmZmVjdE9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBlZmZlY3RGbjogRWZmZWN0Rm4gPSAoKSA9PiB7XG4gICAgLy8g56e76Zmk5LiK5qyh55qE5L6d6LWW6ZuG5ZCIXG4gICAgY2xlYW5VcChlZmZlY3RGbik7XG5cbiAgICBhY3RpdmVFZmZlY3RGbiA9IGVmZmVjdEZuO1xuXG4gICAgLy8g5bCG5b2T5YmN55qE5Ymv5L2c55So5Ye95pWw5o6o5YWl5qCI5Lit77yM5bWM5aWXZWZmZWN055qE5oOF5Ya1XG4gICAgZWZmZWN0Rm5TdGFjay5wdXNoKGVmZmVjdEZuKTtcbiAgICBjb25zdCByZXMgPSBmbigpO1xuICAgIGVmZmVjdEZuU3RhY2sucG9wKCk7XG4gICAgYWN0aXZlRWZmZWN0Rm4gPSBlZmZlY3RGblN0YWNrW2VmZmVjdEZuU3RhY2subGVuZ3RoIC0gMV07XG5cbiAgICAvLyDov5Tlm57lh73mlbDnmoTnu5PmnpxcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGVmZmVjdEZuLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gIGVmZmVjdEZuLmRlcHMgPSBbXTtcblxuICBpZiAoIW9wdGlvbnMubGF6eSkge1xuICAgIGVmZmVjdEZuKCk7XG4gIH1cblxuICByZXR1cm4gZWZmZWN0Rm47XG59XG5cbmZ1bmN0aW9uIGNsZWFuVXAoZWZmZWN0Rm46IEVmZmVjdEZuKSB7XG4gIGlmICghZWZmZWN0Rm4uZGVwcykgcmV0dXJuO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVmZmVjdEZuLmRlcHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkZXBzID0gZWZmZWN0Rm4uZGVwc1tpXTtcbiAgICAvLyDlsIblvZPliY3nmoRlZmZjdEZu5LuOZGVwc+S4reenu+mZpFxuICAgIGRlcHMuZGVsZXRlKGVmZmVjdEZuKTtcbiAgfVxuICAvLyDph43nva5lZmZlY3RGbueahGRlcHNcbiAgZWZmZWN0Rm4uZGVwcy5sZW5ndGggPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhY2sodGFyZ2V0OiBvYmplY3QsIGtleTogc3RyaW5nIHwgc3ltYm9sKSB7XG4gIGlmICghYWN0aXZlRWZmZWN0Rm4gfHwgIXNob3VkVHJhY2spIHJldHVybjtcbiAgY29uc3QgZGVwc01hcCA9XG4gICAgYnVja2V0LmdldCh0YXJnZXQpIHx8IGJ1Y2tldC5zZXQodGFyZ2V0LCBuZXcgTWFwKCkpLmdldCh0YXJnZXQpO1xuICBjb25zdCBkZXBzID0gZGVwc01hcCEuZ2V0KGtleSkgfHwgZGVwc01hcCEuc2V0KGtleSwgbmV3IFNldCgpKS5nZXQoa2V5KTtcbiAgZGVwcyEuYWRkKGFjdGl2ZUVmZmVjdEZuKTtcbiAgYWN0aXZlRWZmZWN0Rm4uZGVwc1xuICAgID8gYWN0aXZlRWZmZWN0Rm4uZGVwcy5wdXNoKGRlcHMhKVxuICAgIDogKGFjdGl2ZUVmZmVjdEZuLmRlcHMgPSBbXSBhcyBTZXQ8KCkgPT4gdm9pZD5bXSkucHVzaChkZXBzISk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyKFxuICB0YXJnZXQ6IG9iamVjdCxcbiAga2V5OiBzdHJpbmcgfCBzeW1ib2wsXG4gIHtcbiAgICB0eXBlLFxuICB9OiB7XG4gICAgdHlwZTogVHJpZ2dlclR5cGU7XG4gIH1cbikge1xuICAvLyBpZiAoIW5lZWRUcmlnZ2VyKSByZXR1cm47XG4gIGNvbnN0IGRlcHNNYXAgPSBidWNrZXQuZ2V0KHRhcmdldCk7XG5cbiAgaWYgKCFkZXBzTWFwKSByZXR1cm47XG5cbiAgY29uc3QgZWZmZWN0c1RvUnVuID0gbmV3IFNldDxFZmZlY3RGbj4oKTtcbiAgY29uc3QgZGVwcyA9IGRlcHNNYXAuZ2V0KGtleSk7XG5cbiAgY29uc3QgaXRlcmF0ZUVmZmVjdHMgPSBkZXBzTWFwLmdldChJVEVSQVRFX0tFWSk7XG5cbiAgZGVwcyAmJlxuICAgIGRlcHMuZm9yRWFjaCgoZWZmZWN0Rm4pID0+IHtcbiAgICAgIGVmZmVjdHNUb1J1bi5hZGQoZWZmZWN0Rm4pO1xuICAgIH0pO1xuXG4gIC8vIOWPquaciea3u+WKoOWSjOWIoOmZpOaTjeS9nOaJjeS8muaUueWPmOWvueixoeeahGtleXPvvIzmlYXmraTml7bpnIDopoHop6blj5FpdGVyYXRlRWZmZWN0c1xuICBpZiAoXG4gICAgdHlwZSA9PT0gVHJpZ2dlclR5cGUuQUREIHx8XG4gICAgdHlwZSA9PT0gVHJpZ2dlclR5cGUuREVMRVRFIHx8XG4gICAgLy8gZm9yRWFjaOmBjeWOhk1hcOaXtu+8jOaXouWFs+W/g+mUruS5n+WFs+W/g+WAvO+8jOaVheW9k+S/ruaUuW1hcOeahOWAvOaXtu+8jOS5n+W6lOivpeinpuWPkWl0ZXJhdGVFZmZlY3RzXG4gICAgKHR5cGUgPT09IFRyaWdnZXJUeXBlLlNFVCAmJiBnZXRUeXBlKHRhcmdldCkgPT09IFwibWFwXCIpXG4gICkge1xuICAgIGl0ZXJhdGVFZmZlY3RzICYmXG4gICAgICBpdGVyYXRlRWZmZWN0cy5mb3JFYWNoKChlZmZlY3RGbikgPT4ge1xuICAgICAgICBpZiAoZWZmZWN0Rm4gIT0gYWN0aXZlRWZmZWN0Rm4pIHtcbiAgICAgICAgICBlZmZlY3RzVG9SdW4uYWRkKGVmZmVjdEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICBpZiAoXG4gICAgKHR5cGUgPT09IFRyaWdnZXJUeXBlLkFERCB8fCB0eXBlID09PSBUcmlnZ2VyVHlwZS5ERUxFVEUpICYmXG4gICAgZ2V0VHlwZSh0YXJnZXQpID09PSBcIm1hcFwiXG4gICkge1xuICAgIGNvbnN0IGl0ZXJhdGVLZXlFZmZlY3RzID0gZGVwc01hcC5nZXQoTUFQX0tFWV9JVEVSQVRFX0tFWSk7XG4gICAgaXRlcmF0ZUtleUVmZmVjdHMgJiZcbiAgICAgIGl0ZXJhdGVLZXlFZmZlY3RzLmZvckVhY2goKGVmZmVjdEZuKSA9PiB7XG4gICAgICAgIGlmIChlZmZlY3RGbiAhPSBhY3RpdmVFZmZlY3RGbikge1xuICAgICAgICAgIGVmZmVjdHNUb1J1bi5hZGQoZWZmZWN0Rm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIC8vIOWmguaenFRyaWdnZXJUeXBlID09PSBBREQsIOW5tuS4lHRhcmdldOaYr+aVsOe7hO+8jOivtOaYjuaVsOe7hOeahOmVv+W6puWPkeeUn+WPmOWMlu+8jOWImemcgOimgeaKiuaVsOe7hOeahGxlbmd0aOS5n+inpuWPkVxuICBpZiAodHlwZSA9PT0gVHJpZ2dlclR5cGUuQUREICYmIEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgIGNvbnN0IGxlbmd0aEVmZmVjdHMgPSBkZXBzTWFwLmdldChcImxlbmd0aFwiKTtcbiAgICBsZW5ndGhFZmZlY3RzICYmXG4gICAgICBsZW5ndGhFZmZlY3RzLmZvckVhY2goKGVmZmVjdEZuKSA9PiB7XG4gICAgICAgIGlmIChlZmZlY3RGbiAhPSBhY3RpdmVFZmZlY3RGbikge1xuICAgICAgICAgIGVmZmVjdHNUb1J1bi5hZGQoZWZmZWN0Rm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGVmZmVjdHNUb1J1bi5mb3JFYWNoKChlZmZlY3RGbikgPT4ge1xuICAgIC8vIOmBv+WFjeW+queOr+inpuWPkVxuICAgIGlmIChhY3RpdmVFZmZlY3RGbiAhPT0gZWZmZWN0Rm4pIHtcbiAgICAgIGlmIChlZmZlY3RGbi5vcHRpb25zICYmIGVmZmVjdEZuLm9wdGlvbnMuc2NoZWR1bGVyKSB7XG4gICAgICAgIGVmZmVjdEZuLm9wdGlvbnMuc2NoZWR1bGVyKGVmZmVjdEZuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVmZmVjdEZuKCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiIsImltcG9ydCB7IElURVJBVEVfS0VZLCBNQVBfS0VZX0lURVJBVEVfS0VZLCBSQVdfS0VZIH0gZnJvbSBcIi4vY29uc3RhbnRcIjtcclxuaW1wb3J0IHsgdHJhY2ssIHRyaWdnZXIgfSBmcm9tIFwiLi9lZmZlY3RcIjtcclxuaW1wb3J0IHsgcmVhY3RpdmUgfSBmcm9tIFwiLi9yZWFjdGl2ZVwiO1xyXG5pbXBvcnQgeyBwcm94eU9ialR5cGUsIFRyaWdnZXJUeXBlIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuLy8g6YeN5YaZU2V044CBTWFw5Lit55qE5pa55rOV77yM5L2/5YW25Y+v5Lul55uR5ZCs5pWw5o2u5Y+Y5YyWXHJcbmV4cG9ydCBjb25zdCBtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyA9IHtcclxuICBhZGQodGhpczogU2V0PGFueT4gJiBwcm94eU9ialR5cGU8U2V0PGFueT4+LCB2YWx1ZTogYW55KSB7XHJcbiAgICAvLyDojrflj5bljp/lr7nosaFcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbUkFXX0tFWV07XHJcblxyXG4gICAgY29uc3QgaGFzVmFsdWUgPSB0YXJnZXQuaGFzKHZhbHVlKTtcclxuICAgIC8vIOiOt+WPluWOn+Wvueixoe+8jCDpmLLmraLmsaHmn5Pljp/lp4vmlbDmja5cclxuICAgIGNvbnN0IG5ld1ZhbCA9IHZhbHVlW1JBV19LRVldIHx8IHZhbHVlO1xyXG4gICAgY29uc3QgcmVzID0gdGFyZ2V0LmFkZChuZXdWYWwpO1xyXG4gICAgaWYgKCFoYXNWYWx1ZSkge1xyXG4gICAgICB0cmlnZ2VyKHRhcmdldCwgdmFsdWUsIHtcclxuICAgICAgICB0eXBlOiBUcmlnZ2VyVHlwZS5BREQsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9LFxyXG5cclxuICBkZWxldGUoXHJcbiAgICB0aGlzOiAoTWFwPGFueSwgYW55PiB8IFNldDxhbnk+KSAmIHByb3h5T2JqVHlwZTxNYXA8YW55LCBhbnk+IHwgU2V0PGFueT4+LFxyXG4gICAga2V5OiBhbnlcclxuICApIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbUkFXX0tFWV07XHJcbiAgICBjb25zdCBoYXNLZXkgPSB0YXJnZXQuaGFzKGtleSk7XHJcbiAgICBjb25zdCByZXMgPSB0YXJnZXQuZGVsZXRlKGtleSk7XHJcblxyXG4gICAgaWYgKGhhc0tleSkge1xyXG4gICAgICB0cmlnZ2VyKHRhcmdldCwga2V5LCB7XHJcbiAgICAgICAgdHlwZTogVHJpZ2dlclR5cGUuREVMRVRFLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfSxcclxuXHJcbiAgZ2V0KHRoaXM6IE1hcDxhbnksIGFueT4gJiBwcm94eU9ialR5cGU8TWFwPGFueSwgYW55Pj4sIGtleTogYW55KTogYW55IHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbUkFXX0tFWV07XHJcbiAgICBjb25zdCBoYXNLZXkgPSB0YXJnZXQuaGFzKGtleSk7XHJcbiAgICB0cmFjayh0YXJnZXQsIGtleSk7XHJcbiAgICBpZiAoaGFzS2V5KSB7XHJcbiAgICAgIGNvbnN0IHJlcyA9IHRhcmdldC5nZXQoa2V5KTtcclxuICAgICAgcmV0dXJuIHR5cGVvZiByZXMgPT09IFwib2JqZWN0XCIgPyByZWFjdGl2ZShyZXMpIDogcmVzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9LFxyXG5cclxuICBzZXQodGhpczogTWFwPGFueSwgYW55PiAmIHByb3h5T2JqVHlwZTxNYXA8YW55LCBhbnk+Piwga2V5OiBhbnksIHZhbHVlOiBhbnkpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbUkFXX0tFWV07XHJcbiAgICBjb25zdCBoYXNLZXkgPSB0YXJnZXQuaGFzKGtleSk7XHJcbiAgICBjb25zdCBvbGRWYWwgPSB0YXJnZXQuZ2V0KGtleSk7XHJcbiAgICAvLyDojrflj5bljp/lr7nosaHvvIwg6Ziy5q2i5rGh5p+T5Y6f5aeL5pWw5o2uXHJcbiAgICBjb25zdCBuZXdWYWwgPSB2YWx1ZVtSQVdfS0VZXSB8fCB2YWx1ZTtcclxuICAgIGNvbnN0IHJlcyA9IHRhcmdldC5zZXQoa2V5LCBuZXdWYWwpO1xyXG4gICAgLy8g6L+Z6YeM6KaB5Yy65YiG5piv5ZCm5piv5paw5aKe55qEa2V577yM5paw5aKe55qEa2V56ZyA6KaB6Kem5Y+RQURE5LqL5Lu277yM6ICM5LiN5pivU0VU5LqL5Lu2XHJcblxyXG4gICAgaWYgKCFoYXNLZXkpIHtcclxuICAgICAgdHJpZ2dlcih0YXJnZXQsIGtleSwge1xyXG4gICAgICAgIHR5cGU6IFRyaWdnZXJUeXBlLkFERCxcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKG9sZFZhbCAhPT0gdmFsdWUgfHwgKG9sZFZhbCA9PT0gb2xkVmFsICYmIHZhbHVlID09PSB2YWx1ZSkpIHtcclxuICAgICAgdHJpZ2dlcih0YXJnZXQsIGtleSwge1xyXG4gICAgICAgIHR5cGU6IFRyaWdnZXJUeXBlLlNFVCxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH0sXHJcblxyXG4gIGZvckVhY2goXHJcbiAgICB0aGlzOiAoTWFwPGFueSwgYW55PiB8IFNldDxhbnk+KSAmIHByb3h5T2JqVHlwZTxNYXA8YW55LCBhbnk+IHwgU2V0PGFueT4+LFxyXG4gICAgY2FsbGJhY2tmbjogKChcclxuICAgICAgdmFsdWU6IGFueSxcclxuICAgICAga2V5OiBhbnksXHJcbiAgICAgIG1hcDogTWFwPGFueSwgYW55PiB8IFNldDxhbnk+XHJcbiAgICApID0+IHZvaWQpICZcclxuICAgICAgKCh2YWx1ZTogYW55LCB2YWx1ZTI6IGFueSwgc2V0OiBTZXQ8YW55PikgPT4gdm9pZCksXHJcbiAgICB0aGlzQXJnOiBhbnlcclxuICApIHtcclxuICAgIC8vIOWSjGdldOaWueazleS4gOagt++8jOS4gOaXpuaIkeS7rOimgeiOt+WPluS4gOS4quWAvO+8jOaIkeS7rOmcgOimgeiAg+iZkeS4i+aYr+WQpumcgOimgeinpuWPkeS7o+eQhlxyXG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tSQVdfS0VZXTtcclxuICAgIHRyYWNrKHRhcmdldCwgSVRFUkFURV9LRVkpO1xyXG5cclxuICAgIHJldHVybiB0YXJnZXQuZm9yRWFjaChcclxuICAgICAgKHYsIGssIG0pID0+IGNhbGxiYWNrZm4od3JhcCh2KSwgd3JhcChrKSwgbSksXHJcbiAgICAgIHRoaXNBcmdcclxuICAgICk7XHJcbiAgfSxcclxuXHJcbiAgW1N5bWJvbC5pdGVyYXRvcl0oXHJcbiAgICB0aGlzOiAoTWFwPGFueSwgYW55PiB8IFNldDxhbnk+KSAmIHByb3h5T2JqVHlwZTxNYXA8YW55LCBhbnk+IHwgU2V0PGFueT4+XHJcbiAgKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1JBV19LRVldO1xyXG4gICAgdHJhY2sodGFyZ2V0LCBJVEVSQVRFX0tFWSk7XHJcbiAgICBjb25zdCBpdHIgPSB0YXJnZXRbU3ltYm9sLml0ZXJhdG9yXSgpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5leHQoKSB7XHJcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gaXRyLm5leHQoKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdmFsdWU6IHZhbHVlID8gW3dyYXAodmFsdWVbMF0pLCB3cmFwKHZhbHVlWzFdKV0gOiB2YWx1ZSxcclxuICAgICAgICAgIGRvbmUsXHJcbiAgICAgICAgfTtcclxuICAgICAgfSxcclxuICAgICAgLy8g6L+t5Luj5Ye95pWw5aaCZm9yLi4ub2bov63ku6PkuIDkuKrlj6/ov63ku6Plr7nosaHml7bvvIzkvJrlhYjmiafooYzov63ku6PlmajnmoRTeW1ib2wuaXRlcmF0b3Lmlrnms5XvvIznhLblkI7lho3miafooYxuZXh05pa55rOVXHJcbiAgICAgIC8vIOaJgOS7pei/lOWbnueahOWvueixoeW/hemhu+WQq+aciVN5bWJvbC5pdGVyYXRvcuaWueazlVxyXG4gICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuXHJcbiAgZW50cmllcyhcclxuICAgIHRoaXM6IChNYXA8YW55LCBhbnk+IHwgU2V0PGFueT4pICYgcHJveHlPYmpUeXBlPE1hcDxhbnksIGFueT4gfCBTZXQ8YW55Pj5cclxuICApIHtcclxuICAgIHJldHVybiB0aGlzW1N5bWJvbC5pdGVyYXRvcl0oKTtcclxuICB9LFxyXG5cclxuICB2YWx1ZXM6IHZhbHVlSXRlcmF0aW9uTWV0aG9kLFxyXG5cclxuICBrZXlzOiBrZXlJdGVyYXRpb25NZXRob2QsXHJcbn07XHJcblxyXG5mdW5jdGlvbiB2YWx1ZUl0ZXJhdGlvbk1ldGhvZChcclxuICB0aGlzOiAoTWFwPGFueSwgYW55PiB8IFNldDxhbnk+KSAmIHByb3h5T2JqVHlwZTxNYXA8YW55LCBhbnk+IHwgU2V0PGFueT4+XHJcbikge1xyXG4gIGNvbnN0IHRhcmdldCA9IHRoaXNbUkFXX0tFWV07XHJcbiAgY29uc3QgaXRyID0gdGFyZ2V0LnZhbHVlcygpO1xyXG4gIHRyYWNrKHRhcmdldCwgSVRFUkFURV9LRVkpO1xyXG4gIHJldHVybiB7XHJcbiAgICBuZXh0KCkge1xyXG4gICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBpdHIubmV4dCgpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbHVlOiB2YWx1ZSA/IHdyYXAodmFsdWUpIDogdmFsdWUsXHJcbiAgICAgICAgZG9uZSxcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGtleUl0ZXJhdGlvbk1ldGhvZChcclxuICB0aGlzOiAoTWFwPGFueSwgYW55PiB8IFNldDxhbnk+KSAmIHByb3h5T2JqVHlwZTxNYXA8YW55LCBhbnk+IHwgU2V0PGFueT4+XHJcbikge1xyXG4gIGNvbnN0IHRhcmdldCA9IHRoaXNbUkFXX0tFWV07XHJcbiAgY29uc3QgaXRyID0gdGFyZ2V0LmtleXMoKTtcclxuICB0cmFjayh0YXJnZXQsIE1BUF9LRVlfSVRFUkFURV9LRVkpO1xyXG4gIHJldHVybiB7XHJcbiAgICBuZXh0KCkge1xyXG4gICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBpdHIubmV4dCgpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbHVlOiB2YWx1ZSA/IHdyYXAodmFsdWUpIDogdmFsdWUsXHJcbiAgICAgICAgZG9uZSxcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gIH07XHJcbn1cclxuXHJcbmNvbnN0IHdyYXAgPSAodmFsOiBhbnkpID0+ICh0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiID8gcmVhY3RpdmUodmFsKSA6IHZhbCk7XHJcbiIsImltcG9ydCB7IHRyYWNrLCB0cmlnZ2VyIH0gZnJvbSBcIi4vZWZmZWN0XCI7XG5pbXBvcnQgeyBUcmlnZ2VyVHlwZSB9IGZyb20gXCIuL3R5cGVcIjtcbmltcG9ydCB7IGdldFR5cGUgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXhcIjtcbmltcG9ydCB7IElURVJBVEVfS0VZLCBSQVdfS0VZIH0gZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCB7IG11dGFibGVJbnN0cnVtZW50YXRpb25zIH0gZnJvbSBcIi4vcmV3cml0ZVwiO1xuXG4vLyDliJvlu7rkuIDkuKptYXDmnaXorrDlvZXlt7Lnu4/ooqvku6PnkIbnmoTlr7nosaHvvIzpgb/lhY3ph43lpI3ku6PnkIZcblxuLy9UT0RPXG5leHBvcnQgY29uc3Qgc2hvdWRUcmFjayA9IHRydWU7XG5cbmNvbnN0IHJlYWN0aXZlTWFwID0gbmV3IE1hcCgpO1xuXG4vKipcbiAqIOWIm+W7uuS4gOS4quWTjeW6lOW8j+WvueixoVxuICogQHBhcmFtIG9iaiDlr7nosaFcbiAqIEBwYXJhbSBpc1NoYWxsb3cg5piv5ZCm5rWF5ou36LSdXG4gKiBAcGFyYW0gaXNSZWFkb25seSDmmK/lkKblj6ror7tcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aXZlPFQgZXh0ZW5kcyBvYmplY3Q+KFxuICBvYmo6IFQsXG4gIHsgaXNTaGFsbG93ID0gZmFsc2UgfVxuKTogVCAmIHtcbiAgW1JBV19LRVldOiBUO1xuICBfX2lzUHJveHlfXzogYm9vbGVhbjtcbn0ge1xuICBjb25zdCBwcm94eU9ialR5cGUgPSBnZXRUeXBlKG9iaik7XG5cbiAgcmV0dXJuIG5ldyBQcm94eShvYmosIHtcbiAgICBnZXQodGFyZ2V0OiBULCBrZXk6IHN0cmluZyB8IHN5bWJvbCwgcmVjZWl2ZXI6IG9iamVjdCk6IGFueSB7XG4gICAgICAvLyDnlKjmnaXliKTmlq3or6Xlr7nosaHmmK/lkKbooqvku6PnkIZcbiAgICAgIGlmIChrZXkgPT09IFwiX19pc1Byb3h5X19cIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIOS7o+eQhuWvueixoeWPr+S7pemAmui/h1JBV19LRVnojrflj5bliLDljp/lp4vmlbDmja5cbiAgICAgIGlmIChrZXkgPT09IFJBV19LRVkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cblxuICAgICAgLy8gbWFw57G75Z6LIHwgc2V057G75Z6LIOmcgOimgeeJueauiuWkhOeQhu+8jOS7o+eQhumHjOmdoueahOaWueazleadpeebkeWQrOaVsOaNruWPmOWMllxuICAgICAgaWYgKHByb3h5T2JqVHlwZSA9PT0gXCJzZXRcIiB8fCBwcm94eU9ialR5cGUgPT09IFwibWFwXCIpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJzaXplXCIpIHtcbiAgICAgICAgICB0cmFjayh0YXJnZXQsIElURVJBVEVfS0VZKTtcbiAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXksIHRhcmdldCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCEhbXV0YWJsZUluc3RydW1lbnRhdGlvbnNba2V5XSkge1xuICAgICAgICAgICAgcmV0dXJuIG11dGFibGVJbnN0cnVtZW50YXRpb25zW2tleV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldLmJpbmQodGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIikge1xuICAgICAgICAvLyDlpoLmnpzkuI3mmK/lj6ror7vvvIzlubbkuJRrZXnkuI3mmK9zeW1ib2zvvIzliJnmt7vliqDlia/kvZznlKjlh73mlbBcbiAgICAgICAgdHJhY2sodGFyZ2V0LCBrZXkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXMgPSBSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xuXG4gICAgICAvLyDlpoLmnpzkuLrmtYXlk43lupTvvIzliJnkuI3lr7nlgLzov5vooYzlk43lupTlvI/ljJZcbiAgICAgIGlmIChpc1NoYWxsb3cpIHtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cblxuICAgICAgLy8g5aaC5p6c5piv5rex5ZON5bqU77yM5YiZ6YCS5b2S5ZON5bqU5byP5YyW5YC8XG4gICAgICBpZiAodHlwZW9mIHJlcyA9PT0gXCJvYmplY3RcIiAmJiByZXMgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlYWN0aXZlKHJlcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXM7XG4gICAgfSxcblxuICAgIHNldCh0YXJnZXQ6IFQsIGtleTogc3RyaW5nIHwgc3ltYm9sLCBuZXdWYWw6IGFueSwgcmVjZWl2ZXI6IG9iamVjdCkge1xuICAgICAgY29uc3Qgb2xkVmFsID0gdGFyZ2V0W2tleV07XG5cbiAgICAgIGNvbnN0IHR5cGUgPSBBcnJheS5pc0FycmF5KHRhcmdldClcbiAgICAgICAgPyAvLyDlpoLmnpzmmK/mlbDnu4TkuJRrZXnlgLzlsI/kuo7plb/luqbvvIzliJnorqTkuLrmmK9zZXTvvIzlkKbliJnmmK/mj5LlhaXmlrDlhYPntKBcbiAgICAgICAgICBOdW1iZXIoa2V5KSA8IHRhcmdldC5sZW5ndGhcbiAgICAgICAgICA/IFRyaWdnZXJUeXBlLlNFVFxuICAgICAgICAgIDogVHJpZ2dlclR5cGUuQUREXG4gICAgICAgIDogLy8g5aaC5p6c5a+56LGh5ZCr5pyJa2V55bGe5oCn77yM5YiZ6K6k5Li65pivc2V077yM5ZCm5YiZ5piv5paw5aKe5bGe5oCnXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSlcbiAgICAgICAgPyBUcmlnZ2VyVHlwZS5TRVRcbiAgICAgICAgOiBUcmlnZ2VyVHlwZS5BREQ7XG4gICAgICBjb25zdCByZXMgPSBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgbmV3VmFsLCByZWNlaXZlcik7XG5cbiAgICAgIGlmIChvbGRWYWwgIT09IG5ld1ZhbCkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwga2V5LCB7XG4gICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0sXG5cbiAgICBoYXModGFyZ2V0OiBvYmplY3QsIGtleTogc3RyaW5nIHwgc3ltYm9sKSB7XG4gICAgICB0cmFjayh0YXJnZXQsIGtleSk7XG4gICAgICByZXR1cm4gUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpO1xuICAgIH0sXG5cbiAgICBvd25LZXlzKHRhcmdldDogb2JqZWN0KSB7XG4gICAgICB0cmFjayh0YXJnZXQsIEFycmF5LmlzQXJyYXkodGFyZ2V0KSA/IFwibGVuZ3RoXCIgOiBJVEVSQVRFX0tFWSk7XG4gICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCk7XG4gICAgfSxcblxuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldDogb2JqZWN0LCBrZXk6IHN0cmluZyB8IHN5bWJvbCkge1xuICAgICAgY29uc3QgaGFzS2V5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KTtcbiAgICAgIGNvbnN0IHJlcyA9IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpO1xuICAgICAgaWYgKGhhc0tleSAmJiByZXMpIHtcbiAgICAgICAgQXJyYXkuaXNBcnJheSh0YXJnZXQpXG4gICAgICAgICAgPyB0cmlnZ2VyKHRhcmdldCwga2V5LCB7XG4gICAgICAgICAgICAgIHR5cGU6IFRyaWdnZXJUeXBlLlNFVCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiB0cmlnZ2VyKHRhcmdldCwga2V5LCB7XG4gICAgICAgICAgICAgIHR5cGU6IFRyaWdnZXJUeXBlLkRFTEVURSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LFxuICB9KSBhcyBhbnk7XG59XG5cbi8vIOm7mOiupHJlYWN0aXZl5Ye95pWwLCDmt7Hlk43lupTlvI/ljJZcbmZ1bmN0aW9uIHJlYWN0aXZlKG9iajogb2JqZWN0KSB7XG4gIC8vIOWFiOafpeaJvuW9k+WJjeWvueixoeaYr+WQpuW3sue7j+S7o+eQhui/h1xuICBjb25zdCBleGlzdFByb3h5ID0gcmVhY3RpdmVNYXAuZ2V0KG9iaik7XG5cbiAgaWYgKGV4aXN0UHJveHkpIHtcbiAgICAvLyDlrZjlnKjliJnnm7TmjqXov5Tlm55cbiAgICByZXR1cm4gZXhpc3RQcm94eTtcbiAgfVxuXG4gIC8vIOWQpuWImeWIm+W7uuS7o+eQhuWvueixoVxuICBjb25zdCBwcm94eSA9IGNyZWF0ZVJlYWN0aXZlKG9iaiwge30pO1xuICByZWFjdGl2ZU1hcC5zZXQob2JqLCBwcm94eSk7XG4gIHJldHVybiBwcm94eTtcbn1cblxuZnVuY3Rpb24gc2hhbGxvd1JlYWN0aXZlPFQgZXh0ZW5kcyBvYmplY3Q+KG9iajogVCkge1xuICByZXR1cm4gY3JlYXRlUmVhY3RpdmUob2JqLCB7IGlzU2hhbGxvdzogdHJ1ZSB9KTtcbn1cblxuZXhwb3J0IHsgcmVhY3RpdmUsIHNoYWxsb3dSZWFjdGl2ZSB9O1xuIiwiaW1wb3J0IHsgZWZmZWN0LCB0cmFjaywgdHJpZ2dlciB9IGZyb20gXCIuL2VmZmVjdFwiO1xuaW1wb3J0IHsgVHJpZ2dlclR5cGUgfSBmcm9tIFwiLi90eXBlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlZChnZXR0ZXI6ICgpID0+IGFueSkge1xuICBsZXQgdmFsdWU6IGFueTtcbiAgLy8g6K6+572u5qCH5b+X5L2N77yMZGlydHnooajnpLrmlbDmja7lj5HnlJ/mlLnlj5jvvIzpnIDopoHmm7TmlrDvvIzlrp7njrBjb21wdXRlZOaDsOaAp+axguWAvFxuICBsZXQgZGlydHkgPSB0cnVlO1xuICBjb25zdCBlZmZlY3RGbiA9IGVmZmVjdChnZXR0ZXIsIHtcbiAgICAvLyDorr7nva5sYXp55Li6dHJ1Ze+8jOihqOekuuS4jeS8mueri+WNs+aJp+ihjGVmZmVjdEZu77yM6ICM5piv5Zyo6LCD55SoY29tcHV0ZWTnmoTml7blgJnmiY3miafooYzvvIzlrp7njrBjb21wdXRlZOaDsOaAp+axguWAvFxuICAgIGxhenk6IHRydWUsXG4gICAgc2NoZWR1bGVyKCkge1xuICAgICAgaWYgKCFkaXJ0eSkge1xuICAgICAgICAvLyDlsIZkaXJ0eeiuvuS4unRydWXvvIzooajnpLrmlbDmja7lj5HnlJ/mlLnlj5jvvIzpnIDopoHmm7TmlrBcbiAgICAgICAgZGlydHkgPSB0cnVlO1xuICAgICAgICAvLyDosIPnlKh0cmlnZ2Vy77yM5ZGK55+lY29tcHV0ZWTnmoTkvp3otZblj5HnlJ/lj5jljJborqnku5bku6zph43mlrDmiafooYxcbiAgICAgICAgdHJpZ2dlcihvYmosIFwidmFsdWVcIiwge1xuICAgICAgICAgIHR5cGU6IFRyaWdnZXJUeXBlLlNFVCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gY29tcHV0ZWTopoHov5Tlm57nmoTlr7nosaHvvIzpgJrov4dvYmoudmFsdWXojrflj5bliLBjb21wdXRlZOi/lOWbnueahOWAvFxuICBjb25zdCBvYmogPSB7XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgLy8g5aaC5p6cZGlydHnkuLp0cnVl77yM6KGo56S65pWw5o2u5Y+R55Sf5pS55Y+Y77yM6ZyA6KaB5pu05pawXG5cbiAgICAgIGlmIChkaXJ0eSkge1xuICAgICAgICB2YWx1ZSA9IGVmZmVjdEZuKCk7XG4gICAgICAgIGRpcnR5ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyDmlLbpm4bkvp3otZZcbiAgICAgIHRyYWNrKG9iaiwgXCJ2YWx1ZVwiKTtcblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gIH07XG4gIHJldHVybiBvYmo7XG59XG4iLCJpbXBvcnQgeyBlZmZlY3QgfSBmcm9tIFwiLi9lZmZlY3RcIjtcblxuaW50ZXJmYWNlIFdhdGNoT3B0aW9ucyB7XG4gIGRlZXA/OiBib29sZWFuO1xuICBpbW1lZGlhdGU/OiBib29sZWFuO1xuICBmbHVzaD86IFwicG9zdFwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2F0Y2goXG4gIGdldHRlcjogb2JqZWN0IHwgKCgpID0+IHZvaWQpLFxuICBmbjogKFxuICAgIG5ld1ZhbDogYW55LFxuICAgIG9sZFZhbDogYW55LFxuICAgIG9uSW52YWxpZGF0ZTogKGZuOiAoKSA9PiB2b2lkKSA9PiB2b2lkXG4gICkgPT4gdm9pZCxcbiAgb3B0aW9uczogV2F0Y2hPcHRpb25zID0ge1xuICAgIGltbWVkaWF0ZTogZmFsc2UsXG4gIH1cbikge1xuICBsZXQgb2xkVmFsOiBhbnksIG5ld1ZhbDogYW55O1xuXG4gIC8vIOWtmOWCqOi/h+acn+Wbnuiwg1xuICBsZXQgY2xlYW5VcDogKCgpID0+IHZvaWQpIHwgbnVsbDtcblxuICBmdW5jdGlvbiBvbkludmFsaWRhdGUoZm46ICgpID0+IHZvaWQpIHtcbiAgICBjbGVhblVwID0gZm47XG4gIH1cblxuICBmdW5jdGlvbiBqb2IoKSB7XG4gICAgY2xlYW5VcCAmJiBjbGVhblVwKCk7XG4gICAgY2xlYW5VcCA9IG51bGw7XG4gICAgbmV3VmFsID0gZWZmZWN0Rm4oKTtcbiAgICBmbihuZXdWYWwsIG9sZFZhbCwgb25JbnZhbGlkYXRlKTtcbiAgICBvbGRWYWwgPSBuZXdWYWw7XG4gIH1cblxuICBjb25zdCBlZmZlY3RGbiA9IGVmZmVjdChcbiAgICAoKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGdldHRlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBnZXR0ZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGdldHRlcik7XG5cbiAgICAgICAgcmV0dXJuIHRyYXZlcnNlKGdldHRlcik7XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBsYXp5OiB0cnVlLFxuICAgICAgc2NoZWR1bGVyOiAoKSA9PiB7XG4gICAgICAgIGlmIChvcHRpb25zLmZsdXNoID09PSBcInBvc3RcIikge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oam9iKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBqb2IoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9XG4gICk7XG5cbiAgLy8g56uL5Y2z5omn6KGM5YiZ6LCD55Soam9iXG4gIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgIGpvYigpO1xuICB9IGVsc2Uge1xuICAgIC8vIOeUseS6juiuvue9ruS6hmxhenk6dHJ1Ze+8jOaVhemcgOimgeaJi+WKqOiwg+eUqGVmZmVjdEZu6L+b6KGM5L6d6LWW5pS26ZuGXG4gICAgb2xkVmFsID0gZWZmZWN0Rm4oKTtcbiAgfVxufVxuXG4vKipcbiAqIOmAkuW9kuivu+WPlnZhbHVlXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBzZWVuIOeUqOadpeWtmOWCqOW3sue7j+ivu+WPlui/h+eahOWAvO+8jOmBv+WFjeWPkeeUn+atu+W+queOr1xuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UodmFsdWU6IG9iamVjdCwgc2VlbiA9IG5ldyBTZXQoKSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwgfHwgc2Vlbi5oYXModmFsdWUpKVxuICAgIHJldHVybiB2YWx1ZTtcbiAgc2Vlbi5hZGQodmFsdWUpO1xuICBmb3IgKGNvbnN0IGsgaW4gdmFsdWUpIHtcbiAgICB0cmF2ZXJzZSh2YWx1ZVtrXSwgc2Vlbik7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuIiwiaW1wb3J0IHsgVk0gfSBmcm9tIFwiLi4venZtL3R5cGVcIjtcbmltcG9ydCB7IGNyZWF0ZVZNIH0gZnJvbSBcIi4uL3p2bS96dm1cIjtcbmltcG9ydCB7IENvbXBpbGUgfSBmcm9tIFwiLi9jb21waWxlXCI7XG5pbXBvcnQgeyBpbnNlcnRBZnRlciB9IGZyb20gXCIuL2RvbVwiO1xuXG5leHBvcnQgY29uc3QgcmVuZGVyID0ge1xuICB0ZXh0UmVuZGVyOiAobm9kZTogTm9kZSwgdGV4dDogc3RyaW5nLCByZXBsYWNlOiBzdHJpbmcpID0+IHtcbiAgICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gXCJJTlBVVFwiKSB7XG4gICAgICBjb25zdCBpbnB1dFR5cGUgPSAobm9kZSBhcyBIVE1MSW5wdXRFbGVtZW50KS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuXG4gICAgICAvLyByYWRpb+S4jeaYr+iuvue9rnZhbHVl77yM6ICM5piv5Yik5pat5piv5ZCm6YCJ5LitXG4gICAgICBpZiAoaW5wdXRUeXBlID09PSBcInJhZGlvXCIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJyYWRpb1wiKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAobm9kZSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICAgICAgKG5vZGUgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZCA9IHRleHQgPT09IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaW5wdXRUeXBlID09PSBcImNoZWNrYm94XCIpIHtcbiAgICAgICAgKG5vZGUgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZCA9ICEhdGV4dDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgKG5vZGUgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUgPSB0ZXh0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIU9iamVjdC5oYXNPd24obm9kZSwgXCJfdGV4dENvbnRlbnRcIikpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub2RlLCBcIl90ZXh0Q29udGVudFwiLCB7XG4gICAgICAgIHZhbHVlOiBub2RlLnRleHRDb250ZW50LFxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG9yaWdpblRleHQgPSAobm9kZSBhcyBhbnkpLl90ZXh0Q29udGVudDtcbiAgICByZXBsYWNlXG4gICAgICA/IChub2RlLnRleHRDb250ZW50ID0gb3JpZ2luVGV4dC5yZXBsYWNlKHJlcGxhY2UsIHRleHQpIHx8IFwiXCIpXG4gICAgICA6IChub2RlLnRleHRDb250ZW50ID0gdHlwZW9mIHRleHQgPT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiB0ZXh0KTtcbiAgfSxcblxuICBjbGFzc1JlbmRlcjogKG5vZGU6IEhUTUxFbGVtZW50LCB2YWx1ZTogb2JqZWN0KSA9PiB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGF0dHJSZW5kZXI6XG4gICAgKGF0dHI6IHN0cmluZykgPT4gKG5vZGU6IEhUTUxFbGVtZW50LCB2YWx1ZTogc3RyaW5nIHwgYm9vbGVhbikgPT4ge1xuICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSBub2RlLnNldEF0dHJpYnV0ZShhdHRyLCBcIlwiKTtcbiAgICAgIGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICBlbHNlIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgZm9yUmVuZGVyOiAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAvLyDliKnnlKjpl63ljIXkv53lrZjkuIDkuKrljp/lp4voioLngrlcbiAgICAvLyDnp4HmnInmlbDmja7vvIzkuI3mm7TmlLlcbiAgICBjb25zdCBfY2xvbmVOb2RlID0gbm9kZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgY29uc3QgX3BhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgY29uc3QgX3ByZXZpb3VzTm9kZTogTm9kZSB8IG51bGwgPSBub2RlLnByZXZpb3VzU2libGluZztcbiAgICBjb25zdCBmb3JOb2RlczogTm9kZVtdID0gW107XG4gICAgX3BhcmVudE5vZGU/LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIGZ1bmN0aW9uIGNsZWFyTm9kZXMoKSB7XG4gICAgICBmb3JOb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIF9wYXJlbnROb2RlPy5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgZm9yTm9kZXMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIHZhbHVlOiBzdHJpbmcsXG4gICAgICBpbmRleDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgICAgaXRlbXM6IHN0cmluZyxcbiAgICAgIHZtOiBWTVxuICAgICkgPT4ge1xuICAgICAgY2xlYXJOb2RlcygpO1xuICAgICAgbGV0IGxhc3ROb2RlOiBOb2RlIHwgbnVsbCA9IF9wcmV2aW91c05vZGU7XG4gICAgICAvLyBub2RlLnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIWl0ZW1zW2ldKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgY2xvbmVOb2RlID0gX2Nsb25lTm9kZS5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICAgICAgLy8gbm9kZS5hcHBlbmRDaGlsZChmcmFnKTtcbiAgICAgICAgLy8gVE9ET1xuICAgICAgICAoY2xvbmVOb2RlIGFzIEVsZW1lbnQpLnJlbW92ZUF0dHJpYnV0ZShcInotZm9yXCIpO1xuXG4gICAgICAgIGlmIChsYXN0Tm9kZSkge1xuICAgICAgICAgIGluc2VydEFmdGVyKGNsb25lTm9kZSwgbGFzdE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9wYXJlbnROb2RlPy5hcHBlbmRDaGlsZChjbG9uZU5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3ROb2RlID0gY2xvbmVOb2RlO1xuICAgICAgICBmb3JOb2Rlcy5wdXNoKGNsb25lTm9kZSk7XG4gICAgICAgIGNvbnN0IGNoaWxkVm0gPSBjcmVhdGVWTShcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZTogY2xvbmVOb2RlIGFzIEVsZW1lbnQsXG4gICAgICAgICAgICBkYXRhOiBpbmRleFxuICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgIFt2YWx1ZV06IGl0ZW1zW2ldLFxuICAgICAgICAgICAgICAgICAgW2luZGV4XTogaSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgW3ZhbHVlXTogaXRlbXNbaV0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gZGVidWdnZXI7XG4gICAgICAgIC8vIGFsZXJ0KDEpO1xuXG4gICAgICAgIC8vIE9iamVjdC5zZXRQcm90b3R5cGVPZihjaGlsZFZtLCB2bSk7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coY2hpbGRWbSk7XG5cbiAgICAgICAgbmV3IENvbXBpbGUoY2xvbmVOb2RlLCBjaGlsZFZtLCB7XG4gICAgICAgICAgY29tcGlsZVJvb3Q6IHRydWUsXG4gICAgICAgIH0pLm1vdW50KCk7XG4gICAgICAgIGxhc3ROb2RlID0gY2xvbmVOb2RlO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG59O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGluc2VydEFmdGVyKG5ld05vZGU6IE5vZGUsIHJlZmVyZW5jZU5vZGU6IE5vZGUpIHtcbiAgcmVmZXJlbmNlTm9kZT8ucGFyZW50Tm9kZT8uaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUubmV4dFNpYmxpbmcpO1xufVxuIiwiLy8g5qC55o2uYS5iLmPorr7nva7mlbDmja5cbmV4cG9ydCBmdW5jdGlvbiBzZXRWYWx1ZUJ5UGF0aChvYmo6IG9iamVjdCwgcGF0aDogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gIGNvbnN0IHBhdGhzID0gcGF0aC5zcGxpdChcIi5cIik7XG4gIGNvbnN0IGxlbiA9IHBhdGhzLmxlbmd0aDtcbiAgbGV0IGkgPSAwO1xuICB3aGlsZSAoaSA8IGxlbiAtIDEpIHtcbiAgICBvYmogPSBvYmpbcGF0aHNbaSsrXV07XG4gIH1cbiAgb2JqW3BhdGhzW2ldXSA9IHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVCeVBhdGgob2JqOiBvYmplY3QsIHBhdGg6IHN0cmluZykge1xuICBjb25zdCBwYXRocyA9IHBhdGguc3BsaXQoXCIuXCIpO1xuXG4gIGNvbnN0IGxlbiA9IHBhdGhzLmxlbmd0aDtcbiAgbGV0IGkgPSAwO1xuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIG9iaiA9IG9ialtwYXRoc1tpKytdXTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vLyDmqKHmi593aXRoXG5leHBvcnQgZnVuY3Rpb24gX3dpdGgoc2NvcGVOYW1lOiBzdHJpbmcsIGV4cDogc3RyaW5nKSB7XG4gIC8v5Y676Zmk56m65qC8XG4gIGV4cCA9IGV4cC5yZXBsYWNlKC9cXHMvZywgXCJcIik7XG4gIGV4cCA9IFwiIFwiICsgZXhwO1xuICBjb25zdCBxdWlja1JlZ2V4ID1cbiAgICAvKFtcXCg6LFxcc1xcK1xcLVxcKlxcLyUmXFx8XFxeIVxcKn5dXFxzKj8pKChbYS16QS1aXyRdW2EtekEtWl8kMC05XSopKS9nO1xuICAvLyBqYXZhc2NyaXB0IOWFs+mUruWtl+eahOato+WImVxuICBjb25zdCBib29sUmVnZXggPSAvKHRydWV8ZmFsc2V8bnVsbHx1bmRlZmluZWQpL2c7XG5cbiAgZXhwID0gZXhwLnJlcGxhY2UocXVpY2tSZWdleCwgKF9hLCBiLCBjKSA9PiB7XG4gICAgcmV0dXJuIGJvb2xSZWdleC50ZXN0KGMpID8gYiArIGMgOiBiICsgc2NvcGVOYW1lICsgXCIuXCIgKyBjO1xuICB9KTtcblxuICByZXR1cm4gZXhwO1xufVxuXG4vLyDop6PmnpBKYXZhU2NyaXB06KGo6L6+5byP77yM5Yqg5YWl5LiK5LiL5paH5a+56LGh77yM6L+U5Zue6KGo6L6+5byP5pyA5ZCO55qE5YC8XG5leHBvcnQgZnVuY3Rpb24gcnVuSW5TY29wZShzY29wZTogb2JqZWN0LCBzY29wZU5hbWU6IHN0cmluZywgZXhwOiBzdHJpbmcpIHtcbiAgY29uc3QgZnVuYyA9IG5ldyBGdW5jdGlvbihzY29wZU5hbWUsIFwicmV0dXJuIFwiICsgX3dpdGgoc2NvcGVOYW1lLCBleHApKTtcbiAgcmV0dXJuIGZ1bmMoc2NvcGUpO1xufVxuIiwiaW1wb3J0IHsgZWZmZWN0LCB3YXRjaCB9IGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBWTSB9IGZyb20gXCIuLi96dm0vdHlwZVwiO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vcmVuZGVyXCI7XG5pbXBvcnQgeyBDdXN0b21EaXJlY3RpdmUsIEN1c3RvbURpcmVjdGl2ZUZuIH0gZnJvbSBcIi4vdHlwZVwiO1xuaW1wb3J0IHsgZ2V0VmFsdWVCeVBhdGgsIHJ1bkluU2NvcGUsIHNldFZhbHVlQnlQYXRoIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5jb25zdCBjdXN0b21EaXJlY3RpdmVzOiBDdXN0b21EaXJlY3RpdmUgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGlyZWN0aXZlKG5hbWU6IHN0cmluZywgZm46IEN1c3RvbURpcmVjdGl2ZUZuKSB7XG4gIGN1c3RvbURpcmVjdGl2ZXNbbmFtZS50b0xvd2VyQ2FzZSgpXSA9IGZuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJpZ2dlckRpcmVjdGl2ZShcbiAgbm9kZTogTm9kZSxcbiAgdm06IFZNLFxuICBkaXJlY3RpdmU6IHN0cmluZyxcbiAgZXhwcmVzc2lvbjogc3RyaW5nXG4pIHtcbiAgY29uc3QgZGlyZWN0aXZlUmVnID0gL156LShcXHcrKVxccyooOihcXHcqKSk/JC87XG5cbiAgY29uc3QgbWF0Y2hEaXJlY3RpdmUgPSBkaXJlY3RpdmUubWF0Y2goZGlyZWN0aXZlUmVnKTtcblxuICBpZiAoIW1hdGNoRGlyZWN0aXZlKSByZXR1cm47XG5cbiAgY29uc3QgbmFtZSA9IG1hdGNoRGlyZWN0aXZlWzFdO1xuICBjb25zdCBhcmcgPSBtYXRjaERpcmVjdGl2ZVszXTtcblxuICBpZiAoZGlyZWN0aXZlc1tuYW1lXSkge1xuICAgIGRpcmVjdGl2ZXNbbmFtZV0obm9kZSwgdm0sIGRpcmVjdGl2ZSwgZXhwcmVzc2lvbik7XG4gIH0gZWxzZSBpZiAoY3VzdG9tRGlyZWN0aXZlc1tuYW1lXSkge1xuICAgIHZtLnB1YnN1Yj8uc3Vic2NyaWJlKFwibW91bnRlZFwiLCAoKSA9PiB7XG4gICAgICB3YXRjaChcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBydW5JblNjb3BlKHZtLCBcInNjb3BlXCIsIGV4cHJlc3Npb24pO1xuICAgICAgICB9LFxuICAgICAgICAobmV3VmFsOiBhbnkpID0+IHtcbiAgICAgICAgICBjdXN0b21EaXJlY3RpdmVzW25hbWVdKG5vZGUsIHsgYXJnLCB2YWx1ZTogbmV3VmFsIH0pO1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaW1tZWRpYXRlOiB0cnVlLFxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBkaXJlY3RpdmVzID0ge1xuICBvbihub2RlOiBFbGVtZW50LCB2bTogVk0sIGRpcmVjdGl2ZTogc3RyaW5nLCBleHByZXNzaW9uOiBzdHJpbmcpIHtcbiAgICAvLyB6LW9uOmNsaWNrIC0+IGNsaWNrXG4gICAgLy8g5Ye95pWw6LCD55SoXG5cbiAgICBjb25zdCBtZXRob2RSZWcgPSAvXihcXHcrKShbKF0oKCw/WyQnXFx3J10rKSspWyldKT8vO1xuICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2UoL1xccy9nLCBcIlwiKTtcbiAgICBjb25zdCBtYXRjaE1ldGhvZCA9IGV4cHJlc3Npb24ubWF0Y2gobWV0aG9kUmVnKTtcblxuICAgIGlmICghbWF0Y2hNZXRob2QpIHJldHVybjtcblxuICAgIGNvbnN0IG1ldGhvZCA9IG1hdGNoTWV0aG9kWzFdO1xuICAgIGNvbnN0IG1ldGhvZEFyZ3M6IGFueVtdID0gW107XG5cbiAgICBjb25zdCBzaW5nbGVSZWcgPSAvXicoLiopJyQvO1xuICAgIGNvbnN0ICRldmVudFJlZyA9IC8oXFwkZXZlbnQpJC87XG4gICAgLy8g5aaC5p6c6IO95p+l5YiwJGV2ZW505bCx5oqK5L2N572u6K6w5LiL5p2lXG4gICAgbGV0ICRldmVudElkeCA9IC0xO1xuICAgIGlmIChtYXRjaE1ldGhvZCAmJiBtYXRjaE1ldGhvZFszXSkge1xuICAgICAgLy8g5Y676Zmk5ous5Y+3XG5cbiAgICAgIGNvbnN0IGFyZ3MgPSBtYXRjaE1ldGhvZFszXS5zcGxpdChcIixcIik7XG4gICAgICBhcmdzLmZvckVhY2goKGFyZykgPT4ge1xuICAgICAgICAvLyDljLnphY3liLDljZXlvJXlj7flsLHmmK/mma7pgJrnmoTlrZfnrKbkuLJcbiAgICAgICAgaWYgKHNpbmdsZVJlZy50ZXN0KGFyZykpIHtcbiAgICAgICAgICAvLyDljrvpmaTljZXlvJXlj7dcbiAgICAgICAgICBtZXRob2RBcmdzLnB1c2goYXJnLnJlcGxhY2Uoc2luZ2xlUmVnLCBcIiQxXCIpKTtcbiAgICAgICAgfSBlbHNlIGlmICgkZXZlbnRSZWcudGVzdChhcmcpKSB7XG4gICAgICAgICAgbWV0aG9kQXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgJGV2ZW50SWR4ID0gbWV0aG9kQXJncy5sZW5ndGggLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1ldGhvZEFyZ3MucHVzaChnZXRWYWx1ZUJ5UGF0aCh2bS4kZGF0YSwgYXJnKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBldmVudFR5cGUgPSBkaXJlY3RpdmUuc3BsaXQoXCI6XCIpWzFdO1xuXG4gICAgY29uc3QgZm4gPSB2bSAmJiB2bVttZXRob2RdO1xuICAgIGlmIChldmVudFR5cGUgJiYgZm4pIHtcbiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIChlKSA9PiB7XG4gICAgICAgIGlmICghIX4kZXZlbnRJZHgpIHtcbiAgICAgICAgICBtZXRob2RBcmdzLnNwbGljZSgkZXZlbnRJZHgsIDEsIGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbWV0aG9kQXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBtZXRob2RBcmdzLnB1c2goZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodm0sIC4uLm1ldGhvZEFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIG1vZGVsKG5vZGU6IEhUTUxJbnB1dEVsZW1lbnQsIHZtOiBWTSwgZGlyZWN0aXZlOiBzdHJpbmcsIGV4cHJlc3Npb246IHN0cmluZykge1xuICAgIC8vIFRPRE8gYmluZCBpbnB1dFxuXG4gICAgdGhpcy50ZXh0KG5vZGUsIHZtLCBkaXJlY3RpdmUsIGV4cHJlc3Npb24pO1xuXG4gICAgLy8g5aaC5p6c5pivaW5wdXRcbiAgICBpZiAoXG4gICAgICAobm9kZS50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgbm9kZS50eXBlID09PSBcInRleHRcIikgfHxcbiAgICAgIG5vZGUudGFnTmFtZSA9PT0gXCJURVhUQVJFQVwiXG4gICAgKSB7XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgc2V0VmFsdWVCeVBhdGgoXG4gICAgICAgICAgdm0uJGRhdGEsXG4gICAgICAgICAgZXhwcmVzc2lvbixcbiAgICAgICAgICAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWVcbiAgICAgICAgKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIOWmguaenOaYr2NoZWNrYm94XG4gICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gXCJJTlBVVFwiICYmIG5vZGUudHlwZSA9PT0gXCJjaGVja2JveFwiKSB7XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgIHNldFZhbHVlQnlQYXRoKFxuICAgICAgICAgIHZtLiRkYXRhLFxuICAgICAgICAgIGV4cHJlc3Npb24sXG4gICAgICAgICAgKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWRcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvL+WmguaenOaYr3JhZGlvXG4gICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gXCJJTlBVVFwiICYmIG5vZGUudHlwZSA9PT0gXCJyYWRpb1wiKSB7XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgIHNldFZhbHVlQnlQYXRoKFxuICAgICAgICAgIHZtLiRkYXRhLFxuICAgICAgICAgIGV4cHJlc3Npb24sXG4gICAgICAgICAgKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8g6YCa55So5Ye95pWw77yM5pei6YCC55Soei10ZXh077yM5Lmf6YCC55Soe3t0ZXh0fX1cbiAgdGV4dChcbiAgICBub2RlOiBOb2RlLFxuICAgIHZtOiBWTSxcbiAgICBfZGlyZWN0aXZlOiBzdHJpbmcsXG4gICAgZXhwcmVzc2lvbjogc3RyaW5nLFxuICAgIHJlcGxhY2UgPSBcIlwiXG4gICkge1xuICAgIGNvbnN0IHJlbmRlckZuID0gcmVuZGVyW1widGV4dFJlbmRlclwiXTtcblxuICAgIGlmIChyZW5kZXJGbikge1xuICAgICAgd2F0Y2goXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gcnVuSW5TY29wZSh2bSwgXCJzY29wZVwiLCBleHByZXNzaW9uKTtcbiAgICAgICAgfSxcbiAgICAgICAgKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgICAgcmVuZGVyRm4gJiYgcmVuZGVyRm4obm9kZSwgbmV3VmFsdWUsIHJlcGxhY2UpO1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaW1tZWRpYXRlOiB0cnVlLFxuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cbiAgfSxcblxuICBpZihub2RlOiBIVE1MRWxlbWVudCwgdm06IFZNLCBfZGlyZWN0aXZlOiBzdHJpbmcsIGV4cHJlc3Npb246IHN0cmluZykge1xuICAgIGNvbnN0IG5leHQgPSBub2RlLm5leHRFbGVtZW50U2libGluZztcblxuICAgIGxldCBlbHNlTm9kZTogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgICBpZiAobmV4dCAmJiBuZXh0LmdldEF0dHJpYnV0ZShcInotZWxzZVwiKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbHNlTm9kZSA9IG5leHQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgY29uc3QgdXBkYXRlZCA9IChuZXd2YWx1ZTogYm9vbGVhbikgPT4ge1xuICAgICAgaWYgKG5ld3ZhbHVlKSB7XG4gICAgICAgIG5vZGUuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgZWxzZU5vZGUgJiYgKGVsc2VOb2RlLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgZWxzZU5vZGUgJiYgKGVsc2VOb2RlLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCIpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHJldHVybiAhIXJ1bkluU2NvcGUodm0sIFwic2NvcGVcIiwgZXhwcmVzc2lvbik7XG4gICAgICB9LFxuICAgICAgdXBkYXRlZCxcbiAgICAgIHtcbiAgICAgICAgaW1tZWRpYXRlOiB0cnVlLFxuICAgICAgfVxuICAgICk7XG4gIH0sXG5cbiAgZm9yKG5vZGU6IEhUTUxFbGVtZW50LCB2bTogVk0sIF9kaXJlY3RpdmU6IHN0cmluZywgZXhwcmVzc2lvbjogc3RyaW5nKSB7XG4gICAgLy/ljrvpmaTnqbrmoLxcbiAgICBleHByZXNzaW9uID0gZXhwcmVzc2lvbi5yZXBsYWNlKC9cXHMvZywgXCJcIik7XG4gICAgY29uc3QgUkVGX0xJU1RfRk9SID0gLyhbKF0oXFx3KygsXFx3Kyk/KVspXXwoXFx3KykpaW4oXFx3KykvO1xuICAgIGNvbnN0IGZvck1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaChSRUZfTElTVF9GT1IpO1xuXG4gICAgaWYgKGZvck1hdGNoKSB7XG4gICAgICBjb25zdCBbLCAsIHZhbHVlcywgLCAsIGxpc3RdID0gZm9yTWF0Y2g7XG4gICAgICBsZXQgdmFsdWUgPSBmb3JNYXRjaFsxXTtcbiAgICAgIGxldCBpbmRleDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICAvLyDljrvlt6blj7Pmi6zlj7dcbiAgICAgICAgW3ZhbHVlLCBpbmRleF0gPSB2YWx1ZXMuc3BsaXQoXCIsXCIpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZW5kZXJGb3IgPSByZW5kZXIuZm9yUmVuZGVyKG5vZGUpO1xuICAgICAgZWZmZWN0KCgpID0+IHtcbiAgICAgICAgcmVuZGVyRm9yKHZhbHVlLCBpbmRleCwgcnVuSW5TY29wZSh2bSwgXCJzY29wZVwiLCBsaXN0KSwgdm0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIGJpbmQobm9kZTogTm9kZSwgdm06IFZNLCBkaXJlY3RpdmU6IHN0cmluZywgZXhwcmVzc2lvbjogc3RyaW5nKSB7XG4gICAgY29uc3QgZGlyU3BsaXQgPSBkaXJlY3RpdmUuc3BsaXQoXCI6XCIpO1xuXG4gICAgY29uc3QgZGlyID0gZGlyU3BsaXQubGVuZ3RoID4gMSA/IGRpclNwbGl0WzFdIDogZGlyZWN0aXZlO1xuICAgIGNvbnNvbGUubG9nKGRpcik7XG5cbiAgICBsZXQgcmVuZGVyRm4gPSByZW5kZXJbZGlyICsgXCJSZW5kZXJcIl07XG4gICAgaWYgKCFyZW5kZXJGbikge1xuICAgICAgcmVuZGVyRm4gPSByZW5kZXIuYXR0clJlbmRlcihkaXIpO1xuICAgIH1cbiAgICBpZiAocmVuZGVyRm4pIHtcbiAgICAgIGVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHJlbmRlckZuKG5vZGUsIHJ1bkluU2NvcGUodm0sIFwic2NvcGVcIiwgZXhwcmVzc2lvbikpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxufTtcbiIsImltcG9ydCB7IGNyZWF0ZUFwcCB9IGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBWTSB9IGZyb20gXCIuLi96dm0vdHlwZVwiO1xuaW1wb3J0IHsgZGlyZWN0aXZlcywgdHJpZ2dlckRpcmVjdGl2ZSB9IGZyb20gXCIuL2RpcmVjdGl2ZXNcIjtcbmNvbnN0IERJUl9SRUcgPSAvXnotLztcbmNvbnN0IERJUl9GT1JfUkVHID0gL156LWZvci87XG5leHBvcnQgY2xhc3MgQ29tcGlsZSB7XG4gIG5vZGU6IE5vZGU7XG4gIHZtOiBWTTtcbiAgLy8g6K6+572u5qCH6K6w5Y+Y6YeP77yM5a+55LqOdi1mb3LnmoTlrZDlhYPntKDvvIzkuI3pnIDopoHnu6fnu63mt7HluqbpgY3ljoZcbiAgbmVlZERlZXBDb21waWxlID0gdHJ1ZTtcbiAgZnJhZzogRG9jdW1lbnRGcmFnbWVudDtcbiAgb3B0aW9uczogYW55O1xuICBjb25zdHJ1Y3Rvcihub2RlOiBOb2RlLCB2bTogVk0sIG9wdGlvbnMgPSB7IGNvbXBpbGVSb290OiBmYWxzZSB9KSB7XG4gICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICB0aGlzLnZtID0gdm07XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmZyYWcgPSB0aGlzLm5vZGVUb0ZyYWdtZW50KHRoaXMubm9kZSk7XG5cbiAgICBvcHRpb25zLmNvbXBpbGVSb290ICYmIHRoaXMuY29tcGlsZU5vZGUodGhpcy5ub2RlLCB0aGlzLnZtKTtcbiAgICAvLyDop6PlhrN6LWZvcueahOiKgueCueacque8luivkeeahOmXrumimFxuICAgIHRoaXMuY29tcGlsZUZyYWcodGhpcy5mcmFnLCB0aGlzLnZtKTtcbiAgICAvLyB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQodGhpcy5mcmFnKTtcbiAgfVxuXG4gIC8vIOaMgui9veiKgueCue+8jOWmguaenOS8oOWFpWVs77yM5YiZ5oyC6L295YiwZWzvvIzlkKbliJnmjILovb3liLBub2RlXG4gIG1vdW50KGVsPzogc3RyaW5nKSB7XG4gICAgaWYgKGVsKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgICBlbGVtZW50ICYmIGVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5mcmFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKHRoaXMuZnJhZyk7XG4gICAgfVxuICAgIHRoaXMudm0ucHVic3ViPy5wdWJsaXNoKFwibW91bnRlZFwiKTtcbiAgfVxuXG4gIGdldEZyYWdtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmZyYWc7XG4gIH1cblxuICAvLyDoioLngrnovazmjaLmiJBmcmFnbWVudFxuICBub2RlVG9GcmFnbWVudChub2RlOiBOb2RlKSB7XG4gICAgY29uc3QgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBsZXQgY2hpbGQ6IENoaWxkTm9kZSB8IG51bGw7XG5cbiAgICB3aGlsZSAoKGNoaWxkID0gbm9kZS5maXJzdENoaWxkKSkge1xuICAgICAgZnJhZy5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiBmcmFnO1xuICB9XG5cbiAgLy8g57yW6K+R5YWl5Y+jXG4gIGNvbXBpbGVGcmFnKGZyYWc6IERvY3VtZW50RnJhZ21lbnQgfCBIVE1MRWxlbWVudCB8IE5vZGUsIHZtOiBWTSkge1xuICAgIGNvbnN0IGNoaWxkTm9kZXMgPSBmcmFnLmNoaWxkTm9kZXM7XG5cbiAgICBBcnJheS5mcm9tKGNoaWxkTm9kZXMpLmZvckVhY2goKG5vZGU6IE5vZGUpID0+IHtcbiAgICAgIHRoaXMuY29tcGlsZU5vZGUobm9kZSwgdm0pO1xuICAgICAgLy8g5aaC5p6c5pyJ5a2Q6IqC54K55LiUbmVlZERlZXBDb21waWxl5Li6dHJ1Ze+8jOWImee7p+e7rea3seW6pumBjeWOhlxuICAgICAgaWYgKG5vZGUuY2hpbGROb2RlcyAmJiBub2RlLmNoaWxkTm9kZXMubGVuZ3RoICYmIHRoaXMubmVlZERlZXBDb21waWxlKSB7XG4gICAgICAgIHRoaXMuY29tcGlsZUZyYWcobm9kZSBhcyBIVE1MRWxlbWVudCwgdm0pO1xuICAgICAgfVxuICAgICAgdGhpcy5uZWVkRGVlcENvbXBpbGUgPSB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgLy8g57yW6K+R6IqC54K5XG4gIGNvbXBpbGVOb2RlKG5vZGU6IE5vZGUsIHZtOiBWTSkge1xuICAgIGlmICh2bS4kY29tcG9uZW50cyAmJiB2bS4kY29tcG9uZW50c1tub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIue7hOS7tlwiKTtcbiAgICAgIGNvbnN0IHBhcnNlTm9kZSA9IGNyZWF0ZUFwcCh2bS4kY29tcG9uZW50c1tub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKTtcbiAgICAgIGNvbnN0IGZyYWcgPSBwYXJzZU5vZGUudm0uY29tcGlsZSEuZ2V0RnJhZ21lbnQoKTtcblxuICAgICAgbm9kZS5wYXJlbnROb2RlPy5yZXBsYWNlQ2hpbGQoZnJhZywgbm9kZSk7XG4gICAgICBjb25zb2xlLmxvZyhmcmFnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgIC8v5YWD57Sg6IqC54K5XG4gICAgICB0aGlzLmNvbXBpbGVFbGVtZW50KG5vZGUgYXMgSFRNTEVsZW1lbnQsIHZtKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIHRoaXMuY29tcGlsZVRleHQobm9kZSBhcyBUZXh0LCB2bSk7XG4gICAgfVxuICB9XG5cbiAgLy8g57yW6K+R5paH5pys6IqC54K5XG4gIGNvbXBpbGVUZXh0KG5vZGU6IFRleHQsIHZtOiBWTSkge1xuICAgIGNvbnN0IHRleHQgPSBub2RlLnRleHRDb250ZW50O1xuICAgIGlmICghdGV4dCkgcmV0dXJuO1xuICAgIGNvbnN0IHJlZyA9IC9cXHtcXHsoLiopXFx9XFx9LztcbiAgICBjb25zdCByZXMgPSByZWcuZXhlYyh0ZXh0KTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBkaXJlY3RpdmVzW1widGV4dFwiXShub2RlLCB2bSwgXCJ0ZXh0XCIsIHJlc1sxXSwgcmVzWzBdKTtcbiAgICB9XG4gIH1cblxuICAvLyDnvJbor5HlhYPntKDoioLngrlcbiAgY29tcGlsZUVsZW1lbnQobm9kZTogSFRNTEVsZW1lbnQsIHZtOiBWTSkge1xuICAgIGNvbnN0IGF0dHIgPSBBcnJheS5mcm9tKG5vZGUuYXR0cmlidXRlcyk7XG5cbiAgICBjb25zdCBpc1pGb3IgPSBhdHRyLmZpbmRJbmRleCgoYXR0cjogQXR0cikgPT4ge1xuICAgICAgcmV0dXJuIERJUl9GT1JfUkVHLnRlc3QoYXR0ci5ub2RlTmFtZSk7XG4gICAgfSk7XG4gICAgLy8g5aaC5p6c5pivdi1mb3LvvIzliJnkuI3pnIDopoHnu6fnu63mt7HluqbpgY3ljobvvIzlj6rpnIDopoHnvJbor5F6LWZvcu+8jOWFtuS7lueahOaMh+S7pOWcqHotZm9y5YaF6YOo6L+b6KGM57yW6K+RXG4gICAgaWYgKCEhfmlzWkZvcikge1xuICAgICAgdGhpcy5uZWVkRGVlcENvbXBpbGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuY29tcGlsZURpcmVjdGl2ZShub2RlLCB2bSwgYXR0cltpc1pGb3JdKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBBcnJheS5mcm9tKG5vZGUuYXR0cmlidXRlcykuZm9yRWFjaCgoYXR0cjogQXR0cikgPT4ge1xuICAgICAgdGhpcy5jb21waWxlRGlyZWN0aXZlKG5vZGUsIHZtLCBhdHRyKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIOe8luivkeaMh+S7pFxuICBjb21waWxlRGlyZWN0aXZlKG5vZGU6IEhUTUxFbGVtZW50LCB2bTogVk0sIGF0dHI6IEF0dHIpIHtcbiAgICBjb25zdCBkaXJlY3RpdmUgPSBhdHRyLm5vZGVOYW1lO1xuICAgIGNvbnN0IGV4cHJlc3Npb24gPSBhdHRyLm5vZGVWYWx1ZSB8fCBcIlwiO1xuICAgIGlmIChESVJfUkVHLnRlc3QoZGlyZWN0aXZlKSkge1xuICAgICAgLy8g5a+75om+6K+l5oyH5LukXG5cbiAgICAgIHRyaWdnZXJEaXJlY3RpdmUobm9kZSwgdm0sIGRpcmVjdGl2ZSwgZXhwcmVzc2lvbik7XG5cbiAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGRpcmVjdGl2ZSk7XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgUHViU3ViIHtcbiAgc3Vic2NyaWJlcnM6IHtcbiAgICBbdG9waWM6IHN0cmluZ106IFNldDwoZGF0YTogYW55KSA9PiBhbnk+O1xuICB9O1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzID0ge307XG4gIH1cbiAgc3Vic2NyaWJlKHRvcGljOiBzdHJpbmcsIGNhbGxiYWNrOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpIHtcbiAgICBpZiAoIXRoaXMuc3Vic2NyaWJlcnNbdG9waWNdKSB7XG4gICAgICB0aGlzLnN1YnNjcmliZXJzW3RvcGljXSA9IG5ldyBTZXQoKTtcbiAgICB9XG4gICAgdGhpcy5zdWJzY3JpYmVyc1t0b3BpY10uYWRkKGNhbGxiYWNrKTtcbiAgfVxuICBwdWJsaXNoKHRvcGljOiBzdHJpbmcsIGRhdGE6IGFueSA9IFwiXCIpIHtcbiAgICBpZiAodGhpcy5zdWJzY3JpYmVyc1t0b3BpY10pIHtcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnNbdG9waWNdLmZvckVhY2goKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21waWxlIH0gZnJvbSBcIi4uL2NvbXBpbGUvY29tcGlsZVwiO1xuaW1wb3J0IHsgUHViU3ViIH0gZnJvbSBcIi4uL3B1YnN1Yi9wdWJzdWJcIjtcbmltcG9ydCB7IHJlYWN0aXZlIH0gZnJvbSBcIi4uL3JlYWN0aXZpdHkvcmVhY3RpdmVcIjtcbmltcG9ydCB7IEFwcCwgVk0sIFp2bU9wdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyByZWdpc3RlckRpcmVjdGl2ZSB9IGZyb20gXCIuLi9jb21waWxlL2RpcmVjdGl2ZXNcIjtcblxuLy8g5Yid5aeL5YyWdm1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWTShcbiAgb3B0aW9uczogWnZtT3B0aW9ucyxcbiAgcGFyZW50Vk0gPSB7fSxcbiAgbmVlZFByb3h5ID0gdHJ1ZVxuKTogVk0ge1xuICBjb25zdCB2bTogVk0gPSBPYmplY3QuY3JlYXRlKHBhcmVudFZNKTtcbiAgaWYgKG9wdGlvbnMudGVtcGxhdGUgfHwgb3B0aW9ucy5yZW5kZXIpIHtcbiAgICBpZiAob3B0aW9ucy50ZW1wbGF0ZSkge1xuICAgICAgdm0uJGVsID1cbiAgICAgICAgdHlwZW9mIG9wdGlvbnMudGVtcGxhdGUgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob3B0aW9ucy50ZW1wbGF0ZSkhXG4gICAgICAgICAgOiBvcHRpb25zLnRlbXBsYXRlO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5yZW5kZXIpIHtcbiAgICAgIHZtLiRlbCA9IG9wdGlvbnMucmVuZGVyLmNhbGwodm0sIGNyZWF0ZUVsZW1lbnRCeVN0cmluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcInRlbXBsYXRlIG9yIHJlbmRlciBub3QgZm91bmRcIik7XG4gIH1cbiAgaWYgKG9wdGlvbnMuZGF0YSkge1xuICAgIHZtLiRkYXRhID1cbiAgICAgIHR5cGVvZiBvcHRpb25zLmRhdGEgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IG5lZWRQcm94eVxuICAgICAgICAgID8gcmVhY3RpdmUob3B0aW9ucy5kYXRhKCkpXG4gICAgICAgICAgOiBvcHRpb25zLmRhdGEoKVxuICAgICAgICA6IG5lZWRQcm94eVxuICAgICAgICA/IHJlYWN0aXZlKG9wdGlvbnMuZGF0YSlcbiAgICAgICAgOiBvcHRpb25zLmRhdGE7XG4gIH1cbiAgaWYgKG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIE9iamVjdC5rZXlzKG9wdGlvbnMuY29tcG9uZW50cykubWFwKChrZXkpID0+IHtcbiAgICAgIHZtLiRjb21wb25lbnRzID0ge1xuICAgICAgICAuLi52bS4kY29tcG9uZW50cyxcbiAgICAgICAgW2tleS50b0xvd2VyQ2FzZSgpXTogb3B0aW9ucy5jb21wb25lbnRzIVtrZXldLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHZtLiRvcHRpb25zID0gb3B0aW9ucztcbiAgdm0ucHVic3ViID0gbmV3IFB1YlN1YigpO1xuICBpbml0TGlmdGN5Y2xlKHZtLCBvcHRpb25zKTtcbiAgT2JqZWN0LmtleXModm0uJGRhdGEpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIHByb3h5RGF0YSh2bSwga2V5KTtcbiAgfSk7XG4gIC8v5bCGbWV0aG9k5oyC6L295Yiwdm3kuIpcbiAgaWYgKG9wdGlvbnMubWV0aG9kcykge1xuICAgIE9iamVjdC5rZXlzKG9wdGlvbnMubWV0aG9kcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBwcm94eU1ldGhvZCh2bSwga2V5KTtcbiAgICB9KTtcbiAgfVxuICBpZiAob3B0aW9ucy5jb21wdXRlZCkge1xuICAgIGluaXRDb21wdXRlZCh2bSwgb3B0aW9ucy5jb21wdXRlZCk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuZGlyZWN0aXZlcykge1xuICAgIGluaXREcmlyZWN0aXZlcyh2bSwgb3B0aW9ucy5kaXJlY3RpdmVzKTtcbiAgfVxuICByZXR1cm4gdm07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBcHAob3B0aW9uczogWnZtT3B0aW9ucyk6IEFwcCB7XG4gIGNvbnN0IHZtID0gY3JlYXRlVk0ob3B0aW9ucyk7XG4gIHZtLnB1YnN1Yj8ucHVibGlzaChcImNyZWF0ZWRcIik7XG4gIGNvbnNvbGUubG9nKHZtKTtcblxuICB2bS5jb21waWxlID0gbmV3IENvbXBpbGUodm0uJGVsISwgdm0pO1xuICBjb25zdCBtb3VudCA9IChlbDogc3RyaW5nKSA9PiB7XG4gICAgdm0uY29tcGlsZSEubW91bnQoZWwpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIHZtLFxuICAgIG1vdW50LFxuICAgIGRpcmVjdGl2ZTogcmVnaXN0ZXJEaXJlY3RpdmUsXG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3h5RGF0YShjb250ZXh0OiBWTSwga2V5OiBzdHJpbmcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnRleHQsIGtleSwge1xuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6ICgpID0+IHtcbiAgICAgIHJldHVybiBjb250ZXh0LiRkYXRhW2tleV07XG4gICAgfSxcbiAgICBzZXQ6IChuZXdWYWwpID0+IHtcbiAgICAgIGNvbnRleHQuJGRhdGFba2V5XSA9IG5ld1ZhbDtcbiAgICB9LFxuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5pdExpZnRjeWNsZShjb250ZXh0OiBWTSwgb3B0aW9uczogWnZtT3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5jcmVhdGVkKSB7XG4gICAgY29udGV4dC5wdWJzdWI/LnN1YnNjcmliZShcImNyZWF0ZWRcIiwgb3B0aW9ucy5jcmVhdGVkLmJpbmQoY29udGV4dCkpO1xuICB9XG4gIGlmIChvcHRpb25zLm1vdW50ZWQpIHtcbiAgICBjb250ZXh0LnB1YnN1Yj8uc3Vic2NyaWJlKFwibW91bnRlZFwiLCBvcHRpb25zLm1vdW50ZWQuYmluZChjb250ZXh0KSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdERyaXJlY3RpdmVzKF9jb250ZXh0OiBWTSwgZGlyZWN0aXZlczogb2JqZWN0KSB7XG4gIGlmICh0eXBlb2YgZGlyZWN0aXZlcyA9PT0gXCJvYmplY3RcIikge1xuICAgIE9iamVjdC5rZXlzKGRpcmVjdGl2ZXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgcmVnaXN0ZXJEaXJlY3RpdmUoa2V5LCBkaXJlY3RpdmVzW2tleV0pO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb3h5TWV0aG9kKGNvbnRleHQ6IFZNLCBrZXk6IHN0cmluZykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udGV4dCwga2V5LCB7XG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogKCkgPT4ge1xuICAgICAgcmV0dXJuIGNvbnRleHQuJG9wdGlvbnM/Lm1ldGhvZHM/LltrZXldO1xuICAgIH0sXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQoY29udGV4dDogVk0sIGNvbXB1dGVkRm5zOiBvYmplY3QpIHtcbiAgaWYgKHR5cGVvZiBjb21wdXRlZEZucyA9PT0gXCJvYmplY3RcIikge1xuICAgIE9iamVjdC5rZXlzKGNvbXB1dGVkRm5zKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IGdldHRlciA9IGNvbXB1dGVkKGNvbXB1dGVkRm5zW2tleV0uYmluZChjb250ZXh0KSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udGV4dCwga2V5LCB7XG4gICAgICAgIC8vIOWmguaenOaYr+WHveaVsO+8jOebtOaOpeWwseS9nOS4umdldO+8jOWQpuWImeWPr+iDveaYr+S4gOS4quWvueixoe+8jOS9v+eUqOWvueixoeeahGdldFxuICAgICAgICAvLyB2YWx1ZTogY29tcHV0ZWQoY29tcHV0ZWRGbnNba2V5XS5iaW5kKGNvbnRleHQpKSxcbiAgICAgICAgZ2V0OiAoKSA9PiBnZXR0ZXIudmFsdWUsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50QnlTdHJpbmcoc3RyOiBzdHJpbmcpOiBFbGVtZW50IHtcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZGl2LmlubmVySFRNTCA9IHN0cjtcbiAgcmV0dXJuIGRpdiBhcyBFbGVtZW50O1xufVxuIiwiaW1wb3J0IHsgcmVhY3RpdmUgfSBmcm9tIFwiLi4vbWFpblwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZih2YWx1ZTogYW55KSB7XHJcbiAgY29uc3QgcmVmT2JqID0ge1xyXG4gICAgdmFsdWUsXHJcbiAgfTtcclxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVmT2JqLCBcIl9fdl9pc1JlZlwiLCB7XHJcbiAgICB2YWx1ZTogdHJ1ZSxcclxuICB9KTtcclxuICByZXR1cm4gcmVhY3RpdmUocmVmT2JqKTtcclxufVxyXG5cclxuLy8g5Y6f5aeL5YC85piv5rKh5rOV5ZON5bqU55qE77yM5pWF6L+Z6YeM6L+U5Zue5LiA5LiqZ2V0dGVy77yM5q+P5qyh6YO95ZCRXHJcbi8vIG9ialtrZXld6I635Y+W5YC877yM5LuO6ICM6L6+5Yiw5ZON5bqU5byPXHJcbmV4cG9ydCBmdW5jdGlvbiB0b1JlZihvYmo6IG9iamVjdCwga2V5OiBzdHJpbmcpIHtcclxuICBjb25zdCByZWZPYmogPSB7XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgIHJldHVybiBvYmpba2V5XTtcclxuICAgIH0sXHJcbiAgICBzZXQgdmFsdWUobmV3VmFsdWUpIHtcclxuICAgICAgb2JqW2tleV0gPSBuZXdWYWx1ZTtcclxuICAgIH0sXHJcbiAgfTtcclxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVmT2JqLCBcIl9fdl9pc1JlZlwiLCB7XHJcbiAgICB2YWx1ZTogdHJ1ZSxcclxuICB9KTtcclxuICByZXR1cm4gcmVmT2JqO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9SZWZzKG9iajogb2JqZWN0KSB7XHJcbiAgY29uc3QgcmVzID0ge307XHJcbiAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICByZXNba2V5XSA9IHRvUmVmKG9iaiwga2V5KTtcclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gcmVzO1xyXG59XHJcbiIsImV4cG9ydCAqIGZyb20gXCIuL3JlYWN0aXZpdHkvcmVhY3RpdmVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JlYWN0aXZpdHkvZWZmZWN0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yZWFjdGl2aXR5L2NvbXB1dGVkXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yZWFjdGl2aXR5L3dhdGNoXCI7XG5leHBvcnQgKiBmcm9tIFwiLi96dm0venZtXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yZWFjdGl2aXR5L3JlZlwiO1xuXG5jb25zb2xlLmxvZyhcInp2bSAwLjAuNFwiKTtcbiJdLCJuYW1lcyI6WyJnZXRUeXBlIiwib2JqIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSIsIlJBV19LRVkiLCJTeW1ib2wiLCJJVEVSQVRFX0tFWSIsIk1BUF9LRVlfSVRFUkFURV9LRVkiLCJUcmlnZ2VyVHlwZSIsImFjdGl2ZUVmZmVjdEZuIiwiYnVja2V0IiwiV2Vha01hcCIsImVmZmVjdEZuU3RhY2siLCJlZmZlY3QiLCJmbiIsIm9wdGlvbnMiLCJlZmZlY3RGbiIsImRlcHMiLCJpIiwibGVuZ3RoIiwiZGVsZXRlIiwiY2xlYW5VcCIsInB1c2giLCJyZXMiLCJwb3AiLCJsYXp5IiwidHJhY2siLCJ0YXJnZXQiLCJrZXkiLCJzaG91ZFRyYWNrIiwiZGVwc01hcCIsImdldCIsInNldCIsIk1hcCIsIlNldCIsImFkZCIsInRyaWdnZXIiLCJ0eXBlIiwiZWZmZWN0c1RvUnVuIiwiaXRlcmF0ZUVmZmVjdHMiLCJmb3JFYWNoIiwiQUREIiwiREVMRVRFIiwiU0VUIiwiaXRlcmF0ZUtleUVmZmVjdHMiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGhFZmZlY3RzIiwic2NoZWR1bGVyIiwibXV0YWJsZUluc3RydW1lbnRhdGlvbnMiLCJ2YWx1ZSIsInRoaXMiLCJoYXNWYWx1ZSIsImhhcyIsIm5ld1ZhbCIsImhhc0tleSIsInJlYWN0aXZlIiwib2xkVmFsIiwiY2FsbGJhY2tmbiIsInRoaXNBcmciLCJ2IiwiayIsIm0iLCJ3cmFwIiwiaXRlcmF0b3IiLCJpdHIiLCJuZXh0IiwiZG9uZSIsImVudHJpZXMiLCJ2YWx1ZXMiLCJrZXlzIiwidmFsIiwicmVhY3RpdmVNYXAiLCJjcmVhdGVSZWFjdGl2ZSIsImlzU2hhbGxvdyIsInByb3h5T2JqVHlwZSIsIlByb3h5IiwicmVjZWl2ZXIiLCJSZWZsZWN0IiwiYmluZCIsIk51bWJlciIsImhhc093blByb3BlcnR5Iiwib3duS2V5cyIsImRlbGV0ZVByb3BlcnR5IiwiZXhpc3RQcm94eSIsInByb3h5Iiwic2hhbGxvd1JlYWN0aXZlIiwiY29tcHV0ZWQiLCJnZXR0ZXIiLCJkaXJ0eSIsIndhdGNoIiwiaW1tZWRpYXRlIiwib25JbnZhbGlkYXRlIiwiam9iIiwiY29uc29sZSIsImxvZyIsInRyYXZlcnNlIiwiZmx1c2giLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJzZWVuIiwicmVuZGVyIiwidGV4dFJlbmRlciIsIm5vZGUiLCJ0ZXh0IiwicmVwbGFjZSIsIm5vZGVOYW1lIiwiaW5wdXRUeXBlIiwiZ2V0QXR0cmlidXRlIiwiY2hlY2tlZCIsImhhc093biIsImRlZmluZVByb3BlcnR5IiwidGV4dENvbnRlbnQiLCJvcmlnaW5UZXh0IiwiX3RleHRDb250ZW50IiwiY2xhc3NSZW5kZXIiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhdHRyUmVuZGVyIiwiYXR0ciIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImZvclJlbmRlciIsIl9jbG9uZU5vZGUiLCJjbG9uZU5vZGUiLCJfcGFyZW50Tm9kZSIsInBhcmVudE5vZGUiLCJfcHJldmlvdXNOb2RlIiwicHJldmlvdXNTaWJsaW5nIiwiZm9yTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluZGV4IiwiaXRlbXMiLCJ2bSIsImxhc3ROb2RlIiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJpbnNlcnRCZWZvcmUiLCJuZXh0U2libGluZyIsImFwcGVuZENoaWxkIiwiY2hpbGRWbSIsImNyZWF0ZVZNIiwidGVtcGxhdGUiLCJkYXRhIiwiQ29tcGlsZSIsImNvbXBpbGVSb290IiwibW91bnQiLCJzZXRWYWx1ZUJ5UGF0aCIsInBhdGgiLCJwYXRocyIsInNwbGl0IiwibGVuIiwicnVuSW5TY29wZSIsInNjb3BlIiwic2NvcGVOYW1lIiwiZXhwIiwiZnVuYyIsIkZ1bmN0aW9uIiwiYm9vbFJlZ2V4IiwiX2EiLCJiIiwiYyIsInRlc3QiLCJfd2l0aCIsImN1c3RvbURpcmVjdGl2ZXMiLCJyZWdpc3RlckRpcmVjdGl2ZSIsIm5hbWUiLCJkaXJlY3RpdmVzIiwib24iLCJkaXJlY3RpdmUiLCJleHByZXNzaW9uIiwibWF0Y2hNZXRob2QiLCJtYXRjaCIsIm1ldGhvZCIsIm1ldGhvZEFyZ3MiLCJzaW5nbGVSZWciLCIkZXZlbnRSZWciLCIkZXZlbnRJZHgiLCJhcmciLCJnZXRWYWx1ZUJ5UGF0aCIsIiRkYXRhIiwiZXZlbnRUeXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJzcGxpY2UiLCJtb2RlbCIsInRhZ05hbWUiLCJwcmV2ZW50RGVmYXVsdCIsIl9kaXJlY3RpdmUiLCJyZW5kZXJGbiIsIm5ld1ZhbHVlIiwiaWYiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJlbHNlTm9kZSIsInVuZGVmaW5lZCIsIm5ld3ZhbHVlIiwic3R5bGUiLCJkaXNwbGF5IiwiZm9yIiwiZm9yTWF0Y2giLCJsaXN0IiwicmVuZGVyRm9yIiwiZGlyU3BsaXQiLCJkaXIiLCJESVJfUkVHIiwiRElSX0ZPUl9SRUciLCJuZWVkRGVlcENvbXBpbGUiLCJmcmFnIiwiY29uc3RydWN0b3IiLCJub2RlVG9GcmFnbWVudCIsImNvbXBpbGVOb2RlIiwiY29tcGlsZUZyYWciLCJlbCIsImVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJwdWJzdWIiLCJwdWJsaXNoIiwiZ2V0RnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hpbGQiLCJmaXJzdENoaWxkIiwiY2hpbGROb2RlcyIsImZyb20iLCIkY29tcG9uZW50cyIsImNyZWF0ZUFwcCIsImNvbXBpbGUiLCJyZXBsYWNlQ2hpbGQiLCJub2RlVHlwZSIsImNvbXBpbGVFbGVtZW50IiwiY29tcGlsZVRleHQiLCJleGVjIiwiYXR0cmlidXRlcyIsImlzWkZvciIsImZpbmRJbmRleCIsImNvbXBpbGVEaXJlY3RpdmUiLCJub2RlVmFsdWUiLCJtYXRjaERpcmVjdGl2ZSIsInN1YnNjcmliZSIsInRyaWdnZXJEaXJlY3RpdmUiLCJQdWJTdWIiLCJzdWJzY3JpYmVycyIsInRvcGljIiwiY2FsbGJhY2siLCJwYXJlbnRWTSIsIm5lZWRQcm94eSIsImNyZWF0ZSIsIkVycm9yIiwiY29udGV4dCIsImNvbXB1dGVkRm5zIiwiJGVsIiwiY3JlYXRlRWxlbWVudEJ5U3RyaW5nIiwiY29tcG9uZW50cyIsIm1hcCIsIiRvcHRpb25zIiwiY3JlYXRlZCIsIm1vdW50ZWQiLCJpbml0TGlmdGN5Y2xlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsInByb3h5RGF0YSIsIm1ldGhvZHMiLCJwcm94eU1ldGhvZCIsIl9jb250ZXh0IiwiaW5pdERyaXJlY3RpdmVzIiwic3RyIiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInJlZiIsInJlZk9iaiIsInRvUmVmIiwidG9SZWZzIl0sIm1hcHBpbmdzIjoiQUFDTSxTQUFVQSxFQUFRQyxHQUN0QixPQUFPQyxPQUFPQyxVQUFVQyxTQUFTQyxLQUFLSixHQUFLSyxNQUFNLEdBQUksR0FBR0MsY0NGbkQsTUFBTUMsRUFBVUMsT0FBTyxXQUdqQkMsRUFBY0QsT0FBTyxXQUVyQkUsRUFBc0JGLE9BQU8sbUJDUTFDLElBQVlHLEVDUlosSUFBSUMsR0RRSixTQUFZRCxHQUNWQSxFQUFBQSxFQUFBLElBQUEsR0FBQSxNQUNBQSxFQUFBQSxFQUFBLElBQUEsR0FBQSxNQUNBQSxFQUFBQSxFQUFBLE9BQUEsR0FBQSxTQUhGLENBQVlBLElBQUFBLEVBSVgsS0NURCxNQUFNRSxFQUFnRCxJQUFJQyxRQUdwREMsRUFBaUMsWUFRdkJDLEVBQU9DLEVBQWdCQyxFQUF5QixJQUM5RCxNQUFNQyxFQUFxQixNQTJCN0IsU0FBaUJBLEdBQ2YsSUFBS0EsRUFBU0MsS0FBTSxPQUNwQixJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUYsRUFBU0MsS0FBS0UsT0FBUUQsSUFBSyxDQUNoQ0YsRUFBU0MsS0FBS0MsR0FFdEJFLE9BQU9KLEdBR2RBLEVBQVNDLEtBQUtFLE9BQVMsRUFq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\n\n\n//# sourceURL=webpack://example/../zvm/dist/es/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/text.js");
/******/ 	
/******/ })()
;