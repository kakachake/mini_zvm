/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/model.js":
/*!**********************!*\
  !*** ./src/model.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mini_zvm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mini-zvm */ \"../zvm/dist/es/main.js\");\n\n\nconst app = (0,mini_zvm__WEBPACK_IMPORTED_MODULE_0__.createApp)({\n  template: \"#app\",\n  data() {\n    return {\n      data: \"\",\n      checked: \"\",\n      picked: \"\",\n    };\n  },\n});\n\napp.mount(\"#app\");\n\n\n//# sourceURL=webpack://example/./src/model.js?");

/***/ }),

/***/ "../zvm/dist/es/main.js":
/*!******************************!*\
  !*** ../zvm/dist/es/main.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"computed\": () => (/* binding */ f),\n/* harmony export */   \"createApp\": () => (/* binding */ S),\n/* harmony export */   \"effect\": () => (/* binding */ r),\n/* harmony export */   \"reactive\": () => (/* binding */ p),\n/* harmony export */   \"shallowReactive\": () => (/* binding */ h),\n/* harmony export */   \"watch\": () => (/* binding */ m)\n/* harmony export */ });\nvar e;let t;!function(e){e[e.SET=0]=\"SET\",e[e.ADD=1]=\"ADD\",e[e.DELETE=2]=\"DELETE\"}(e||(e={}));const n=new WeakMap,o=Symbol(\"iterate\"),s=[];function r(e,n={}){const o=()=>{!function(e){if(!e.deps)return;for(let t=0;t<e.deps.length;t++){e.deps[t].delete(e)}e.deps.length=0}(o),t=o,s.push(o);const n=e();return s.pop(),t=s[s.length-1],n};return o.options=n,o.deps=[],n.lazy||o(),o}function i(e,o){if(!t||!l)return;const s=n.get(e)||n.set(e,new Map).get(e),r=s.get(o)||s.set(o,new Set).get(o);r.add(t),t.deps?t.deps.push(r):(t.deps=[]).push(r)}function c(s,r,{type:i}){const c=n.get(s);if(!c)return;const a=new Set,l=c.get(r),u=c.get(o);if(l&&l.forEach((e=>{a.add(e)})),i!==e.ADD&&i!==e.DELETE||u&&u.forEach((e=>{e!=t&&a.add(e)})),i===e.ADD&&Array.isArray(s)){const e=c.get(\"length\");e&&e.forEach((e=>{e!=t&&a.add(e)}))}a.forEach((e=>{t!==e&&(e.options&&e.options.scheduler?e.options.scheduler(e):e())}))}const a=Symbol(\"raw_key\"),l=!0,u=new Map;function d(t,{isShallow:n=!1}){return new Proxy(t,{get(e,t,o){if(\"__isProxy__\"===t)return!0;if(t===a)return e;\"symbol\"!=typeof t&&i(e,t);const s=Reflect.get(e,t,o);return n?s:\"object\"==typeof s&&null!==s?p(s):s},set(t,n,o,s){const r=t[n],i=Array.isArray(t)?Number(n)<t.length?e.SET:e.ADD:Object.prototype.hasOwnProperty.call(t,n)?e.SET:e.ADD,a=Reflect.set(t,n,o,s);return r!==o&&c(t,n,{type:i}),a},has:(e,t)=>(i(e,t),Reflect.has(e,t)),ownKeys:e=>(i(e,Array.isArray(e)?\"length\":o),Reflect.ownKeys(e)),deleteProperty(t,n){const o=Object.prototype.hasOwnProperty.call(t,n),s=Reflect.deleteProperty(t,n);return o&&s&&(Array.isArray(t)?c(t,n,{type:e.SET}):c(t,n,{type:e.DELETE})),s}})}function p(e){const t=u.get(e);if(t)return t;const n=d(e,{});return u.set(e,n),n}function h(e){return d(e,{isShallow:!0})}function f(t){let n,o=!0;const s=r(t,{lazy:!0,scheduler(){o||(o=!0,c(a,\"value\",{type:e.SET}))}}),a={get value(){return o&&(n=s(),o=!1),i(a,\"value\"),n}};return a}function m(e,t,n={immediate:!1}){let o,s,i;function c(e){i=e}function a(){i&&i(),i=null,s=l(),t(s,o,c),o=s}const l=r((()=>\"function\"==typeof e?e():(console.log(e),b(e))),{lazy:!0,scheduler:()=>{\"post\"===n.flush?Promise.resolve().then(a):a()}});n.immediate?a():o=l()}function b(e,t=new Set){if(\"object\"!=typeof e||null===e||t.has(e))return e;t.add(e);for(const n in e)b(e[n],t);return e}const g={textRender:(e,t,n)=>{if(\"INPUT\"===e.nodeName){const n=e.getAttribute(\"type\");if(\"radio\"===n){console.log(\"radio\");const n=e.value;return void(e.checked=t===n)}return\"checkbox\"===n?void(e.checked=!!t):void(e.value=t)}Object.hasOwn(e,\"_textContent\")||Object.defineProperty(e,\"_textContent\",{value:e.textContent});const o=e._textContent;e.textContent=n?o.replace(n,t)||\"\":void 0===t?\"\":t},classRender:(e,t)=>{for(const n in t)t[n]?e.classList.add(n):e.classList.remove(n)},attrRender:e=>(t,n)=>{!0===n?t.setAttribute(e,\"\"):!1===n?t.removeAttribute(e):t.setAttribute(e,n)},forRender:e=>{const t=e.cloneNode(!0),n=e.parentNode,o=e.previousSibling,s=[];return n?.removeChild(e),(e,r,i,c)=>{s.forEach((e=>{n?.removeChild(e)})),s.length=0;let a=o;for(let o=0;o<i.length;o++){if(!i[o])continue;const d=t.cloneNode(!0);d.removeAttribute(\"z-for\"),a?(l=d,(u=a)?.parentNode?.insertBefore(l,u.nextSibling)):n?.appendChild(d),a=d,s.push(d);const p=$({data:{[e]:i[o],[r]:o}},c);Object.setPrototypeOf(p,c),new N(d,p,{compileRoot:!0}).mount(),a=d}var l,u}}};function y(e,t,n){const o=t.split(\".\"),s=o.length;let r=0;for(;r<s-1;)e=e[o[r++]];e[o[r]]=n}function v(e,t,n){const o=new Function(t,\"return \"+function(e,t){t=t.replace(/\\s/g,\"\");const n=/(true|false|null|undefined)/g;return(t=\" \"+t).replace(/([\\(:,\\s\\+\\-\\*\\/%&\\|\\^!\\*~]\\s*?)(([a-zA-Z_$][a-zA-Z_$0-9]*))/g,((t,o,s)=>n.test(s)?o+s:o+e+\".\"+s))}(t,n));return o(e)}const E={};function w(e,t){E[e.toLowerCase()]=t}const A={on(e,t,n,o){const s=(o=o.replace(/\\s/g,\"\")).match(/^(\\w+)([(]((,?[$'\\w']+)+)[)])?/);if(!s)return;const r=s[1],i=[],c=/^'(.*)'$/,a=/(\\$event)$/;let l=-1;if(s&&s[3]){s[3].split(\",\").forEach((e=>{c.test(e)?i.push(e.replace(c,\"$1\")):a.test(e)?(i.push(e),l=i.length-1):i.push(function(e,t){const n=t.split(\".\"),o=n.length;let s=0;for(;s<o;)e=e[n[s++]];return e}(t.$data,e))}))}const u=n.split(\":\")[1],d=t&&t[r];u&&d&&e.addEventListener(u,(e=>(~l&&i.splice(l,1,e),i.length||i.push(e),d.call(t,...i))))},model(e,t,n,o){this.text(e,t,n,o),(\"INPUT\"===e.tagName&&\"text\"===e.type||\"TEXTAREA\"===e.tagName)&&e.addEventListener(\"input\",(e=>{y(t.$data,o,e.target.value),e.preventDefault()})),\"INPUT\"===e.tagName&&\"checkbox\"===e.type&&e.addEventListener(\"change\",(e=>{y(t.$data,o,e.target.checked)})),\"INPUT\"===e.tagName&&\"radio\"===e.type&&e.addEventListener(\"change\",(e=>{y(t.$data,o,e.target.value)}))},text(e,t,n,o,s=\"\"){const r=g.textRender;r&&m((()=>v(t,\"scope\",o)),(t=>{r&&r(e,t,s)}),{immediate:!0})},if(e,t,n,o){const s=e.nextElementSibling;let r=null;s&&void 0!==s.getAttribute(\"z-else\")&&(r=s);m((()=>!!v(t,\"scope\",o)),(t=>{t?(e.style.display=\"block\",r&&(r.style.display=\"none\")):(e.style.display=\"none\",r&&(r.style.display=\"block\"))}),{immediate:!0})},for(e,t,n,o){const s=(o=o.replace(/\\s/g,\"\")).match(/([(](\\w+(,\\w+)?)[)]|(\\w+))in(\\w+)/);if(s){const[,,n,,,o]=s;let i,c=s[1];n&&([c,i]=n.split(\",\"));const a=g.forRender(e);r((()=>{a(c,i,v(t,\"scope\",o),t)}))}},bind(e,t,n,o){const s=n.split(\":\"),i=s.length>1?s[1]:n;console.log(i);let c=g[i+\"Render\"];c||(c=g.attrRender(i)),c&&r((()=>{c(e,v(t,\"scope\",o))}))}},D=/^z-/,x=/^z-for/;class N{node;vm;needDeepCompile=!0;frag;options;constructor(e,t,n={compileRoot:!1}){this.node=e,this.vm=t,this.options=n,this.frag=this.nodeToFragment(this.node),n.compileRoot&&this.compileNode(this.node,this.vm),this.compileFrag(this.frag,this.vm)}mount(e){if(e){const t=document.querySelector(e);t&&t.appendChild(this.frag)}else this.node.appendChild(this.frag);this.vm.pubsub?.publish(\"mounted\")}nodeToFragment(e){const t=document.createDocumentFragment();let n;for(;n=e.firstChild;)t.appendChild(n);return t}compileFrag(e,t){const n=e.childNodes;Array.from(n).forEach((e=>{this.compileNode(e,t),e.childNodes&&e.childNodes.length&&this.needDeepCompile&&this.compileFrag(e,t),this.needDeepCompile=!0}))}compileNode(e,t){1===e.nodeType?this.compileElement(e,t):3===e.nodeType&&this.compileText(e,t)}compileText(e,t){const n=e.textContent;if(!n)return;const o=/\\{\\{(.*)\\}\\}/.exec(n);null!==o&&(console.log(A),A.text(e,t,\"text\",o[1],o[0]))}compileElement(e,t){const n=Array.from(e.attributes),o=n.findIndex((e=>x.test(e.nodeName)));if(~o)return this.needDeepCompile=!1,void this.compileDirective(e,t,n[o]);Array.from(e.attributes).forEach((n=>{this.compileDirective(e,t,n)}))}compileDirective(e,t,n){const o=n.nodeName,s=n.nodeValue||\"\";D.test(o)&&(!function(e,t,n,o){const s=n.match(/^z-(\\w+)\\s*(:(\\w*))?$/);if(!s)return;const r=s[1],i=s[3];A[r]?A[r](e,t,n,o):E[r]&&t.pubsub?.subscribe(\"mounted\",(()=>{m((()=>v(t,\"scope\",o)),(t=>{E[r](e,{arg:i,value:t})}),{immediate:!0})}))}(e,t,o,s),e.removeAttribute(o))}}class T{subscribers;constructor(){this.subscribers={}}subscribe(e,t){this.subscribers[e]||(this.subscribers[e]=new Set),this.subscribers[e].add(t)}publish(e,t=\"\"){this.subscribers[e]&&this.subscribers[e].forEach((e=>{e(t)}))}}function $(e,t={},n=!0){const o=Object.create(t);var s,r;return o.$el=document.querySelector(e.template),o.$data=\"function\"==typeof e.data?n?p(e.data()):e.data():n?p(e.data):e.data,o.$options=e,o.pubsub=new T,function(e,t){t.created&&e.pubsub?.subscribe(\"created\",t.created.bind(e));t.mounted&&e.pubsub?.subscribe(\"mounted\",t.mounted.bind(e))}(o,e),Object.keys(o.$data).forEach((e=>{!function(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$data[t],set:n=>{e.$data[t]=n}})}(o,e)})),e.methods&&Object.keys(e.methods).forEach((e=>{!function(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$options?.methods?.[t]})}(o,e)})),s=o,\"object\"==typeof(r=e.computed)&&Object.keys(r).forEach((e=>{Object.defineProperty(s,e,{value:f(r[e].bind(s))})})),o}function S(e){const t=$(e,this);t.pubsub?.publish(\"created\");return{vm:t,mount:e=>{new N(t.$el,t).mount(e)},directive:w}}console.log(\"zvm 0.0.3\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//# sourceURL=webpack://example/../zvm/dist/es/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/model.js");
/******/ 	
/******/ })()
;