/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/model.js":
/*!**********************!*\
  !*** ./src/model.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mini_zvm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mini-zvm */ \"../zvm/dist/es/main.js\");\n\n\nconst app = (0,mini_zvm__WEBPACK_IMPORTED_MODULE_0__.createApp)({\n  template: \"#app\",\n  data() {\n    return {\n      data: \"\",\n      checked: \"\",\n      picked: \"\",\n    };\n  },\n});\n\napp.mount(\"#app\");\n\n\n//# sourceURL=webpack://example/./src/model.js?");

/***/ }),

/***/ "../zvm/dist/es/main.js":
/*!******************************!*\
  !*** ../zvm/dist/es/main.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"computed\": () => (/* binding */ y),\n/* harmony export */   \"createApp\": () => (/* binding */ L),\n/* harmony export */   \"createVM\": () => (/* binding */ R),\n/* harmony export */   \"effect\": () => (/* binding */ a),\n/* harmony export */   \"reactive\": () => (/* binding */ b),\n/* harmony export */   \"ref\": () => (/* binding */ z),\n/* harmony export */   \"shallowReactive\": () => (/* binding */ g),\n/* harmony export */   \"shoudTrack\": () => (/* binding */ h),\n/* harmony export */   \"toRef\": () => (/* binding */ F),\n/* harmony export */   \"toRefs\": () => (/* binding */ I),\n/* harmony export */   \"track\": () => (/* binding */ p),\n/* harmony export */   \"trigger\": () => (/* binding */ l),\n/* harmony export */   \"watch\": () => (/* binding */ v)\n/* harmony export */ });\nfunction e(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}const t=Symbol(\"raw_key\"),n=Symbol(\"iterate\"),o=Symbol(\"map_key_iterate\");var s;let r;!function(e){e[e.SET=0]=\"SET\",e[e.ADD=1]=\"ADD\",e[e.DELETE=2]=\"DELETE\"}(s||(s={}));const i=new WeakMap,c=[];function a(e,t={}){const n=()=>{!function(e){if(!e.deps)return;for(let t=0;t<e.deps.length;t++){e.deps[t].delete(e)}e.deps.length=0}(n),r=n,c.push(n);const t=e();return c.pop(),r=c[c.length-1],t};return n.options=t,n.deps=[],t.lazy||n(),n}function p(e,t){if(!r||!h)return;const n=i.get(e)||i.set(e,new Map).get(e),o=n.get(t)||n.set(t,new Set).get(t);o.add(r),r.deps?r.deps.push(o):(r.deps=[]).push(o)}function l(t,c,{type:a}){const p=i.get(t);if(!p)return;const l=new Set,d=p.get(c),u=p.get(n);if(d&&d.forEach((e=>{l.add(e)})),(a===s.ADD||a===s.DELETE||a===s.SET&&\"map\"===e(t))&&u&&u.forEach((e=>{e!=r&&l.add(e)})),(a===s.ADD||a===s.DELETE)&&\"map\"===e(t)){const e=p.get(o);e&&e.forEach((e=>{e!=r&&l.add(e)}))}if(a===s.ADD&&Array.isArray(t)){const e=p.get(\"length\");e&&e.forEach((e=>{e!=r&&l.add(e)}))}l.forEach((e=>{r!==e&&(e.options&&e.options.scheduler?e.options.scheduler(e):e())}))}const d={add(e){const n=this[t],o=n.has(e),r=e[t]||e,i=n.add(r);return o||l(n,e,{type:s.ADD}),i},delete(e){const n=this[t],o=n.has(e),r=n.delete(e);return o&&l(n,e,{type:s.DELETE}),r},get(e){const n=this[t],o=n.has(e);if(p(n,e),o){const t=n.get(e);return\"object\"==typeof t?b(t):t}},set(e,n){const o=this[t],r=o.has(e),i=o.get(e),c=n[t]||n,a=o.set(e,c);return r?(i!==n||i==i&&n==n)&&l(o,e,{type:s.SET}):l(o,e,{type:s.ADD}),a},forEach(e,o){const s=this[t];return p(s,n),s.forEach(((t,n,o)=>e(u(t),u(n),o)),o)},[Symbol.iterator](){const e=this[t];p(e,n);const o=e[Symbol.iterator]();return{next(){const{value:e,done:t}=o.next();return{value:e?[u(e[0]),u(e[1])]:e,done:t}},[Symbol.iterator](){return this}}},entries(){return this[Symbol.iterator]()},values:function(){const e=this[t],o=e.values();return p(e,n),{next(){const{value:e,done:t}=o.next();return{value:e?u(e):e,done:t}},[Symbol.iterator](){return this}}},keys:function(){const e=this[t],n=e.keys();return p(e,o),{next(){const{value:e,done:t}=n.next();return{value:e?u(e):e,done:t}},[Symbol.iterator](){return this}}}};const u=e=>\"object\"==typeof e?b(e):e,h=!0,m=new Map;function f(o,{isShallow:r=!1}){const i=e(o);return new Proxy(o,{get(e,o,s){if(\"__isProxy__\"===o)return!0;if(o===t)return e;if(\"set\"===i||\"map\"===i)return\"size\"===o?(p(e,n),Reflect.get(e,o,e)):d[o]?d[o]:e[o].bind(e);\"symbol\"!=typeof o&&p(e,o);const c=Reflect.get(e,o,s);return r?c:\"object\"==typeof c&&null!==c?b(c):c},set(e,t,n,o){const r=e[t],i=Array.isArray(e)?Number(t)<e.length?s.SET:s.ADD:Object.prototype.hasOwnProperty.call(e,t)?s.SET:s.ADD,c=Reflect.set(e,t,n,o);return r!==n&&l(e,t,{type:i}),c},has:(e,t)=>(p(e,t),Reflect.has(e,t)),ownKeys:e=>(p(e,Array.isArray(e)?\"length\":n),Reflect.ownKeys(e)),deleteProperty(e,t){const n=Object.prototype.hasOwnProperty.call(e,t),o=Reflect.deleteProperty(e,t);return n&&o&&(Array.isArray(e)?l(e,t,{type:s.SET}):l(e,t,{type:s.DELETE})),o}})}function b(e){const t=m.get(e);if(t)return t;const n=f(e,{});return m.set(e,n),n}function g(e){return f(e,{isShallow:!0})}function y(e){let t,n=!0;const o=a(e,{lazy:!0,scheduler(){n||(n=!0,l(r,\"value\",{type:s.SET}))}}),r={get value(){return n&&(t=o(),n=!1),p(r,\"value\"),t}};return r}function v(e,t,n={immediate:!1}){let o,s,r;function i(e){r=e}function c(){r&&r(),r=null,s=p(),t(s,o,i),o=s}const p=a((()=>\"function\"==typeof e?e():(console.log(e),E(e))),{lazy:!0,scheduler:()=>{\"post\"===n.flush?Promise.resolve().then(c):c()}});n.immediate?c():o=p()}function E(e,t=new Set){if(\"object\"!=typeof e||null===e||t.has(e))return e;t.add(e);for(const n in e)E(e[n],t);return e}const N=/^z-/,w=/^z-for/,C=/^z-bind/;const A={textRender:(e,t,n)=>{if(\"INPUT\"===e.nodeName){const n=e.getAttribute(\"type\");if(\"radio\"===n){console.log(\"radio\");const n=e.value;return void(e.checked=t===n)}return\"checkbox\"===n?void(e.checked=!!t):void(e.value=t)}Object.hasOwn(e,\"_textContent\")||Object.defineProperty(e,\"_textContent\",{value:e.textContent});const o=e._textContent;e.textContent=n?o.replace(n,t)||\"\":void 0===t?\"\":t},classRender:(e,t)=>{for(const n in t)t[n]?e.classList.add(n):e.classList.remove(n)},attrRender:e=>(t,n)=>{!0===n?t.setAttribute(e,\"\"):!1===n?t.removeAttribute(e):t.setAttribute(e,n)},forRender:e=>{const t=e.cloneNode(!0),n=e.parentNode,o=e.previousSibling,s=[];return n?.removeChild(e),(e,r,i,c)=>{s.forEach((e=>{n?.removeChild(e)})),s.length=0;let a=o;for(let o=0;o<i.length;o++){if(!i[o])continue;const d=t.cloneNode(!0);d.removeAttribute(\"z-for\"),a?(p=d,(l=a)?.parentNode?.insertBefore(p,l.nextSibling)):n?.appendChild(d),a=d,s.push(d);const u=R({template:d,data:r?{[e]:i[o],[r]:o}:{[e]:i[o]}},c);new P(d,u,{compileRoot:!0}).mount(),a=d}var p,l}}};function $(e,t,n){const o=t.split(\".\"),s=o.length;let r=0;for(;r<s-1;)e=e[o[r++]];e[o[r]]=n}function D(e,t,n){const o=new Function(t,\"return \"+function(e,t){t=t.replace(/\\s/g,\"\");const n=/(true|false|null|undefined)/g;return(t=\" \"+t).replace(/([\\(:,\\s\\+\\-\\*\\/%&\\|\\^!\\*~]\\s*?)(([a-zA-Z_$][a-zA-Z_$0-9]*))/g,((t,o,s)=>n.test(s)?o+s:o+e+\".\"+s))}(t,n));return o(e)}const x={on(e,t,n,o,s){console.log(\"on\",n,o);const r=(o=o.replace(/\\s/g,\"\")).match(/^(\\w+)?/);if(console.log(\"matchMethod\",r),!r)return;const i=r[1],c=n.split(\":\")[1],a=t&&t[i];if(c&&a){const e=(...e)=>{a.apply(t,e)},n=t.pubsub?.subscribe(c,e);s.forEach((e=>{e.vm.$emit=(e,...n)=>{t.pubsub?.publish(e,...n)},e.vm._unsubscribes.add(n)}))}},model(e,t,n,o){this.text(e,t,n,o),(\"INPUT\"===e.tagName&&\"text\"===e.type||\"TEXTAREA\"===e.tagName)&&e.addEventListener(\"input\",(e=>{$(t.$data,o,e.target.value),e.preventDefault()})),\"INPUT\"===e.tagName&&\"checkbox\"===e.type&&e.addEventListener(\"change\",(e=>{$(t.$data,o,e.target.checked)})),\"INPUT\"===e.tagName&&\"radio\"===e.type&&e.addEventListener(\"change\",(e=>{$(t.$data,o,e.target.value)}))},text(e,t,n,o,s=\"\"){const r=A.textRender;r&&v((()=>D(t,\"scope\",o)),(t=>{r&&r(e,t,s)}),{immediate:!0})},if(e,t,n,o,s){let r;v((()=>!!D(t,\"scope\",o)),(e=>{e?(r=s.createCompApp(),s.mounted(r)):s.unmounted(r)}),{immediate:!0})},for(e,t,n,o){const s=(o=o.replace(/\\s/g,\"\")).match(/([(](\\w+(,\\w+)?)[)]|(\\w+))in(\\w+)/);if(s){const[,,n,,,o]=s;let r,i=s[1];n&&([i,r]=n.split(\",\"));const c=A.forRender(e);a((()=>{c(i,r,D(t,\"scope\",o),t)}))}},bind(e,t,n,o,{props:s,attrs:r}){const i=n.split(\":\"),c=i.length>1?i[1]:n;if(console.log(s),s.hasOwnProperty(c)){const e=D(t,\"scope\",o);console.log(e),Object(e)instanceof s[c].type?Object.defineProperty(s[c],\"default\",{enumerable:!0,configurable:!0,get:()=>D(t,\"scope\",o)}):console.warn(`${c} is not a ${s[c].type.name}`)}else Object.defineProperty(r,c,{enumerable:!0,configurable:!0,get:()=>D(t,\"scope\",o)})}};class T{componentName;node;parentVm;comment;apps=new Set;attrs=new Map;props={};component;constructor(e,t){if(this.node=e,this.parentVm=t,this.componentName=e.nodeName.toLowerCase(),this.component=this.parentVm.$components?.[this.componentName],!this.component)throw new Error(`component ${this.componentName} not found`);this.initAttrs(),this.initApp()}createCompApp(){const e=L(this.component);return e.vm._runCompile(),this.apps.add(e),e}mounted(e){this.compileDirectives(),e.vm.compile?.mount(this.node,!0)}unmounted(e){e&&(e.destroy&&e.destroy(),this.apps.delete(e),this.node.parentNode?.replaceChild(this.comment,this.node))}initApp(){const e=this.component.props,t=this.component.attrs;if(this.attrs.forEach(((n,o)=>{C.test(o)&&(x.bind(this.node,this.parentVm,o,n,{props:e||{},attrs:t||{}}),this.attrs.delete(o))})),this.attrs.get(\"z-if\"))this.comment=document.createComment(\"z-if\"),this.node.parentNode?.replaceChild(this.comment,this.node),this.node=this.comment,x.if(this.node,this.parentVm,\"if\",this.attrs.get(\"z-if\")||\"\",this),this.attrs.delete(\"z-if\");else{const e=this.createCompApp();this.mounted(e)}}initAttrs(){Array.from(this.node.attributes).forEach((e=>{const t=e.nodeName,n=e.nodeValue||\"\";this.attrs.set(t,n)}))}compileDirectives(){this.attrs.forEach(((e,t)=>{if(N.test(t)){const n=t,o=e;!function(e,t,n,o,s){const{name:r,arg:i}=function(e){const t=e.match(/^z-(\\w+)\\s*(:(\\w*))?$/);return t?{name:t[1],arg:t[3]}:{}}(n);r&&i&&(console.log(\"triggerCompDirective\",r,i),x[r]&&x[r](e,t,n,o,s))}(this.node,this.parentVm,n,o,this.apps)}else this.apps.forEach((n=>{n.vm.$attrs[t]=e}))}))}}const S={};function j(e,t){S[e.toLowerCase()]=t}const O={on(e,t,n,o){const s=(o=o.replace(/\\s/g,\"\")).match(/^(\\w+)([(]((,?[$'\\w']+)+)[)])?/);if(!s)return;const r=s[1],i=[],c=/^'(.*)'$/,a=/(\\$event)$/;let p=-1;if(s&&s[3]){s[3].split(\",\").forEach((e=>{c.test(e)?i.push(e.replace(c,\"$1\")):a.test(e)?(i.push(e),p=i.length-1):i.push(function(e,t){const n=t.split(\".\"),o=n.length;let s=0;for(;s<o;)e=e[n[s++]];return e}(t.$data,e))}))}const l=n.split(\":\")[1],d=t&&t[r];l&&d&&e.addEventListener(l,(e=>(~p&&i.splice(p,1,e),i.length||i.push(e),d.call(t,...i))))},model(e,t,n,o){this.text(e,t,n,o),(\"INPUT\"===e.tagName&&\"text\"===e.type||\"TEXTAREA\"===e.tagName)&&e.addEventListener(\"input\",(e=>{$(t.$data,o,e.target.value),e.preventDefault()})),\"INPUT\"===e.tagName&&\"checkbox\"===e.type&&e.addEventListener(\"change\",(e=>{$(t.$data,o,e.target.checked)})),\"INPUT\"===e.tagName&&\"radio\"===e.type&&e.addEventListener(\"change\",(e=>{$(t.$data,o,e.target.value)}))},text(e,t,n,o,s=\"\"){const r=A.textRender;r&&v((()=>D(t,\"scope\",o)),(t=>{r&&r(e,t,s)}),{immediate:!0})},if(e,t,n,o){const s=e.nextElementSibling;let r=null;s&&void 0!==s.getAttribute(\"z-else\")&&(r=s);v((()=>!!D(t,\"scope\",o)),(t=>{t?(e.style.display=\"block\",r&&(r.style.display=\"none\")):(e.style.display=\"none\",r&&(r.style.display=\"block\"))}),{immediate:!0})},for(e,t,n,o){console.log(\"for\");const s=(o=o.replace(/\\s/g,\"\")).match(/([(](\\w+(,\\w+)?)[)]|(\\w+))in(\\w+)/);if(s){const[,,n,,,o]=s;let r,i=s[1];n&&([i,r]=n.split(\",\"));const c=A.forRender(e);a((()=>{c(i,r,D(t,\"scope\",o),t)}))}},bind(e,t,n,o){const s=n.split(\":\"),r=s.length>1?s[1]:n;console.log(r);let i=A[r+\"Render\"];i||(i=A.attrRender(r)),i&&a((()=>{i(e,D(t,\"scope\",o))}))}};class P{node;vm;needDeepCompile=!0;frag;options;mountType;mountNode;parentNode;constructor(e,t,n={compileRoot:!1}){this.vm=t,this.options=n,this.frag=this.nodeToFragment(e),this.mountNode=e,this.node=this.frag.children[0],this.parentNode=this.node.parentNode,n.compileRoot&&this.compileNode(this.node,this.vm),this.compileFrag(this.frag,this.vm)}mount(e,t){if(!e||\"boolean\"==typeof e)return this.mountNode.appendChild(this.frag),void(this.mountNode=this.node);\"string\"==typeof e&&(e=document.querySelector(e)||\"\"),\"string\"!=typeof e&&(e&&t?(this.parentNode=e.parentNode,this.parentNode?.replaceChild(this.node,e)):e&&e.appendChild(this.frag),this.mountNode=e,this.mountType=t?\"replace\":\"append\",this.vm.pubsub?.publish(\"mounted\"))}unmounted(){console.log(this.mountNode),console.log(this.node),\"append\"===this.mountType?this.mountNode?.removeChild(this.node):this.parentNode?.replaceChild(this.mountNode,this.node),this.vm.pubsub?.publish(\"unmounted\")}removeChilds(e){for(;e.firstChild;)e.firstChild.childNodes.length&&this.removeChilds(e.firstChild),e.removeChild(e.firstChild)}getFragment(){return this.frag}nodeToFragment(e){const t=document.createDocumentFragment();let n;for(;n=e.firstChild;)t.appendChild(n);return t}compileFrag(e,t){const n=e.childNodes;Array.from(n).forEach((e=>{this.compileNode(e,t),e.childNodes&&e.childNodes.length&&this.needDeepCompile&&this.compileFrag(e,t),this.needDeepCompile=!0}))}compileNode(e,t){t.$components&&t.$components[e.nodeName.toLowerCase()]?new T(e,t):1===e.nodeType?this.compileElement(e,t):3===e.nodeType&&this.compileText(e,t)}compileText(e,t){const n=e.textContent;if(!n)return;const o=/\\{\\{(.*)\\}\\}/.exec(n);null!==o&&O.text(e,t,\"text\",o[1],o[0])}compileElement(e,t){const n=Array.from(e.attributes),o=n.findIndex((e=>w.test(e.nodeName)));if(~o)return this.needDeepCompile=!1,void this.compileDirective(e,t,n[o]);Array.from(e.attributes).forEach((n=>{this.compileDirective(e,t,n)}))}compileDirective(e,t,n){const o=n.nodeName,s=n.nodeValue||\"\";N.test(o)&&(console.log(o),function(e,t,n,o){const{name:s,arg:r}=function(e){const t=e.match(/^z-(\\w+)\\s*(:(\\w*))?$/);return t?{name:t[1],arg:t[3]}:{}}(n);s&&(O[s]?O[s](e,t,n,o):S[s]&&t.pubsub?.subscribe(\"mounted\",(()=>{v((()=>D(t,\"scope\",o)),(t=>{S[s](e,{arg:r,value:t})}),{immediate:!0})})))}(e,t,o,s),e.removeAttribute(o))}}class _{subscribers;constructor(){this.subscribers={}}subscribe(e,t){return this.subscribers[e]||(this.subscribers[e]=new Set),this.subscribers[e].add(t),()=>{this.undsubscribe(e,t)}}publish(e,t=\"\"){this.subscribers[e]&&this.subscribers[e].forEach((e=>{e(t)}))}undsubscribe(e,t){this.subscribers[e]&&this.subscribers[e].delete(t)}}function R(e,t={},n=!0){const o=Object.create(t);if(!e.template&&!e.render)throw new Error(\"template or render not found\");var s;return e.template?o.$el=\"string\"==typeof e.template?document.querySelector(e.template):e.template:e.render&&(o.$el=e.render.call(o,k)),e.props&&(o.$props=e.props,s=o,Object.keys(s.$props).forEach((e=>{Object.defineProperty(s,e,{configurable:!0,enumerable:!0,get:()=>s.$props[e].default})}))),e.data&&(o.$data=\"function\"==typeof e.data?n?b(e.data()):e.data():n?b(e.data):e.data,function(e){Object.keys(e.$data).forEach((t=>{Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$data[t],set:n=>{e.$data[t]=n}})}))}(o)),e.components&&Object.keys(e.components).map((t=>{o.$components={...o.$components,[t.toLowerCase()]:e.components[t]}})),o.$options=e,o.pubsub=new _,o._unsubscribes=new Set,function(e,t){t.created&&e.pubsub?.subscribe(\"created\",t.created.bind(e));t.mounted&&e.pubsub?.subscribe(\"mounted\",t.mounted.bind(e))}(o,e),e.methods&&Object.keys(e.methods).forEach((e=>{!function(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$options?.methods?.[t]})}(o,e)})),e.computed&&function(e,t){\"object\"==typeof t&&Object.keys(t).forEach((n=>{const o=y(t[n].bind(e));Object.defineProperty(e,n,{get:()=>o.value})}))}(o,e.computed),e.directives&&function(e,t){\"object\"==typeof t&&Object.keys(t).forEach((e=>{j(e,t[e])}))}(0,e.directives),o}function L(e){const t=R(e);t.pubsub?.publish(\"created\"),t._runCompile=e=>{t.compile=new P(t.$el,t,e)};const n=function(e){return(t,n)=>{e.$components={...e.$components,[t.toLowerCase()]:n}}}(t);return{vm:t,mount:e=>{t._runCompile(),t.compile.mount(e)},directive:j,destroy:()=>{t.compile?.unmounted(),t._unsubscribes.forEach((e=>{e()}))},component:n}}function k(e){const t=document.createElement(\"div\");return t.innerHTML=e,t}function z(e){const t={value:e};return Object.defineProperty(t,\"__v_isRef\",{value:!0}),b(t)}function F(e,t){const n={get value(){return e[t]},set value(n){e[t]=n}};return Object.defineProperty(n,\"__v_isRef\",{value:!0}),n}function I(e){const t={};return Object.keys(e).forEach((n=>{e.hasOwnProperty(n)&&(t[n]=F(e,n))})),t}console.log(\"zvm 0.1.0\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2luZGV4LnRzIiwiLi4vLi4vc3JjL3JlYWN0aXZpdHkvY29uc3RhbnQudHMiLCIuLi8uLi9zcmMvcmVhY3Rpdml0eS90eXBlLnRzIiwiLi4vLi4vc3JjL3JlYWN0aXZpdHkvZWZmZWN0LnRzIiwiLi4vLi4vc3JjL3JlYWN0aXZpdHkvcmV3cml0ZS50cyIsIi4uLy4uL3NyYy9yZWFjdGl2aXR5L3JlYWN0aXZlLnRzIiwiLi4vLi4vc3JjL3JlYWN0aXZpdHkvY29tcHV0ZWQudHMiLCIuLi8uLi9zcmMvcmVhY3Rpdml0eS93YXRjaC50cyIsIi4uLy4uL3NyYy9jb21waWxlL2NvbnN0YW50LnRzIiwiLi4vLi4vc3JjL2NvbXBpbGUvcmVuZGVyLnRzIiwiLi4vLi4vc3JjL2NvbXBpbGUvZG9tLnRzIiwiLi4vLi4vc3JjL2NvbXBpbGUvdXRpbC50cyIsIi4uLy4uL3NyYy9jb21waWxlL2RpcmVjdGl2ZXNDb21wLnRzIiwiLi4vLi4vc3JjL2NvbXBpbGUvY29tcGlsZUNvbXAudHMiLCIuLi8uLi9zcmMvY29tcGlsZS9kaXJlY3RpdmVzLnRzIiwiLi4vLi4vc3JjL2NvbXBpbGUvY29tcGlsZS50cyIsIi4uLy4uL3NyYy9wdWJzdWIvcHVic3ViLnRzIiwiLi4vLi4vc3JjL3p2bS96dm0udHMiLCIuLi8uLi9zcmMvcmVhY3Rpdml0eS9yZWYudHMiLCIuLi8uLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyDojrflj5bnsbvlnotcclxuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cGUob2JqOiBhbnkpOiBzdHJpbmcge1xyXG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKTtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgUkFXX0tFWSA9IFN5bWJvbChcInJhd19rZXlcIik7XHJcblxyXG4vLyDov63ku6PlmahrZXlcclxuZXhwb3J0IGNvbnN0IElURVJBVEVfS0VZID0gU3ltYm9sKFwiaXRlcmF0ZVwiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBNQVBfS0VZX0lURVJBVEVfS0VZID0gU3ltYm9sKFwibWFwX2tleV9pdGVyYXRlXCIpO1xyXG4iLCJpbXBvcnQgeyBSQVdfS0VZIH0gZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZXhwb3J0IHR5cGUgRWZmZWN0Rm4gPSB7XG4gICgpOiB2b2lkO1xuICBkZXBzPzogQXJyYXk8U2V0PCgpID0+IHZvaWQ+PjtcbiAgb3B0aW9ucz86IHtcbiAgICBzY2hlZHVsZXI/OiAoZWZmZWN0Rm46IEVmZmVjdEZuKSA9PiB2b2lkO1xuICB9O1xufTtcbmV4cG9ydCBpbnRlcmZhY2UgRWZmZWN0T3B0aW9ucyB7XG4gIGxhenk/OiBib29sZWFuO1xuICBzY2hlZHVsZXI/OiAoZWZmZWN0OiBFZmZlY3RGbikgPT4gdm9pZDtcbn1cbmV4cG9ydCBlbnVtIFRyaWdnZXJUeXBlIHtcbiAgU0VULFxuICBBREQsXG4gIERFTEVURSxcbn1cblxuZXhwb3J0IHR5cGUgcHJveHlPYmpUeXBlPFQ+ID0ge1xuICBbUkFXX0tFWV06IFQ7XG59O1xuIiwiaW1wb3J0IHsgZ2V0VHlwZSB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHsgSVRFUkFURV9LRVksIE1BUF9LRVlfSVRFUkFURV9LRVkgfSBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IHsgc2hvdWRUcmFjayB9IGZyb20gXCIuL3JlYWN0aXZlXCI7XG5pbXBvcnQgeyBFZmZlY3RGbiwgRWZmZWN0T3B0aW9ucywgVHJpZ2dlclR5cGUgfSBmcm9tIFwiLi90eXBlXCI7XG4vLyDlvZPliY3mtLvliqjnmoRlZmZlY3Tlh73mlbBcbmxldCBhY3RpdmVFZmZlY3RGbjogRWZmZWN0Rm47XG5cbi8vIOWtmOWCqOWJr+S9nOeUqOWHveaVsOeahG1hcFxuY29uc3QgYnVja2V0OiBXZWFrTWFwPGFueSwgTWFwPGFueSwgU2V0PEVmZmVjdEZuPj4+ID0gbmV3IFdlYWtNYXAoKTtcblxuLy8gZWZmZWN05Ye95pWw5qCIXG5jb25zdCBlZmZlY3RGblN0YWNrOiBBcnJheTxFZmZlY3RGbj4gPSBbXTtcblxuLyoqXG4gKiDms6jlhozlia/kvZznlKjlh73mlbDvvIzlj6ropoFmbuS4reWtmOWcqOS7o+eQhuWvueixoS9jb21wdXRlZOWvueixoe+8jOWImeS8muaKiuW9k+WJjeeahOWJr+S9nOeUqOWHveaVsOa3u+WKoOWIsOWTjeW6lOW8j+WvueixoeeahGRlcHPkuK1cbiAqIEBwYXJhbSBmbiBnZXR0ZXLlh73mlbBcbiAqIEBwYXJhbSBvcHRpb25zIGVmZmVjdOWHveaVsOeahOmFjee9rlxuICogQHJldHVybnMg6L+U5Zue5Ymv5L2c55So5Ye95pWwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlZmZlY3QoZm46ICgpID0+IHZvaWQsIG9wdGlvbnM6IEVmZmVjdE9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBlZmZlY3RGbjogRWZmZWN0Rm4gPSAoKSA9PiB7XG4gICAgLy8g56e76Zmk5LiK5qyh55qE5L6d6LWW6ZuG5ZCIXG4gICAgY2xlYW5VcChlZmZlY3RGbik7XG5cbiAgICBhY3RpdmVFZmZlY3RGbiA9IGVmZmVjdEZuO1xuXG4gICAgLy8g5bCG5b2T5YmN55qE5Ymv5L2c55So5Ye95pWw5o6o5YWl5qCI5Lit77yM5bWM5aWXZWZmZWN055qE5oOF5Ya1XG4gICAgZWZmZWN0Rm5TdGFjay5wdXNoKGVmZmVjdEZuKTtcbiAgICBjb25zdCByZXMgPSBmbigpO1xuICAgIGVmZmVjdEZuU3RhY2sucG9wKCk7XG4gICAgYWN0aXZlRWZmZWN0Rm4gPSBlZmZlY3RGblN0YWNrW2VmZmVjdEZuU3RhY2subGVuZ3RoIC0gMV07XG5cbiAgICAvLyDov5Tlm57lh73mlbDnmoTnu5PmnpxcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGVmZmVjdEZuLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gIGVmZmVjdEZuLmRlcHMgPSBbXTtcblxuICBpZiAoIW9wdGlvbnMubGF6eSkge1xuICAgIGVmZmVjdEZuKCk7XG4gIH1cblxuICByZXR1cm4gZWZmZWN0Rm47XG59XG5cbmZ1bmN0aW9uIGNsZWFuVXAoZWZmZWN0Rm46IEVmZmVjdEZuKSB7XG4gIGlmICghZWZmZWN0Rm4uZGVwcykgcmV0dXJuO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVmZmVjdEZuLmRlcHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkZXBzID0gZWZmZWN0Rm4uZGVwc1tpXTtcbiAgICAvLyDlsIblvZPliY3nmoRlZmZjdEZu5LuOZGVwc+S4reenu+mZpFxuICAgIGRlcHMuZGVsZXRlKGVmZmVjdEZuKTtcbiAgfVxuICAvLyDph43nva5lZmZlY3RGbueahGRlcHNcbiAgZWZmZWN0Rm4uZGVwcy5sZW5ndGggPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhY2sodGFyZ2V0OiBvYmplY3QsIGtleTogc3RyaW5nIHwgc3ltYm9sKSB7XG4gIGlmICghYWN0aXZlRWZmZWN0Rm4gfHwgIXNob3VkVHJhY2spIHJldHVybjtcbiAgY29uc3QgZGVwc01hcCA9XG4gICAgYnVja2V0LmdldCh0YXJnZXQpIHx8IGJ1Y2tldC5zZXQodGFyZ2V0LCBuZXcgTWFwKCkpLmdldCh0YXJnZXQpO1xuICBjb25zdCBkZXBzID0gZGVwc01hcCEuZ2V0KGtleSkgfHwgZGVwc01hcCEuc2V0KGtleSwgbmV3IFNldCgpKS5nZXQoa2V5KTtcbiAgZGVwcyEuYWRkKGFjdGl2ZUVmZmVjdEZuKTtcbiAgYWN0aXZlRWZmZWN0Rm4uZGVwc1xuICAgID8gYWN0aXZlRWZmZWN0Rm4uZGVwcy5wdXNoKGRlcHMhKVxuICAgIDogKGFjdGl2ZUVmZmVjdEZuLmRlcHMgPSBbXSBhcyBTZXQ8KCkgPT4gdm9pZD5bXSkucHVzaChkZXBzISk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyKFxuICB0YXJnZXQ6IG9iamVjdCxcbiAga2V5OiBzdHJpbmcgfCBzeW1ib2wsXG4gIHtcbiAgICB0eXBlLFxuICB9OiB7XG4gICAgdHlwZTogVHJpZ2dlclR5cGU7XG4gIH1cbikge1xuICAvLyBpZiAoIW5lZWRUcmlnZ2VyKSByZXR1cm47XG4gIGNvbnN0IGRlcHNNYXAgPSBidWNrZXQuZ2V0KHRhcmdldCk7XG5cbiAgaWYgKCFkZXBzTWFwKSByZXR1cm47XG5cbiAgY29uc3QgZWZmZWN0c1RvUnVuID0gbmV3IFNldDxFZmZlY3RGbj4oKTtcbiAgY29uc3QgZGVwcyA9IGRlcHNNYXAuZ2V0KGtleSk7XG5cbiAgY29uc3QgaXRlcmF0ZUVmZmVjdHMgPSBkZXBzTWFwLmdldChJVEVSQVRFX0tFWSk7XG5cbiAgZGVwcyAmJlxuICAgIGRlcHMuZm9yRWFjaCgoZWZmZWN0Rm4pID0+IHtcbiAgICAgIGVmZmVjdHNUb1J1bi5hZGQoZWZmZWN0Rm4pO1xuICAgIH0pO1xuXG4gIC8vIOWPquaciea3u+WKoOWSjOWIoOmZpOaTjeS9nOaJjeS8muaUueWPmOWvueixoeeahGtleXPvvIzmlYXmraTml7bpnIDopoHop6blj5FpdGVyYXRlRWZmZWN0c1xuICBpZiAoXG4gICAgdHlwZSA9PT0gVHJpZ2dlclR5cGUuQUREIHx8XG4gICAgdHlwZSA9PT0gVHJpZ2dlclR5cGUuREVMRVRFIHx8XG4gICAgLy8gZm9yRWFjaOmBjeWOhk1hcOaXtu+8jOaXouWFs+W/g+mUruS5n+WFs+W/g+WAvO+8jOaVheW9k+S/ruaUuW1hcOeahOWAvOaXtu+8jOS5n+W6lOivpeinpuWPkWl0ZXJhdGVFZmZlY3RzXG4gICAgKHR5cGUgPT09IFRyaWdnZXJUeXBlLlNFVCAmJiBnZXRUeXBlKHRhcmdldCkgPT09IFwibWFwXCIpXG4gICkge1xuICAgIGl0ZXJhdGVFZmZlY3RzICYmXG4gICAgICBpdGVyYXRlRWZmZWN0cy5mb3JFYWNoKChlZmZlY3RGbikgPT4ge1xuICAgICAgICBpZiAoZWZmZWN0Rm4gIT0gYWN0aXZlRWZmZWN0Rm4pIHtcbiAgICAgICAgICBlZmZlY3RzVG9SdW4uYWRkKGVmZmVjdEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICBpZiAoXG4gICAgKHR5cGUgPT09IFRyaWdnZXJUeXBlLkFERCB8fCB0eXBlID09PSBUcmlnZ2VyVHlwZS5ERUxFVEUpICYmXG4gICAgZ2V0VHlwZSh0YXJnZXQpID09PSBcIm1hcFwiXG4gICkge1xuICAgIGNvbnN0IGl0ZXJhdGVLZXlFZmZlY3RzID0gZGVwc01hcC5nZXQoTUFQX0tFWV9JVEVSQVRFX0tFWSk7XG4gICAgaXRlcmF0ZUtleUVmZmVjdHMgJiZcbiAgICAgIGl0ZXJhdGVLZXlFZmZlY3RzLmZvckVhY2goKGVmZmVjdEZuKSA9PiB7XG4gICAgICAgIGlmIChlZmZlY3RGbiAhPSBhY3RpdmVFZmZlY3RGbikge1xuICAgICAgICAgIGVmZmVjdHNUb1J1bi5hZGQoZWZmZWN0Rm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIC8vIOWmguaenFRyaWdnZXJUeXBlID09PSBBREQsIOW5tuS4lHRhcmdldOaYr+aVsOe7hO+8jOivtOaYjuaVsOe7hOeahOmVv+W6puWPkeeUn+WPmOWMlu+8jOWImemcgOimgeaKiuaVsOe7hOeahGxlbmd0aOS5n+inpuWPkVxuICBpZiAodHlwZSA9PT0gVHJpZ2dlclR5cGUuQUREICYmIEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgIGNvbnN0IGxlbmd0aEVmZmVjdHMgPSBkZXBzTWFwLmdldChcImxlbmd0aFwiKTtcbiAgICBsZW5ndGhFZmZlY3RzICYmXG4gICAgICBsZW5ndGhFZmZlY3RzLmZvckVhY2goKGVmZmVjdEZuKSA9PiB7XG4gICAgICAgIGlmIChlZmZlY3RGbiAhPSBhY3RpdmVFZmZlY3RGbikge1xuICAgICAgICAgIGVmZmVjdHNUb1J1bi5hZGQoZWZmZWN0Rm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGVmZmVjdHNUb1J1bi5mb3JFYWNoKChlZmZlY3RGbikgPT4ge1xuICAgIC8vIOmBv+WFjeW+queOr+inpuWPkVxuICAgIGlmIChhY3RpdmVFZmZlY3RGbiAhPT0gZWZmZWN0Rm4pIHtcbiAgICAgIGlmIChlZmZlY3RGbi5vcHRpb25zICYmIGVmZmVjdEZuLm9wdGlvbnMuc2NoZWR1bGVyKSB7XG4gICAgICAgIGVmZmVjdEZuLm9wdGlvbnMuc2NoZWR1bGVyKGVmZmVjdEZuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVmZmVjdEZuKCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiIsImltcG9ydCB7IElURVJBVEVfS0VZLCBNQVBfS0VZX0lURVJBVEVfS0VZLCBSQVdfS0VZIH0gZnJvbSBcIi4vY29uc3RhbnRcIjtcclxuaW1wb3J0IHsgdHJhY2ssIHRyaWdnZXIgfSBmcm9tIFwiLi9lZmZlY3RcIjtcclxuaW1wb3J0IHsgcmVhY3RpdmUgfSBmcm9tIFwiLi9yZWFjdGl2ZVwiO1xyXG5pbXBvcnQgeyBwcm94eU9ialR5cGUsIFRyaWdnZXJUeXBlIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuLy8g6YeN5YaZU2V044CBTWFw5Lit55qE5pa55rOV77yM5L2/5YW25Y+v5Lul55uR5ZCs5pWw5o2u5Y+Y5YyWXHJcbmV4cG9ydCBjb25zdCBtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyA9IHtcclxuICBhZGQodGhpczogU2V0PGFueT4gJiBwcm94eU9ialR5cGU8U2V0PGFueT4+LCB2YWx1ZTogYW55KSB7XHJcbiAgICAvLyDojrflj5bljp/lr7nosaFcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbUkFXX0tFWV07XHJcblxyXG4gICAgY29uc3QgaGFzVmFsdWUgPSB0YXJnZXQuaGFzKHZhbHVlKTtcclxuICAgIC8vIOiOt+WPluWOn+Wvueixoe+8jCDpmLLmraLmsaHmn5Pljp/lp4vmlbDmja5cclxuICAgIGNvbnN0IG5ld1ZhbCA9IHZhbHVlW1JBV19LRVldIHx8IHZhbHVlO1xyXG4gICAgY29uc3QgcmVzID0gdGFyZ2V0LmFkZChuZXdWYWwpO1xyXG4gICAgaWYgKCFoYXNWYWx1ZSkge1xyXG4gICAgICB0cmlnZ2VyKHRhcmdldCwgdmFsdWUsIHtcclxuICAgICAgICB0eXBlOiBUcmlnZ2VyVHlwZS5BREQsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9LFxyXG5cclxuICBkZWxldGUoXHJcbiAgICB0aGlzOiAoTWFwPGFueSwgYW55PiB8IFNldDxhbnk+KSAmIHByb3h5T2JqVHlwZTxNYXA8YW55LCBhbnk+IHwgU2V0PGFueT4+LFxyXG4gICAga2V5OiBhbnlcclxuICApIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbUkFXX0tFWV07XHJcbiAgICBjb25zdCBoYXNLZXkgPSB0YXJnZXQuaGFzKGtleSk7XHJcbiAgICBjb25zdCByZXMgPSB0YXJnZXQuZGVsZXRlKGtleSk7XHJcblxyXG4gICAgaWYgKGhhc0tleSkge1xyXG4gICAgICB0cmlnZ2VyKHRhcmdldCwga2V5LCB7XHJcbiAgICAgICAgdHlwZTogVHJpZ2dlclR5cGUuREVMRVRFLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfSxcclxuXHJcbiAgZ2V0KHRoaXM6IE1hcDxhbnksIGFueT4gJiBwcm94eU9ialR5cGU8TWFwPGFueSwgYW55Pj4sIGtleTogYW55KTogYW55IHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbUkFXX0tFWV07XHJcbiAgICBjb25zdCBoYXNLZXkgPSB0YXJnZXQuaGFzKGtleSk7XHJcbiAgICB0cmFjayh0YXJnZXQsIGtleSk7XHJcbiAgICBpZiAoaGFzS2V5KSB7XHJcbiAgICAgIGNvbnN0IHJlcyA9IHRhcmdldC5nZXQoa2V5KTtcclxuICAgICAgcmV0dXJuIHR5cGVvZiByZXMgPT09IFwib2JqZWN0XCIgPyByZWFjdGl2ZShyZXMpIDogcmVzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9LFxyXG5cclxuICBzZXQodGhpczogTWFwPGFueSwgYW55PiAmIHByb3h5T2JqVHlwZTxNYXA8YW55LCBhbnk+Piwga2V5OiBhbnksIHZhbHVlOiBhbnkpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbUkFXX0tFWV07XHJcbiAgICBjb25zdCBoYXNLZXkgPSB0YXJnZXQuaGFzKGtleSk7XHJcbiAgICBjb25zdCBvbGRWYWwgPSB0YXJnZXQuZ2V0KGtleSk7XHJcbiAgICAvLyDojrflj5bljp/lr7nosaHvvIwg6Ziy5q2i5rGh5p+T5Y6f5aeL5pWw5o2uXHJcbiAgICBjb25zdCBuZXdWYWwgPSB2YWx1ZVtSQVdfS0VZXSB8fCB2YWx1ZTtcclxuICAgIGNvbnN0IHJlcyA9IHRhcmdldC5zZXQoa2V5LCBuZXdWYWwpO1xyXG4gICAgLy8g6L+Z6YeM6KaB5Yy65YiG5piv5ZCm5piv5paw5aKe55qEa2V577yM5paw5aKe55qEa2V56ZyA6KaB6Kem5Y+RQURE5LqL5Lu277yM6ICM5LiN5pivU0VU5LqL5Lu2XHJcblxyXG4gICAgaWYgKCFoYXNLZXkpIHtcclxuICAgICAgdHJpZ2dlcih0YXJnZXQsIGtleSwge1xyXG4gICAgICAgIHR5cGU6IFRyaWdnZXJUeXBlLkFERCxcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKG9sZFZhbCAhPT0gdmFsdWUgfHwgKG9sZFZhbCA9PT0gb2xkVmFsICYmIHZhbHVlID09PSB2YWx1ZSkpIHtcclxuICAgICAgdHJpZ2dlcih0YXJnZXQsIGtleSwge1xyXG4gICAgICAgIHR5cGU6IFRyaWdnZXJUeXBlLlNFVCxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH0sXHJcblxyXG4gIGZvckVhY2goXHJcbiAgICB0aGlzOiAoTWFwPGFueSwgYW55PiB8IFNldDxhbnk+KSAmIHByb3h5T2JqVHlwZTxNYXA8YW55LCBhbnk+IHwgU2V0PGFueT4+LFxyXG4gICAgY2FsbGJhY2tmbjogKChcclxuICAgICAgdmFsdWU6IGFueSxcclxuICAgICAga2V5OiBhbnksXHJcbiAgICAgIG1hcDogTWFwPGFueSwgYW55PiB8IFNldDxhbnk+XHJcbiAgICApID0+IHZvaWQpICZcclxuICAgICAgKCh2YWx1ZTogYW55LCB2YWx1ZTI6IGFueSwgc2V0OiBTZXQ8YW55PikgPT4gdm9pZCksXHJcbiAgICB0aGlzQXJnOiBhbnlcclxuICApIHtcclxuICAgIC8vIOWSjGdldOaWueazleS4gOagt++8jOS4gOaXpuaIkeS7rOimgeiOt+WPluS4gOS4quWAvO+8jOaIkeS7rOmcgOimgeiAg+iZkeS4i+aYr+WQpumcgOimgeinpuWPkeS7o+eQhlxyXG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tSQVdfS0VZXTtcclxuICAgIHRyYWNrKHRhcmdldCwgSVRFUkFURV9LRVkpO1xyXG5cclxuICAgIHJldHVybiB0YXJnZXQuZm9yRWFjaChcclxuICAgICAgKHYsIGssIG0pID0+IGNhbGxiYWNrZm4od3JhcCh2KSwgd3JhcChrKSwgbSksXHJcbiAgICAgIHRoaXNBcmdcclxuICAgICk7XHJcbiAgfSxcclxuXHJcbiAgW1N5bWJvbC5pdGVyYXRvcl0oXHJcbiAgICB0aGlzOiAoTWFwPGFueSwgYW55PiB8IFNldDxhbnk+KSAmIHByb3h5T2JqVHlwZTxNYXA8YW55LCBhbnk+IHwgU2V0PGFueT4+XHJcbiAgKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1JBV19LRVldO1xyXG4gICAgdHJhY2sodGFyZ2V0LCBJVEVSQVRFX0tFWSk7XHJcbiAgICBjb25zdCBpdHIgPSB0YXJnZXRbU3ltYm9sLml0ZXJhdG9yXSgpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5leHQoKSB7XHJcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gaXRyLm5leHQoKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdmFsdWU6IHZhbHVlID8gW3dyYXAodmFsdWVbMF0pLCB3cmFwKHZhbHVlWzFdKV0gOiB2YWx1ZSxcclxuICAgICAgICAgIGRvbmUsXHJcbiAgICAgICAgfTtcclxuICAgICAgfSxcclxuICAgICAgLy8g6L+t5Luj5Ye95pWw5aaCZm9yLi4ub2bov63ku6PkuIDkuKrlj6/ov63ku6Plr7nosaHml7bvvIzkvJrlhYjmiafooYzov63ku6PlmajnmoRTeW1ib2wuaXRlcmF0b3Lmlrnms5XvvIznhLblkI7lho3miafooYxuZXh05pa55rOVXHJcbiAgICAgIC8vIOaJgOS7pei/lOWbnueahOWvueixoeW/hemhu+WQq+aciVN5bWJvbC5pdGVyYXRvcuaWueazlVxyXG4gICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuXHJcbiAgZW50cmllcyhcclxuICAgIHRoaXM6IChNYXA8YW55LCBhbnk+IHwgU2V0PGFueT4pICYgcHJveHlPYmpUeXBlPE1hcDxhbnksIGFueT4gfCBTZXQ8YW55Pj5cclxuICApIHtcclxuICAgIHJldHVybiB0aGlzW1N5bWJvbC5pdGVyYXRvcl0oKTtcclxuICB9LFxyXG5cclxuICB2YWx1ZXM6IHZhbHVlSXRlcmF0aW9uTWV0aG9kLFxyXG5cclxuICBrZXlzOiBrZXlJdGVyYXRpb25NZXRob2QsXHJcbn07XHJcblxyXG5mdW5jdGlvbiB2YWx1ZUl0ZXJhdGlvbk1ldGhvZChcclxuICB0aGlzOiAoTWFwPGFueSwgYW55PiB8IFNldDxhbnk+KSAmIHByb3h5T2JqVHlwZTxNYXA8YW55LCBhbnk+IHwgU2V0PGFueT4+XHJcbikge1xyXG4gIGNvbnN0IHRhcmdldCA9IHRoaXNbUkFXX0tFWV07XHJcbiAgY29uc3QgaXRyID0gdGFyZ2V0LnZhbHVlcygpO1xyXG4gIHRyYWNrKHRhcmdldCwgSVRFUkFURV9LRVkpO1xyXG4gIHJldHVybiB7XHJcbiAgICBuZXh0KCkge1xyXG4gICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBpdHIubmV4dCgpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbHVlOiB2YWx1ZSA/IHdyYXAodmFsdWUpIDogdmFsdWUsXHJcbiAgICAgICAgZG9uZSxcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGtleUl0ZXJhdGlvbk1ldGhvZChcclxuICB0aGlzOiAoTWFwPGFueSwgYW55PiB8IFNldDxhbnk+KSAmIHByb3h5T2JqVHlwZTxNYXA8YW55LCBhbnk+IHwgU2V0PGFueT4+XHJcbikge1xyXG4gIGNvbnN0IHRhcmdldCA9IHRoaXNbUkFXX0tFWV07XHJcbiAgY29uc3QgaXRyID0gdGFyZ2V0LmtleXMoKTtcclxuICB0cmFjayh0YXJnZXQsIE1BUF9LRVlfSVRFUkFURV9LRVkpO1xyXG4gIHJldHVybiB7XHJcbiAgICBuZXh0KCkge1xyXG4gICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBpdHIubmV4dCgpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbHVlOiB2YWx1ZSA/IHdyYXAodmFsdWUpIDogdmFsdWUsXHJcbiAgICAgICAgZG9uZSxcclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gIH07XHJcbn1cclxuXHJcbmNvbnN0IHdyYXAgPSAodmFsOiBhbnkpID0+ICh0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiID8gcmVhY3RpdmUodmFsKSA6IHZhbCk7XHJcbiIsImltcG9ydCB7IHRyYWNrLCB0cmlnZ2VyIH0gZnJvbSBcIi4vZWZmZWN0XCI7XG5pbXBvcnQgeyBUcmlnZ2VyVHlwZSB9IGZyb20gXCIuL3R5cGVcIjtcbmltcG9ydCB7IGdldFR5cGUgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXhcIjtcbmltcG9ydCB7IElURVJBVEVfS0VZLCBSQVdfS0VZIH0gZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCB7IG11dGFibGVJbnN0cnVtZW50YXRpb25zIH0gZnJvbSBcIi4vcmV3cml0ZVwiO1xuXG4vLyDliJvlu7rkuIDkuKptYXDmnaXorrDlvZXlt7Lnu4/ooqvku6PnkIbnmoTlr7nosaHvvIzpgb/lhY3ph43lpI3ku6PnkIZcblxuLy9UT0RPXG5leHBvcnQgY29uc3Qgc2hvdWRUcmFjayA9IHRydWU7XG5cbmNvbnN0IHJlYWN0aXZlTWFwID0gbmV3IE1hcCgpO1xuXG4vKipcbiAqIOWIm+W7uuS4gOS4quWTjeW6lOW8j+WvueixoVxuICogQHBhcmFtIG9iaiDlr7nosaFcbiAqIEBwYXJhbSBpc1NoYWxsb3cg5piv5ZCm5rWF5ou36LSdXG4gKiBAcGFyYW0gaXNSZWFkb25seSDmmK/lkKblj6ror7tcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aXZlPFQgZXh0ZW5kcyBvYmplY3Q+KFxuICBvYmo6IFQsXG4gIHsgaXNTaGFsbG93ID0gZmFsc2UgfVxuKTogVCAmIHtcbiAgW1JBV19LRVldOiBUO1xuICBfX2lzUHJveHlfXzogYm9vbGVhbjtcbn0ge1xuICBjb25zdCBwcm94eU9ialR5cGUgPSBnZXRUeXBlKG9iaik7XG5cbiAgcmV0dXJuIG5ldyBQcm94eShvYmosIHtcbiAgICBnZXQodGFyZ2V0OiBULCBrZXk6IHN0cmluZyB8IHN5bWJvbCwgcmVjZWl2ZXI6IG9iamVjdCk6IGFueSB7XG4gICAgICAvLyDnlKjmnaXliKTmlq3or6Xlr7nosaHmmK/lkKbooqvku6PnkIZcbiAgICAgIGlmIChrZXkgPT09IFwiX19pc1Byb3h5X19cIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIOS7o+eQhuWvueixoeWPr+S7pemAmui/h1JBV19LRVnojrflj5bliLDljp/lp4vmlbDmja5cbiAgICAgIGlmIChrZXkgPT09IFJBV19LRVkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cblxuICAgICAgLy8gbWFw57G75Z6LIHwgc2V057G75Z6LIOmcgOimgeeJueauiuWkhOeQhu+8jOS7o+eQhumHjOmdoueahOaWueazleadpeebkeWQrOaVsOaNruWPmOWMllxuICAgICAgaWYgKHByb3h5T2JqVHlwZSA9PT0gXCJzZXRcIiB8fCBwcm94eU9ialR5cGUgPT09IFwibWFwXCIpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJzaXplXCIpIHtcbiAgICAgICAgICB0cmFjayh0YXJnZXQsIElURVJBVEVfS0VZKTtcbiAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXksIHRhcmdldCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCEhbXV0YWJsZUluc3RydW1lbnRhdGlvbnNba2V5XSkge1xuICAgICAgICAgICAgcmV0dXJuIG11dGFibGVJbnN0cnVtZW50YXRpb25zW2tleV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldLmJpbmQodGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIikge1xuICAgICAgICAvLyDlpoLmnpzkuI3mmK/lj6ror7vvvIzlubbkuJRrZXnkuI3mmK9zeW1ib2zvvIzliJnmt7vliqDlia/kvZznlKjlh73mlbBcbiAgICAgICAgdHJhY2sodGFyZ2V0LCBrZXkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXMgPSBSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xuXG4gICAgICAvLyDlpoLmnpzkuLrmtYXlk43lupTvvIzliJnkuI3lr7nlgLzov5vooYzlk43lupTlvI/ljJZcbiAgICAgIGlmIChpc1NoYWxsb3cpIHtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cblxuICAgICAgLy8g5aaC5p6c5piv5rex5ZON5bqU77yM5YiZ6YCS5b2S5ZON5bqU5byP5YyW5YC8XG4gICAgICBpZiAodHlwZW9mIHJlcyA9PT0gXCJvYmplY3RcIiAmJiByZXMgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlYWN0aXZlKHJlcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXM7XG4gICAgfSxcblxuICAgIHNldCh0YXJnZXQ6IFQsIGtleTogc3RyaW5nIHwgc3ltYm9sLCBuZXdWYWw6IGFueSwgcmVjZWl2ZXI6IG9iamVjdCkge1xuICAgICAgY29uc3Qgb2xkVmFsID0gdGFyZ2V0W2tleV07XG5cbiAgICAgIGNvbnN0IHR5cGUgPSBBcnJheS5pc0FycmF5KHRhcmdldClcbiAgICAgICAgPyAvLyDlpoLmnpzmmK/mlbDnu4TkuJRrZXnlgLzlsI/kuo7plb/luqbvvIzliJnorqTkuLrmmK9zZXTvvIzlkKbliJnmmK/mj5LlhaXmlrDlhYPntKBcbiAgICAgICAgICBOdW1iZXIoa2V5KSA8IHRhcmdldC5sZW5ndGhcbiAgICAgICAgICA/IFRyaWdnZXJUeXBlLlNFVFxuICAgICAgICAgIDogVHJpZ2dlclR5cGUuQUREXG4gICAgICAgIDogLy8g5aaC5p6c5a+56LGh5ZCr5pyJa2V55bGe5oCn77yM5YiZ6K6k5Li65pivc2V077yM5ZCm5YiZ5piv5paw5aKe5bGe5oCnXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSlcbiAgICAgICAgPyBUcmlnZ2VyVHlwZS5TRVRcbiAgICAgICAgOiBUcmlnZ2VyVHlwZS5BREQ7XG4gICAgICBjb25zdCByZXMgPSBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgbmV3VmFsLCByZWNlaXZlcik7XG5cbiAgICAgIGlmIChvbGRWYWwgIT09IG5ld1ZhbCkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwga2V5LCB7XG4gICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0sXG5cbiAgICBoYXModGFyZ2V0OiBvYmplY3QsIGtleTogc3RyaW5nIHwgc3ltYm9sKSB7XG4gICAgICB0cmFjayh0YXJnZXQsIGtleSk7XG4gICAgICByZXR1cm4gUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpO1xuICAgIH0sXG5cbiAgICBvd25LZXlzKHRhcmdldDogb2JqZWN0KSB7XG4gICAgICB0cmFjayh0YXJnZXQsIEFycmF5LmlzQXJyYXkodGFyZ2V0KSA/IFwibGVuZ3RoXCIgOiBJVEVSQVRFX0tFWSk7XG4gICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCk7XG4gICAgfSxcblxuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldDogb2JqZWN0LCBrZXk6IHN0cmluZyB8IHN5bWJvbCkge1xuICAgICAgY29uc3QgaGFzS2V5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KTtcbiAgICAgIGNvbnN0IHJlcyA9IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpO1xuICAgICAgaWYgKGhhc0tleSAmJiByZXMpIHtcbiAgICAgICAgQXJyYXkuaXNBcnJheSh0YXJnZXQpXG4gICAgICAgICAgPyB0cmlnZ2VyKHRhcmdldCwga2V5LCB7XG4gICAgICAgICAgICAgIHR5cGU6IFRyaWdnZXJUeXBlLlNFVCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiB0cmlnZ2VyKHRhcmdldCwga2V5LCB7XG4gICAgICAgICAgICAgIHR5cGU6IFRyaWdnZXJUeXBlLkRFTEVURSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LFxuICB9KSBhcyBhbnk7XG59XG5cbi8vIOm7mOiupHJlYWN0aXZl5Ye95pWwLCDmt7Hlk43lupTlvI/ljJZcbmZ1bmN0aW9uIHJlYWN0aXZlKG9iajogb2JqZWN0KSB7XG4gIC8vIOWFiOafpeaJvuW9k+WJjeWvueixoeaYr+WQpuW3sue7j+S7o+eQhui/h1xuICBjb25zdCBleGlzdFByb3h5ID0gcmVhY3RpdmVNYXAuZ2V0KG9iaik7XG5cbiAgaWYgKGV4aXN0UHJveHkpIHtcbiAgICAvLyDlrZjlnKjliJnnm7TmjqXov5Tlm55cbiAgICByZXR1cm4gZXhpc3RQcm94eTtcbiAgfVxuXG4gIC8vIOWQpuWImeWIm+W7uuS7o+eQhuWvueixoVxuICBjb25zdCBwcm94eSA9IGNyZWF0ZVJlYWN0aXZlKG9iaiwge30pO1xuICByZWFjdGl2ZU1hcC5zZXQob2JqLCBwcm94eSk7XG4gIHJldHVybiBwcm94eTtcbn1cblxuZnVuY3Rpb24gc2hhbGxvd1JlYWN0aXZlPFQgZXh0ZW5kcyBvYmplY3Q+KG9iajogVCkge1xuICByZXR1cm4gY3JlYXRlUmVhY3RpdmUob2JqLCB7IGlzU2hhbGxvdzogdHJ1ZSB9KTtcbn1cblxuZXhwb3J0IHsgcmVhY3RpdmUsIHNoYWxsb3dSZWFjdGl2ZSB9O1xuIiwiaW1wb3J0IHsgZWZmZWN0LCB0cmFjaywgdHJpZ2dlciB9IGZyb20gXCIuL2VmZmVjdFwiO1xuaW1wb3J0IHsgVHJpZ2dlclR5cGUgfSBmcm9tIFwiLi90eXBlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlZChnZXR0ZXI6ICgpID0+IGFueSkge1xuICBsZXQgdmFsdWU6IGFueTtcbiAgLy8g6K6+572u5qCH5b+X5L2N77yMZGlydHnooajnpLrmlbDmja7lj5HnlJ/mlLnlj5jvvIzpnIDopoHmm7TmlrDvvIzlrp7njrBjb21wdXRlZOaDsOaAp+axguWAvFxuICBsZXQgZGlydHkgPSB0cnVlO1xuICBjb25zdCBlZmZlY3RGbiA9IGVmZmVjdChnZXR0ZXIsIHtcbiAgICAvLyDorr7nva5sYXp55Li6dHJ1Ze+8jOihqOekuuS4jeS8mueri+WNs+aJp+ihjGVmZmVjdEZu77yM6ICM5piv5Zyo6LCD55SoY29tcHV0ZWTnmoTml7blgJnmiY3miafooYzvvIzlrp7njrBjb21wdXRlZOaDsOaAp+axguWAvFxuICAgIGxhenk6IHRydWUsXG4gICAgc2NoZWR1bGVyKCkge1xuICAgICAgaWYgKCFkaXJ0eSkge1xuICAgICAgICAvLyDlsIZkaXJ0eeiuvuS4unRydWXvvIzooajnpLrmlbDmja7lj5HnlJ/mlLnlj5jvvIzpnIDopoHmm7TmlrBcbiAgICAgICAgZGlydHkgPSB0cnVlO1xuICAgICAgICAvLyDosIPnlKh0cmlnZ2Vy77yM5ZGK55+lY29tcHV0ZWTnmoTkvp3otZblj5HnlJ/lj5jljJborqnku5bku6zph43mlrDmiafooYxcbiAgICAgICAgdHJpZ2dlcihvYmosIFwidmFsdWVcIiwge1xuICAgICAgICAgIHR5cGU6IFRyaWdnZXJUeXBlLlNFVCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gY29tcHV0ZWTopoHov5Tlm57nmoTlr7nosaHvvIzpgJrov4dvYmoudmFsdWXojrflj5bliLBjb21wdXRlZOi/lOWbnueahOWAvFxuICBjb25zdCBvYmogPSB7XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgLy8g5aaC5p6cZGlydHnkuLp0cnVl77yM6KGo56S65pWw5o2u5Y+R55Sf5pS55Y+Y77yM6ZyA6KaB5pu05pawXG5cbiAgICAgIGlmIChkaXJ0eSkge1xuICAgICAgICB2YWx1ZSA9IGVmZmVjdEZuKCk7XG4gICAgICAgIGRpcnR5ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyDmlLbpm4bkvp3otZZcbiAgICAgIHRyYWNrKG9iaiwgXCJ2YWx1ZVwiKTtcblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gIH07XG4gIHJldHVybiBvYmo7XG59XG4iLCJpbXBvcnQgeyBlZmZlY3QgfSBmcm9tIFwiLi9lZmZlY3RcIjtcblxuaW50ZXJmYWNlIFdhdGNoT3B0aW9ucyB7XG4gIGRlZXA/OiBib29sZWFuO1xuICBpbW1lZGlhdGU/OiBib29sZWFuO1xuICBmbHVzaD86IFwicG9zdFwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2F0Y2goXG4gIGdldHRlcjogb2JqZWN0IHwgKCgpID0+IHZvaWQpLFxuICBmbjogKFxuICAgIG5ld1ZhbDogYW55LFxuICAgIG9sZFZhbDogYW55LFxuICAgIG9uSW52YWxpZGF0ZTogKGZuOiAoKSA9PiB2b2lkKSA9PiB2b2lkXG4gICkgPT4gdm9pZCxcbiAgb3B0aW9uczogV2F0Y2hPcHRpb25zID0ge1xuICAgIGltbWVkaWF0ZTogZmFsc2UsXG4gIH1cbikge1xuICBsZXQgb2xkVmFsOiBhbnksIG5ld1ZhbDogYW55O1xuXG4gIC8vIOWtmOWCqOi/h+acn+Wbnuiwg1xuICBsZXQgY2xlYW5VcDogKCgpID0+IHZvaWQpIHwgbnVsbDtcblxuICBmdW5jdGlvbiBvbkludmFsaWRhdGUoZm46ICgpID0+IHZvaWQpIHtcbiAgICBjbGVhblVwID0gZm47XG4gIH1cblxuICBmdW5jdGlvbiBqb2IoKSB7XG4gICAgY2xlYW5VcCAmJiBjbGVhblVwKCk7XG4gICAgY2xlYW5VcCA9IG51bGw7XG4gICAgbmV3VmFsID0gZWZmZWN0Rm4oKTtcbiAgICBmbihuZXdWYWwsIG9sZFZhbCwgb25JbnZhbGlkYXRlKTtcbiAgICBvbGRWYWwgPSBuZXdWYWw7XG4gIH1cblxuICBjb25zdCBlZmZlY3RGbiA9IGVmZmVjdChcbiAgICAoKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGdldHRlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBnZXR0ZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGdldHRlcik7XG5cbiAgICAgICAgcmV0dXJuIHRyYXZlcnNlKGdldHRlcik7XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBsYXp5OiB0cnVlLFxuICAgICAgc2NoZWR1bGVyOiAoKSA9PiB7XG4gICAgICAgIGlmIChvcHRpb25zLmZsdXNoID09PSBcInBvc3RcIikge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oam9iKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBqb2IoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9XG4gICk7XG5cbiAgLy8g56uL5Y2z5omn6KGM5YiZ6LCD55Soam9iXG4gIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgIGpvYigpO1xuICB9IGVsc2Uge1xuICAgIC8vIOeUseS6juiuvue9ruS6hmxhenk6dHJ1Ze+8jOaVhemcgOimgeaJi+WKqOiwg+eUqGVmZmVjdEZu6L+b6KGM5L6d6LWW5pS26ZuGXG4gICAgb2xkVmFsID0gZWZmZWN0Rm4oKTtcbiAgfVxufVxuXG4vKipcbiAqIOmAkuW9kuivu+WPlnZhbHVlXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBzZWVuIOeUqOadpeWtmOWCqOW3sue7j+ivu+WPlui/h+eahOWAvO+8jOmBv+WFjeWPkeeUn+atu+W+queOr1xuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UodmFsdWU6IG9iamVjdCwgc2VlbiA9IG5ldyBTZXQoKSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwgfHwgc2Vlbi5oYXModmFsdWUpKVxuICAgIHJldHVybiB2YWx1ZTtcbiAgc2Vlbi5hZGQodmFsdWUpO1xuICBmb3IgKGNvbnN0IGsgaW4gdmFsdWUpIHtcbiAgICB0cmF2ZXJzZSh2YWx1ZVtrXSwgc2Vlbik7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuIiwiZXhwb3J0IGNvbnN0IERJUl9SRUcgPSAvXnotLztcclxuZXhwb3J0IGNvbnN0IERJUl9GT1JfUkVHID0gL156LWZvci87XHJcbmV4cG9ydCBjb25zdCBESVJfSUZfUkVHID0gL156LWlmLztcclxuZXhwb3J0IGNvbnN0IERJUl9CSU5EX1JFRyA9IC9eei1iaW5kLztcclxuIiwiaW1wb3J0IHsgVk0gfSBmcm9tIFwiLi4venZtL3R5cGVcIjtcbmltcG9ydCB7IGNyZWF0ZVZNIH0gZnJvbSBcIi4uL3p2bS96dm1cIjtcbmltcG9ydCB7IENvbXBpbGUgfSBmcm9tIFwiLi9jb21waWxlXCI7XG5pbXBvcnQgeyBpbnNlcnRBZnRlciB9IGZyb20gXCIuL2RvbVwiO1xuXG5leHBvcnQgY29uc3QgcmVuZGVyID0ge1xuICB0ZXh0UmVuZGVyOiAobm9kZTogTm9kZSwgdGV4dDogc3RyaW5nLCByZXBsYWNlOiBzdHJpbmcpID0+IHtcbiAgICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gXCJJTlBVVFwiKSB7XG4gICAgICBjb25zdCBpbnB1dFR5cGUgPSAobm9kZSBhcyBIVE1MSW5wdXRFbGVtZW50KS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuXG4gICAgICAvLyByYWRpb+S4jeaYr+iuvue9rnZhbHVl77yM6ICM5piv5Yik5pat5piv5ZCm6YCJ5LitXG4gICAgICBpZiAoaW5wdXRUeXBlID09PSBcInJhZGlvXCIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJyYWRpb1wiKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAobm9kZSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICAgICAgKG5vZGUgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZCA9IHRleHQgPT09IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaW5wdXRUeXBlID09PSBcImNoZWNrYm94XCIpIHtcbiAgICAgICAgKG5vZGUgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZCA9ICEhdGV4dDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgKG5vZGUgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUgPSB0ZXh0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIU9iamVjdC5oYXNPd24obm9kZSwgXCJfdGV4dENvbnRlbnRcIikpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub2RlLCBcIl90ZXh0Q29udGVudFwiLCB7XG4gICAgICAgIHZhbHVlOiBub2RlLnRleHRDb250ZW50LFxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG9yaWdpblRleHQgPSAobm9kZSBhcyBhbnkpLl90ZXh0Q29udGVudDtcbiAgICByZXBsYWNlXG4gICAgICA/IChub2RlLnRleHRDb250ZW50ID0gb3JpZ2luVGV4dC5yZXBsYWNlKHJlcGxhY2UsIHRleHQpIHx8IFwiXCIpXG4gICAgICA6IChub2RlLnRleHRDb250ZW50ID0gdHlwZW9mIHRleHQgPT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiB0ZXh0KTtcbiAgfSxcblxuICBjbGFzc1JlbmRlcjogKG5vZGU6IEhUTUxFbGVtZW50LCB2YWx1ZTogb2JqZWN0KSA9PiB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGF0dHJSZW5kZXI6XG4gICAgKGF0dHI6IHN0cmluZykgPT4gKG5vZGU6IEhUTUxFbGVtZW50LCB2YWx1ZTogc3RyaW5nIHwgYm9vbGVhbikgPT4ge1xuICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSBub2RlLnNldEF0dHJpYnV0ZShhdHRyLCBcIlwiKTtcbiAgICAgIGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICBlbHNlIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgZm9yUmVuZGVyOiAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAvLyDliKnnlKjpl63ljIXkv53lrZjkuIDkuKrljp/lp4voioLngrlcbiAgICAvLyDnp4HmnInmlbDmja7vvIzkuI3mm7TmlLlcbiAgICBjb25zdCBfY2xvbmVOb2RlID0gbm9kZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgY29uc3QgX3BhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgY29uc3QgX3ByZXZpb3VzTm9kZTogTm9kZSB8IG51bGwgPSBub2RlLnByZXZpb3VzU2libGluZztcbiAgICBjb25zdCBmb3JOb2RlczogTm9kZVtdID0gW107XG4gICAgX3BhcmVudE5vZGU/LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIGZ1bmN0aW9uIGNsZWFyTm9kZXMoKSB7XG4gICAgICBmb3JOb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIF9wYXJlbnROb2RlPy5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgZm9yTm9kZXMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIHZhbHVlOiBzdHJpbmcsXG4gICAgICBpbmRleDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgICAgaXRlbXM6IHN0cmluZyxcbiAgICAgIHZtOiBWTVxuICAgICkgPT4ge1xuICAgICAgY2xlYXJOb2RlcygpO1xuICAgICAgbGV0IGxhc3ROb2RlOiBOb2RlIHwgbnVsbCA9IF9wcmV2aW91c05vZGU7XG4gICAgICAvLyBub2RlLnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIWl0ZW1zW2ldKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgY2xvbmVOb2RlID0gX2Nsb25lTm9kZS5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICAgICAgLy8gbm9kZS5hcHBlbmRDaGlsZChmcmFnKTtcbiAgICAgICAgLy8gVE9ET1xuICAgICAgICAoY2xvbmVOb2RlIGFzIEVsZW1lbnQpLnJlbW92ZUF0dHJpYnV0ZShcInotZm9yXCIpO1xuXG4gICAgICAgIGlmIChsYXN0Tm9kZSkge1xuICAgICAgICAgIGluc2VydEFmdGVyKGNsb25lTm9kZSwgbGFzdE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9wYXJlbnROb2RlPy5hcHBlbmRDaGlsZChjbG9uZU5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3ROb2RlID0gY2xvbmVOb2RlO1xuICAgICAgICBmb3JOb2Rlcy5wdXNoKGNsb25lTm9kZSk7XG4gICAgICAgIGNvbnN0IGNoaWxkVm0gPSBjcmVhdGVWTShcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZW1wbGF0ZTogY2xvbmVOb2RlIGFzIEVsZW1lbnQsXG4gICAgICAgICAgICBkYXRhOiBpbmRleFxuICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgIFt2YWx1ZV06IGl0ZW1zW2ldLFxuICAgICAgICAgICAgICAgICAgW2luZGV4XTogaSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgW3ZhbHVlXTogaXRlbXNbaV0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG5cbiAgICAgICAgbmV3IENvbXBpbGUoY2xvbmVOb2RlLCBjaGlsZFZtLCB7XG4gICAgICAgICAgY29tcGlsZVJvb3Q6IHRydWUsXG4gICAgICAgIH0pLm1vdW50KCk7XG4gICAgICAgIGxhc3ROb2RlID0gY2xvbmVOb2RlO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG59O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGluc2VydEFmdGVyKG5ld05vZGU6IE5vZGUsIHJlZmVyZW5jZU5vZGU6IE5vZGUpIHtcbiAgcmVmZXJlbmNlTm9kZT8ucGFyZW50Tm9kZT8uaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUubmV4dFNpYmxpbmcpO1xufVxuIiwiLy8g5qC55o2uYS5iLmPorr7nva7mlbDmja5cbmV4cG9ydCBmdW5jdGlvbiBzZXRWYWx1ZUJ5UGF0aChvYmo6IG9iamVjdCwgcGF0aDogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gIGNvbnN0IHBhdGhzID0gcGF0aC5zcGxpdChcIi5cIik7XG4gIGNvbnN0IGxlbiA9IHBhdGhzLmxlbmd0aDtcbiAgbGV0IGkgPSAwO1xuICB3aGlsZSAoaSA8IGxlbiAtIDEpIHtcbiAgICBvYmogPSBvYmpbcGF0aHNbaSsrXV07XG4gIH1cbiAgb2JqW3BhdGhzW2ldXSA9IHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVCeVBhdGgob2JqOiBvYmplY3QsIHBhdGg6IHN0cmluZykge1xuICBjb25zdCBwYXRocyA9IHBhdGguc3BsaXQoXCIuXCIpO1xuXG4gIGNvbnN0IGxlbiA9IHBhdGhzLmxlbmd0aDtcbiAgbGV0IGkgPSAwO1xuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIG9iaiA9IG9ialtwYXRoc1tpKytdXTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vLyDmqKHmi593aXRoXG5leHBvcnQgZnVuY3Rpb24gX3dpdGgoc2NvcGVOYW1lOiBzdHJpbmcsIGV4cDogc3RyaW5nKSB7XG4gIC8v5Y676Zmk56m65qC8XG4gIGV4cCA9IGV4cC5yZXBsYWNlKC9cXHMvZywgXCJcIik7XG4gIGV4cCA9IFwiIFwiICsgZXhwO1xuICBjb25zdCBxdWlja1JlZ2V4ID1cbiAgICAvKFtcXCg6LFxcc1xcK1xcLVxcKlxcLyUmXFx8XFxeIVxcKn5dXFxzKj8pKChbYS16QS1aXyRdW2EtekEtWl8kMC05XSopKS9nO1xuICAvLyBqYXZhc2NyaXB0IOWFs+mUruWtl+eahOato+WImVxuICBjb25zdCBib29sUmVnZXggPSAvKHRydWV8ZmFsc2V8bnVsbHx1bmRlZmluZWQpL2c7XG5cbiAgZXhwID0gZXhwLnJlcGxhY2UocXVpY2tSZWdleCwgKF9hLCBiLCBjKSA9PiB7XG4gICAgcmV0dXJuIGJvb2xSZWdleC50ZXN0KGMpID8gYiArIGMgOiBiICsgc2NvcGVOYW1lICsgXCIuXCIgKyBjO1xuICB9KTtcblxuICByZXR1cm4gZXhwO1xufVxuXG4vLyDop6PmnpBKYXZhU2NyaXB06KGo6L6+5byP77yM5Yqg5YWl5LiK5LiL5paH5a+56LGh77yM6L+U5Zue6KGo6L6+5byP5pyA5ZCO55qE5YC8XG5leHBvcnQgZnVuY3Rpb24gcnVuSW5TY29wZShzY29wZTogb2JqZWN0LCBzY29wZU5hbWU6IHN0cmluZywgZXhwOiBzdHJpbmcpIHtcbiAgY29uc3QgZnVuYyA9IG5ldyBGdW5jdGlvbihzY29wZU5hbWUsIFwicmV0dXJuIFwiICsgX3dpdGgoc2NvcGVOYW1lLCBleHApKTtcbiAgcmV0dXJuIGZ1bmMoc2NvcGUpO1xufVxuIiwiaW1wb3J0IHsgZWZmZWN0LCB3YXRjaCB9IGZyb20gXCIuLi9tYWluXCI7XHJcbmltcG9ydCB7IEFwcCwgcHJvcHNUeXBlLCBWTSB9IGZyb20gXCIuLi96dm0vdHlwZVwiO1xyXG5pbXBvcnQgeyBDb21waWxlQ29tcCB9IGZyb20gXCIuL2NvbXBpbGVDb21wXCI7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL3JlbmRlclwiO1xyXG5pbXBvcnQgeyBDdXN0b21EaXJlY3RpdmUsIEN1c3RvbURpcmVjdGl2ZUZuIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5pbXBvcnQgeyBnZXRWYWx1ZUJ5UGF0aCwgcnVuSW5TY29wZSwgc2V0VmFsdWVCeVBhdGggfSBmcm9tIFwiLi91dGlsXCI7XHJcblxyXG5jb25zdCBjdXN0b21EaXJlY3RpdmVzOiBDdXN0b21EaXJlY3RpdmUgPSB7fTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRpcmVjdGl2ZShuYW1lOiBzdHJpbmcsIGZuOiBDdXN0b21EaXJlY3RpdmVGbikge1xyXG4gIGN1c3RvbURpcmVjdGl2ZXNbbmFtZS50b0xvd2VyQ2FzZSgpXSA9IGZuO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEaXJlY3RpdmUoZGlyZWN0aXZlOiBzdHJpbmcpIHtcclxuICBjb25zdCBkaXJlY3RpdmVSZWcgPSAvXnotKFxcdyspXFxzKig6KFxcdyopKT8kLztcclxuXHJcbiAgY29uc3QgbWF0Y2hEaXJlY3RpdmUgPSBkaXJlY3RpdmUubWF0Y2goZGlyZWN0aXZlUmVnKTtcclxuXHJcbiAgaWYgKCFtYXRjaERpcmVjdGl2ZSkgcmV0dXJuIHt9O1xyXG5cclxuICBjb25zdCBuYW1lID0gbWF0Y2hEaXJlY3RpdmVbMV07XHJcbiAgY29uc3QgYXJnID0gbWF0Y2hEaXJlY3RpdmVbM107XHJcbiAgcmV0dXJuIHtcclxuICAgIG5hbWUsXHJcbiAgICBhcmcsXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXJDb21wRGlyZWN0aXZlKFxyXG4gIG5vZGU6IE5vZGUsXHJcbiAgdm06IFZNLFxyXG4gIGRpcmVjdGl2ZTogc3RyaW5nLFxyXG4gIGV4cHJlc3Npb246IHN0cmluZyxcclxuICBhcHBzOiBTZXQ8QXBwPlxyXG4pIHtcclxuICBjb25zdCB7IG5hbWUsIGFyZyB9ID0gcGFyc2VEaXJlY3RpdmUoZGlyZWN0aXZlKTtcclxuICBpZiAoIW5hbWUgfHwgIWFyZykgcmV0dXJuO1xyXG4gIGNvbnNvbGUubG9nKFwidHJpZ2dlckNvbXBEaXJlY3RpdmVcIiwgbmFtZSwgYXJnKTtcclxuXHJcbiAgaWYgKGNvbXBEaXJlY3RpdmVzW25hbWVdKSB7XHJcbiAgICBjb21wRGlyZWN0aXZlc1tuYW1lXShub2RlLCB2bSwgZGlyZWN0aXZlLCBleHByZXNzaW9uLCBhcHBzKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjb21wRGlyZWN0aXZlcyA9IHtcclxuICBvbihcclxuICAgIG5vZGU6IEVsZW1lbnQsXHJcbiAgICB2bTogVk0sXHJcbiAgICBkaXJlY3RpdmU6IHN0cmluZyxcclxuICAgIGV4cHJlc3Npb246IHN0cmluZyxcclxuICAgIGFwcHM6IFNldDxBcHA+XHJcbiAgKSB7XHJcbiAgICAvLyB6LW9uOmNsaWNrIC0+IGNsaWNrXHJcbiAgICAvLyDlh73mlbDosIPnlKhcclxuICAgIGNvbnNvbGUubG9nKFwib25cIiwgZGlyZWN0aXZlLCBleHByZXNzaW9uKTtcclxuXHJcbiAgICBjb25zdCBtZXRob2RSZWcgPSAvXihcXHcrKT8vO1xyXG4gICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24ucmVwbGFjZSgvXFxzL2csIFwiXCIpO1xyXG4gICAgY29uc3QgbWF0Y2hNZXRob2QgPSBleHByZXNzaW9uLm1hdGNoKG1ldGhvZFJlZyk7XHJcbiAgICBjb25zb2xlLmxvZyhcIm1hdGNoTWV0aG9kXCIsIG1hdGNoTWV0aG9kKTtcclxuXHJcbiAgICBpZiAoIW1hdGNoTWV0aG9kKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgbWV0aG9kID0gbWF0Y2hNZXRob2RbMV07XHJcblxyXG4gICAgY29uc3QgZXZlbnRUeXBlID0gZGlyZWN0aXZlLnNwbGl0KFwiOlwiKVsxXTtcclxuXHJcbiAgICBjb25zdCBmbiA9IHZtICYmIHZtW21ldGhvZF07XHJcbiAgICBpZiAoZXZlbnRUeXBlICYmIGZuKSB7XHJcbiAgICAgIGNvbnN0IGV2ZW50SGFuZGxlciA9ICguLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gICAgICAgIGZuLmFwcGx5KHZtLCBhcmdzKTtcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgdW5kc3Vic2NyaWJlID0gdm0ucHVic3ViPy5zdWJzY3JpYmUoZXZlbnRUeXBlLCBldmVudEhhbmRsZXIpO1xyXG4gICAgICBhcHBzLmZvckVhY2goKGFwcCkgPT4ge1xyXG4gICAgICAgIGFwcC52bS4kZW1pdCA9IChldmVudFR5cGUsIC4uLmFyZ3MpID0+IHtcclxuICAgICAgICAgIHZtLnB1YnN1Yj8ucHVibGlzaChldmVudFR5cGUsIC4uLmFyZ3MpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgYXBwLnZtLl91bnN1YnNjcmliZXMuYWRkKHVuZHN1YnNjcmliZSEpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBtb2RlbChub2RlOiBIVE1MSW5wdXRFbGVtZW50LCB2bTogVk0sIGRpcmVjdGl2ZTogc3RyaW5nLCBleHByZXNzaW9uOiBzdHJpbmcpIHtcclxuICAgIC8vIFRPRE8gYmluZCBpbnB1dFxyXG5cclxuICAgIHRoaXMudGV4dChub2RlLCB2bSwgZGlyZWN0aXZlLCBleHByZXNzaW9uKTtcclxuXHJcbiAgICAvLyDlpoLmnpzmmK9pbnB1dFxyXG4gICAgaWYgKFxyXG4gICAgICAobm9kZS50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgbm9kZS50eXBlID09PSBcInRleHRcIikgfHxcclxuICAgICAgbm9kZS50YWdOYW1lID09PSBcIlRFWFRBUkVBXCJcclxuICAgICkge1xyXG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoZTogRXZlbnQpID0+IHtcclxuICAgICAgICBzZXRWYWx1ZUJ5UGF0aChcclxuICAgICAgICAgIHZtLiRkYXRhLFxyXG4gICAgICAgICAgZXhwcmVzc2lvbixcclxuICAgICAgICAgIChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vIOWmguaenOaYr2NoZWNrYm94XHJcbiAgICBpZiAobm9kZS50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgbm9kZS50eXBlID09PSBcImNoZWNrYm94XCIpIHtcclxuICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChlOiBFdmVudCkgPT4ge1xyXG4gICAgICAgIHNldFZhbHVlQnlQYXRoKFxyXG4gICAgICAgICAgdm0uJGRhdGEsXHJcbiAgICAgICAgICBleHByZXNzaW9uLFxyXG4gICAgICAgICAgKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWRcclxuICAgICAgICApO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIC8v5aaC5p6c5pivcmFkaW9cclxuICAgIGlmIChub2RlLnRhZ05hbWUgPT09IFwiSU5QVVRcIiAmJiBub2RlLnR5cGUgPT09IFwicmFkaW9cIikge1xyXG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGU6IEV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0VmFsdWVCeVBhdGgoXHJcbiAgICAgICAgICB2bS4kZGF0YSxcclxuICAgICAgICAgIGV4cHJlc3Npb24sXHJcbiAgICAgICAgICAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWVcclxuICAgICAgICApO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyDpgJrnlKjlh73mlbDvvIzml6LpgILnlKh6LXRleHTvvIzkuZ/pgILnlKh7e3RleHR9fVxyXG4gIHRleHQoXHJcbiAgICBub2RlOiBOb2RlLFxyXG4gICAgdm06IFZNLFxyXG4gICAgX2RpcmVjdGl2ZTogc3RyaW5nLFxyXG4gICAgZXhwcmVzc2lvbjogc3RyaW5nLFxyXG4gICAgcmVwbGFjZSA9IFwiXCJcclxuICApIHtcclxuICAgIGNvbnN0IHJlbmRlckZuID0gcmVuZGVyW1widGV4dFJlbmRlclwiXTtcclxuXHJcbiAgICBpZiAocmVuZGVyRm4pIHtcclxuICAgICAgd2F0Y2goXHJcbiAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHJ1bkluU2NvcGUodm0sIFwic2NvcGVcIiwgZXhwcmVzc2lvbik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAobmV3VmFsdWUpID0+IHtcclxuICAgICAgICAgIHJlbmRlckZuICYmIHJlbmRlckZuKG5vZGUsIG5ld1ZhbHVlLCByZXBsYWNlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZSxcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgaWYoXHJcbiAgICBub2RlOiBIVE1MRWxlbWVudCxcclxuICAgIHZtOiBWTSxcclxuICAgIF9kaXJlY3RpdmU6IHN0cmluZyxcclxuICAgIGV4cHJlc3Npb246IHN0cmluZyxcclxuICAgIGNvbXBpbGVDb21wOiBDb21waWxlQ29tcCAvLyDnvJbor5Hnu4Tku7blrp7kvotcclxuICApIHtcclxuICAgIC8vIGNvbnN0IG5leHQgPSBub2RlLm5leHRFbGVtZW50U2libGluZztcclxuXHJcbiAgICAvLyBUT0RPIHotZWxzZVxyXG4gICAgLy8gbGV0IGVsc2VOb2RlOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG4gICAgLy8gaWYgKG5leHQgJiYgbmV4dC5nZXRBdHRyaWJ1dGUoXCJ6LWVsc2VcIikgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgLy8gICBlbHNlTm9kZSA9IG5leHQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAvLyB9XHJcbiAgICBsZXQgYXBwOiBBcHA7XHJcbiAgICBjb25zdCB1cGRhdGVkID0gKG5ld3ZhbHVlOiBib29sZWFuKSA9PiB7XHJcbiAgICAgIGlmIChuZXd2YWx1ZSkge1xyXG4gICAgICAgIGFwcCA9IGNvbXBpbGVDb21wLmNyZWF0ZUNvbXBBcHAoKTtcclxuXHJcbiAgICAgICAgY29tcGlsZUNvbXAubW91bnRlZChhcHApO1xyXG5cclxuICAgICAgICAvLyBlbHNlTm9kZSAmJiAoZWxzZU5vZGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb21waWxlQ29tcC51bm1vdW50ZWQoYXBwKTtcclxuICAgICAgICAvLyBlbHNlTm9kZSAmJiAoZWxzZU5vZGUuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB3YXRjaChcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiAhIXJ1bkluU2NvcGUodm0sIFwic2NvcGVcIiwgZXhwcmVzc2lvbik7XHJcbiAgICAgIH0sXHJcbiAgICAgIHVwZGF0ZWQsXHJcbiAgICAgIHtcclxuICAgICAgICBpbW1lZGlhdGU6IHRydWUsXHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfSxcclxuXHJcbiAgZm9yKG5vZGU6IEhUTUxFbGVtZW50LCB2bTogVk0sIF9kaXJlY3RpdmU6IHN0cmluZywgZXhwcmVzc2lvbjogc3RyaW5nKSB7XHJcbiAgICAvL+WOu+mZpOepuuagvFxyXG4gICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24ucmVwbGFjZSgvXFxzL2csIFwiXCIpO1xyXG4gICAgY29uc3QgUkVGX0xJU1RfRk9SID0gLyhbKF0oXFx3KygsXFx3Kyk/KVspXXwoXFx3KykpaW4oXFx3KykvO1xyXG4gICAgY29uc3QgZm9yTWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKFJFRl9MSVNUX0ZPUik7XHJcblxyXG4gICAgaWYgKGZvck1hdGNoKSB7XHJcbiAgICAgIGNvbnN0IFssICwgdmFsdWVzLCAsICwgbGlzdF0gPSBmb3JNYXRjaDtcclxuICAgICAgbGV0IHZhbHVlID0gZm9yTWF0Y2hbMV07XHJcbiAgICAgIGxldCBpbmRleDogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICBpZiAodmFsdWVzKSB7XHJcbiAgICAgICAgLy8g5Y675bem5Y+z5ous5Y+3XHJcbiAgICAgICAgW3ZhbHVlLCBpbmRleF0gPSB2YWx1ZXMuc3BsaXQoXCIsXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCByZW5kZXJGb3IgPSByZW5kZXIuZm9yUmVuZGVyKG5vZGUpO1xyXG4gICAgICBlZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHJlbmRlckZvcih2YWx1ZSwgaW5kZXgsIHJ1bkluU2NvcGUodm0sIFwic2NvcGVcIiwgbGlzdCksIHZtKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgYmluZChcclxuICAgIG5vZGU6IE5vZGUsXHJcbiAgICB2bTogVk0sXHJcbiAgICBkaXJlY3RpdmU6IHN0cmluZyxcclxuICAgIGV4cHJlc3Npb246IHN0cmluZyxcclxuICAgIHtcclxuICAgICAgcHJvcHMsXHJcbiAgICAgIGF0dHJzLFxyXG4gICAgfToge1xyXG4gICAgICBwcm9wczogcHJvcHNUeXBlO1xyXG4gICAgICBhdHRyczogb2JqZWN0O1xyXG4gICAgfVxyXG4gICkge1xyXG4gICAgY29uc3QgZGlyU3BsaXQgPSBkaXJlY3RpdmUuc3BsaXQoXCI6XCIpO1xyXG5cclxuICAgIGNvbnN0IGRpciA9IGRpclNwbGl0Lmxlbmd0aCA+IDEgPyBkaXJTcGxpdFsxXSA6IGRpcmVjdGl2ZTtcclxuICAgIGNvbnNvbGUubG9nKHByb3BzKTtcclxuXHJcbiAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkoZGlyKSkge1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IHJ1bkluU2NvcGUodm0sIFwic2NvcGVcIiwgZXhwcmVzc2lvbik7XHJcbiAgICAgIGNvbnNvbGUubG9nKHZhbHVlKTtcclxuXHJcbiAgICAgIGlmIChPYmplY3QodmFsdWUpIGluc3RhbmNlb2YgcHJvcHNbZGlyXS50eXBlKSB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzW2Rpcl0sIFwiZGVmYXVsdFwiLCB7XHJcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgZ2V0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcnVuSW5TY29wZSh2bSwgXCJzY29wZVwiLCBleHByZXNzaW9uKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGAke2Rpcn0gaXMgbm90IGEgJHtwcm9wc1tkaXJdLnR5cGUubmFtZX1gKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGF0dHJzLCBkaXIsIHtcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICBnZXQoKSB7XHJcbiAgICAgICAgICByZXR1cm4gcnVuSW5TY29wZSh2bSwgXCJzY29wZVwiLCBleHByZXNzaW9uKTtcclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBsZXQgcmVuZGVyRm4gPSByZW5kZXJbZGlyICsgXCJSZW5kZXJcIl07XHJcbiAgICAvLyBpZiAoIXJlbmRlckZuKSB7XHJcbiAgICAvLyAgIHJlbmRlckZuID0gcmVuZGVyLmF0dHJSZW5kZXIoZGlyKTtcclxuICAgIC8vIH1cclxuICAgIC8vIGlmIChyZW5kZXJGbikge1xyXG4gICAgLy8gICBlZmZlY3QoKCkgPT4ge1xyXG4gICAgLy8gICAgIHJlbmRlckZuKG5vZGUsIHJ1bkluU2NvcGUodm0sIFwic2NvcGVcIiwgZXhwcmVzc2lvbikpO1xyXG4gICAgLy8gICB9KTtcclxuICAgIC8vIH1cclxuICB9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBjcmVhdGVBcHAgfSBmcm9tIFwiLi4vbWFpblwiO1xyXG5pbXBvcnQgeyBBcHAsIHByb3BzVHlwZSwgVk0sIFp2bU9wdGlvbnMgfSBmcm9tIFwiLi4venZtL3R5cGVcIjtcclxuaW1wb3J0IHsgRElSX0JJTkRfUkVHLCBESVJfRk9SX1JFRywgRElSX0lGX1JFRywgRElSX1JFRyB9IGZyb20gXCIuL2NvbnN0YW50XCI7XHJcblxyXG5pbXBvcnQgeyBjb21wRGlyZWN0aXZlcywgdHJpZ2dlckNvbXBEaXJlY3RpdmUgfSBmcm9tIFwiLi9kaXJlY3RpdmVzQ29tcFwiO1xyXG5cclxuLy8g57yW6K+R5qih5p2/5Lit55qE57uE5Lu2XHJcbmV4cG9ydCBjbGFzcyBDb21waWxlQ29tcCB7XHJcbiAgY29tcG9uZW50TmFtZTogc3RyaW5nO1xyXG4gIG5vZGU6IE5vZGU7XHJcbiAgcGFyZW50Vm06IFZNO1xyXG4gIGNvbW1lbnQ6IE5vZGUgfCB1bmRlZmluZWQ7XHJcbiAgLy8g5Y+v6IO95pyJ5aSa5Liq5a2Q57uE5Lu2KGZvcuW+queOr+eahOaDheWGtSlcclxuICBhcHBzOiBTZXQ8QXBwPiA9IG5ldyBTZXQoKTtcclxuICBhdHRyczogTWFwPGFueSwgc3RyaW5nPiA9IG5ldyBNYXAoKTtcclxuICBwcm9wczogb2JqZWN0ID0ge307XHJcbiAgY29tcG9uZW50OiBadm1PcHRpb25zIHwgdW5kZWZpbmVkO1xyXG4gIGNvbnN0cnVjdG9yKG5vZGU6IEVsZW1lbnQsIHBhcmVudFZtOiBWTSkge1xyXG4gICAgdGhpcy5ub2RlID0gbm9kZTtcclxuICAgIHRoaXMucGFyZW50Vm0gPSBwYXJlbnRWbTtcclxuICAgIHRoaXMuY29tcG9uZW50TmFtZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgIC8vIHRoaXMuY29tcGlsZU5vZGUobm9kZSwgdm0pO1xyXG4gICAgdGhpcy5jb21wb25lbnQgPSB0aGlzLnBhcmVudFZtLiRjb21wb25lbnRzPy5bdGhpcy5jb21wb25lbnROYW1lXTtcclxuXHJcbiAgICBpZiAoIXRoaXMuY29tcG9uZW50KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY29tcG9uZW50ICR7dGhpcy5jb21wb25lbnROYW1lfSBub3QgZm91bmRgKTtcclxuICAgIH1cclxuICAgIHRoaXMuaW5pdEF0dHJzKCk7XHJcblxyXG4gICAgdGhpcy5pbml0QXBwKCk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVDb21wQXBwKCkge1xyXG4gICAgY29uc3QgYXBwID0gY3JlYXRlQXBwKHRoaXMuY29tcG9uZW50ISk7XHJcbiAgICAvLyDpooTnvJbor5Hnu4Tku7ZcclxuICAgIGFwcC52bS5fcnVuQ29tcGlsZSgpO1xyXG4gICAgdGhpcy5hcHBzLmFkZChhcHApO1xyXG4gICAgLy8gcmV0dXJuIGFwcDtcclxuXHJcbiAgICByZXR1cm4gYXBwO1xyXG4gIH1cclxuXHJcbiAgbW91bnRlZChhcHA6IEFwcCkge1xyXG4gICAgdGhpcy5jb21waWxlRGlyZWN0aXZlcygpO1xyXG4gICAgYXBwLnZtLmNvbXBpbGU/Lm1vdW50KHRoaXMubm9kZSwgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICB1bm1vdW50ZWQoYXBwOiBBcHApIHtcclxuICAgIGlmICghYXBwKSByZXR1cm47XHJcbiAgICBhcHAuZGVzdHJveSAmJiBhcHAuZGVzdHJveSgpO1xyXG4gICAgdGhpcy5hcHBzLmRlbGV0ZShhcHApO1xyXG4gICAgdGhpcy5ub2RlLnBhcmVudE5vZGU/LnJlcGxhY2VDaGlsZCh0aGlzLmNvbW1lbnQhLCB0aGlzLm5vZGUpO1xyXG4gIH1cclxuXHJcbiAgLy8g5Yid5aeL5YyW57uE5Lu2LOi/memHjOmcgOimgeWvuee7hOS7tuS4iueahHotaWblkox6LWZvcui/m+ihjOmihOWkhOeQhlxyXG4gIGluaXRBcHAoKSB7XHJcbiAgICBjb25zdCBjb21wb25lbnRQcm9wcyA9IHRoaXMuY29tcG9uZW50IS5wcm9wcztcclxuICAgIGNvbnN0IGF0dHJzID0gdGhpcy5jb21wb25lbnQhLmF0dHJzO1xyXG4gICAgdGhpcy5hdHRycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgIC8vIOWcqOe7hOS7tua4suafk+WJjeWFiOWvuXotYmluZOi/m+ihjOWkhOeQhlxyXG4gICAgICBpZiAoRElSX0JJTkRfUkVHLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgIGNvbXBEaXJlY3RpdmVzLmJpbmQodGhpcy5ub2RlLCB0aGlzLnBhcmVudFZtLCBrZXksIHZhbHVlLCB7XHJcbiAgICAgICAgICBwcm9wczogY29tcG9uZW50UHJvcHMgfHwge30sXHJcbiAgICAgICAgICBhdHRyczogYXR0cnMgfHwge30sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5hdHRycy5kZWxldGUoa2V5KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHRoaXMuYXR0cnMuZ2V0KFwiei1pZlwiKSkge1xyXG4gICAgICAvLyDliJvlu7rms6jph4rnu5PngrksIOeUqOadpeaYvuekuumakOiXj+eahOaXtuWAmeWBmuabv+aNolxyXG4gICAgICB0aGlzLmNvbW1lbnQgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiei1pZlwiKTtcclxuICAgICAgdGhpcy5ub2RlLnBhcmVudE5vZGU/LnJlcGxhY2VDaGlsZCh0aGlzLmNvbW1lbnQsIHRoaXMubm9kZSk7XHJcbiAgICAgIHRoaXMubm9kZSA9IHRoaXMuY29tbWVudDtcclxuICAgICAgY29tcERpcmVjdGl2ZXNbXCJpZlwiXShcclxuICAgICAgICB0aGlzLm5vZGUgYXMgSFRNTEVsZW1lbnQsXHJcbiAgICAgICAgdGhpcy5wYXJlbnRWbSxcclxuICAgICAgICBcImlmXCIsXHJcbiAgICAgICAgdGhpcy5hdHRycy5nZXQoXCJ6LWlmXCIpIHx8IFwiXCIsXHJcbiAgICAgICAgdGhpc1xyXG4gICAgICApO1xyXG4gICAgICB0aGlzLmF0dHJzLmRlbGV0ZShcInotaWZcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyDmsqHmnIlpZu+8jOebtOaOpeWIm+W7uuW5tuaMgui9vVxyXG4gICAgICBjb25zdCBhcHAgPSB0aGlzLmNyZWF0ZUNvbXBBcHAoKTtcclxuICAgICAgdGhpcy5tb3VudGVkKGFwcCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyDlsIbnu4Tku7bkuIrlsZ7mgKfpg73lrZjlgqjliLBhdHRyc+S4re+8jOaWueS+v+WQjue7reS9v+eUqFxyXG4gIGluaXRBdHRycygpIHtcclxuICAgIEFycmF5LmZyb20oKHRoaXMubm9kZSBhcyBFbGVtZW50KS5hdHRyaWJ1dGVzKS5mb3JFYWNoKChhdHRyOiBBdHRyKSA9PiB7XHJcbiAgICAgIC8vIGF0dHIubm9kZU5hbWXkuI3ljLrliIblpKflsI/lhplcclxuICAgICAgY29uc3QgZGlyZWN0aXZlID0gYXR0ci5ub2RlTmFtZTtcclxuICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IGF0dHIubm9kZVZhbHVlIHx8IFwiXCI7XHJcbiAgICAgIHRoaXMuYXR0cnMuc2V0KGRpcmVjdGl2ZSwgZXhwcmVzc2lvbik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNvbXBpbGVEaXJlY3RpdmVzKCkge1xyXG4gICAgdGhpcy5hdHRycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgIGlmIChESVJfUkVHLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IGtleTtcclxuICAgICAgICBjb25zdCBleHByZXNzaW9uID0gdmFsdWU7XHJcbiAgICAgICAgdHJpZ2dlckNvbXBEaXJlY3RpdmUoXHJcbiAgICAgICAgICB0aGlzLm5vZGUsXHJcbiAgICAgICAgICB0aGlzLnBhcmVudFZtLFxyXG4gICAgICAgICAgZGlyZWN0aXZlLFxyXG4gICAgICAgICAgZXhwcmVzc2lvbixcclxuICAgICAgICAgIHRoaXMuYXBwc1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gKHRoaXMubm9kZSBhcyBFbGVtZW50KS5yZW1vdmVBdHRyaWJ1dGUoZGlyZWN0aXZlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBhdHRyc1xyXG4gICAgICAgIHRoaXMuYXBwcy5mb3JFYWNoKChhcHApID0+IHtcclxuICAgICAgICAgIGFwcC52bS4kYXR0cnNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgZWZmZWN0LCB3YXRjaCB9IGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBWTSB9IGZyb20gXCIuLi96dm0vdHlwZVwiO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vcmVuZGVyXCI7XG5pbXBvcnQgeyBDdXN0b21EaXJlY3RpdmUsIEN1c3RvbURpcmVjdGl2ZUZuIH0gZnJvbSBcIi4vdHlwZVwiO1xuaW1wb3J0IHsgZ2V0VmFsdWVCeVBhdGgsIHJ1bkluU2NvcGUsIHNldFZhbHVlQnlQYXRoIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5jb25zdCBjdXN0b21EaXJlY3RpdmVzOiBDdXN0b21EaXJlY3RpdmUgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGlyZWN0aXZlKG5hbWU6IHN0cmluZywgZm46IEN1c3RvbURpcmVjdGl2ZUZuKSB7XG4gIGN1c3RvbURpcmVjdGl2ZXNbbmFtZS50b0xvd2VyQ2FzZSgpXSA9IGZuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEaXJlY3RpdmUoZGlyZWN0aXZlOiBzdHJpbmcpIHtcbiAgY29uc3QgZGlyZWN0aXZlUmVnID0gL156LShcXHcrKVxccyooOihcXHcqKSk/JC87XG5cbiAgY29uc3QgbWF0Y2hEaXJlY3RpdmUgPSBkaXJlY3RpdmUubWF0Y2goZGlyZWN0aXZlUmVnKTtcblxuICBpZiAoIW1hdGNoRGlyZWN0aXZlKSByZXR1cm4ge307XG5cbiAgY29uc3QgbmFtZSA9IG1hdGNoRGlyZWN0aXZlWzFdO1xuICBjb25zdCBhcmcgPSBtYXRjaERpcmVjdGl2ZVszXTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lLFxuICAgIGFyZyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXJEaXJlY3RpdmUoXG4gIG5vZGU6IE5vZGUsXG4gIHZtOiBWTSxcbiAgZGlyZWN0aXZlOiBzdHJpbmcsXG4gIGV4cHJlc3Npb246IHN0cmluZ1xuKSB7XG4gIGNvbnN0IHsgbmFtZSwgYXJnIH0gPSBwYXJzZURpcmVjdGl2ZShkaXJlY3RpdmUpO1xuXG4gIGlmICghbmFtZSkgcmV0dXJuO1xuICBpZiAoZGlyZWN0aXZlc1tuYW1lXSkge1xuICAgIGRpcmVjdGl2ZXNbbmFtZV0obm9kZSwgdm0sIGRpcmVjdGl2ZSwgZXhwcmVzc2lvbik7XG4gIH0gZWxzZSBpZiAoY3VzdG9tRGlyZWN0aXZlc1tuYW1lXSkge1xuICAgIHZtLnB1YnN1Yj8uc3Vic2NyaWJlKFwibW91bnRlZFwiLCAoKSA9PiB7XG4gICAgICB3YXRjaChcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBydW5JblNjb3BlKHZtLCBcInNjb3BlXCIsIGV4cHJlc3Npb24pO1xuICAgICAgICB9LFxuICAgICAgICAobmV3VmFsOiBhbnkpID0+IHtcbiAgICAgICAgICBjdXN0b21EaXJlY3RpdmVzW25hbWVdKG5vZGUsIHsgYXJnLCB2YWx1ZTogbmV3VmFsIH0pO1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaW1tZWRpYXRlOiB0cnVlLFxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBkaXJlY3RpdmVzID0ge1xuICBvbihub2RlOiBFbGVtZW50LCB2bTogVk0sIGRpcmVjdGl2ZTogc3RyaW5nLCBleHByZXNzaW9uOiBzdHJpbmcpIHtcbiAgICAvLyB6LW9uOmNsaWNrIC0+IGNsaWNrXG4gICAgLy8g5Ye95pWw6LCD55SoXG5cbiAgICBjb25zdCBtZXRob2RSZWcgPSAvXihcXHcrKShbKF0oKCw/WyQnXFx3J10rKSspWyldKT8vO1xuICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2UoL1xccy9nLCBcIlwiKTtcbiAgICBjb25zdCBtYXRjaE1ldGhvZCA9IGV4cHJlc3Npb24ubWF0Y2gobWV0aG9kUmVnKTtcblxuICAgIGlmICghbWF0Y2hNZXRob2QpIHJldHVybjtcblxuICAgIGNvbnN0IG1ldGhvZCA9IG1hdGNoTWV0aG9kWzFdO1xuICAgIGNvbnN0IG1ldGhvZEFyZ3M6IGFueVtdID0gW107XG5cbiAgICBjb25zdCBzaW5nbGVSZWcgPSAvXicoLiopJyQvO1xuICAgIGNvbnN0ICRldmVudFJlZyA9IC8oXFwkZXZlbnQpJC87XG4gICAgLy8g5aaC5p6c6IO95p+l5YiwJGV2ZW505bCx5oqK5L2N572u6K6w5LiL5p2lXG4gICAgbGV0ICRldmVudElkeCA9IC0xO1xuICAgIGlmIChtYXRjaE1ldGhvZCAmJiBtYXRjaE1ldGhvZFszXSkge1xuICAgICAgLy8g5Y676Zmk5ous5Y+3XG5cbiAgICAgIGNvbnN0IGFyZ3MgPSBtYXRjaE1ldGhvZFszXS5zcGxpdChcIixcIik7XG4gICAgICBhcmdzLmZvckVhY2goKGFyZykgPT4ge1xuICAgICAgICAvLyDljLnphY3liLDljZXlvJXlj7flsLHmmK/mma7pgJrnmoTlrZfnrKbkuLJcbiAgICAgICAgaWYgKHNpbmdsZVJlZy50ZXN0KGFyZykpIHtcbiAgICAgICAgICAvLyDljrvpmaTljZXlvJXlj7dcbiAgICAgICAgICBtZXRob2RBcmdzLnB1c2goYXJnLnJlcGxhY2Uoc2luZ2xlUmVnLCBcIiQxXCIpKTtcbiAgICAgICAgfSBlbHNlIGlmICgkZXZlbnRSZWcudGVzdChhcmcpKSB7XG4gICAgICAgICAgbWV0aG9kQXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgJGV2ZW50SWR4ID0gbWV0aG9kQXJncy5sZW5ndGggLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1ldGhvZEFyZ3MucHVzaChnZXRWYWx1ZUJ5UGF0aCh2bS4kZGF0YSwgYXJnKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBldmVudFR5cGUgPSBkaXJlY3RpdmUuc3BsaXQoXCI6XCIpWzFdO1xuXG4gICAgY29uc3QgZm4gPSB2bSAmJiB2bVttZXRob2RdO1xuXG4gICAgaWYgKGV2ZW50VHlwZSAmJiBmbikge1xuICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgKGUpID0+IHtcbiAgICAgICAgaWYgKCEhfiRldmVudElkeCkge1xuICAgICAgICAgIG1ldGhvZEFyZ3Muc3BsaWNlKCRldmVudElkeCwgMSwgZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtZXRob2RBcmdzLmxlbmd0aCkge1xuICAgICAgICAgIG1ldGhvZEFyZ3MucHVzaChlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh2bSwgLi4ubWV0aG9kQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgbW9kZWwobm9kZTogSFRNTElucHV0RWxlbWVudCwgdm06IFZNLCBkaXJlY3RpdmU6IHN0cmluZywgZXhwcmVzc2lvbjogc3RyaW5nKSB7XG4gICAgLy8gVE9ETyBiaW5kIGlucHV0XG5cbiAgICB0aGlzLnRleHQobm9kZSwgdm0sIGRpcmVjdGl2ZSwgZXhwcmVzc2lvbik7XG5cbiAgICAvLyDlpoLmnpzmmK9pbnB1dFxuICAgIGlmIChcbiAgICAgIChub2RlLnRhZ05hbWUgPT09IFwiSU5QVVRcIiAmJiBub2RlLnR5cGUgPT09IFwidGV4dFwiKSB8fFxuICAgICAgbm9kZS50YWdOYW1lID09PSBcIlRFWFRBUkVBXCJcbiAgICApIHtcbiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIChlOiBFdmVudCkgPT4ge1xuICAgICAgICBzZXRWYWx1ZUJ5UGF0aChcbiAgICAgICAgICB2bS4kZGF0YSxcbiAgICAgICAgICBleHByZXNzaW9uLFxuICAgICAgICAgIChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZVxuICAgICAgICApO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8g5aaC5p6c5pivY2hlY2tib3hcbiAgICBpZiAobm9kZS50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgbm9kZS50eXBlID09PSBcImNoZWNrYm94XCIpIHtcbiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgc2V0VmFsdWVCeVBhdGgoXG4gICAgICAgICAgdm0uJGRhdGEsXG4gICAgICAgICAgZXhwcmVzc2lvbixcbiAgICAgICAgICAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8v5aaC5p6c5pivcmFkaW9cbiAgICBpZiAobm9kZS50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgbm9kZS50eXBlID09PSBcInJhZGlvXCIpIHtcbiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgc2V0VmFsdWVCeVBhdGgoXG4gICAgICAgICAgdm0uJGRhdGEsXG4gICAgICAgICAgZXhwcmVzc2lvbixcbiAgICAgICAgICAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWVcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyDpgJrnlKjlh73mlbDvvIzml6LpgILnlKh6LXRleHTvvIzkuZ/pgILnlKh7e3RleHR9fVxuICB0ZXh0KFxuICAgIG5vZGU6IE5vZGUsXG4gICAgdm06IFZNLFxuICAgIF9kaXJlY3RpdmU6IHN0cmluZyxcbiAgICBleHByZXNzaW9uOiBzdHJpbmcsXG4gICAgcmVwbGFjZSA9IFwiXCJcbiAgKSB7XG4gICAgY29uc3QgcmVuZGVyRm4gPSByZW5kZXJbXCJ0ZXh0UmVuZGVyXCJdO1xuXG4gICAgaWYgKHJlbmRlckZuKSB7XG4gICAgICB3YXRjaChcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBydW5JblNjb3BlKHZtLCBcInNjb3BlXCIsIGV4cHJlc3Npb24pO1xuICAgICAgICB9LFxuICAgICAgICAobmV3VmFsdWUpID0+IHtcbiAgICAgICAgICByZW5kZXJGbiAmJiByZW5kZXJGbihub2RlLCBuZXdWYWx1ZSwgcmVwbGFjZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpbW1lZGlhdGU6IHRydWUsXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIGlmKG5vZGU6IEhUTUxFbGVtZW50LCB2bTogVk0sIF9kaXJlY3RpdmU6IHN0cmluZywgZXhwcmVzc2lvbjogc3RyaW5nKSB7XG4gICAgY29uc3QgbmV4dCA9IG5vZGUubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gICAgbGV0IGVsc2VOb2RlOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICAgIGlmIChuZXh0ICYmIG5leHQuZ2V0QXR0cmlidXRlKFwiei1lbHNlXCIpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGVsc2VOb2RlID0gbmV4dCBhcyBIVE1MRWxlbWVudDtcbiAgICB9XG5cbiAgICBjb25zdCB1cGRhdGVkID0gKG5ld3ZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgICBpZiAobmV3dmFsdWUpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICBlbHNlTm9kZSAmJiAoZWxzZU5vZGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICBlbHNlTm9kZSAmJiAoZWxzZU5vZGUuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIik7XG4gICAgICB9XG4gICAgfTtcbiAgICB3YXRjaChcbiAgICAgICgpID0+IHtcbiAgICAgICAgcmV0dXJuICEhcnVuSW5TY29wZSh2bSwgXCJzY29wZVwiLCBleHByZXNzaW9uKTtcbiAgICAgIH0sXG4gICAgICB1cGRhdGVkLFxuICAgICAge1xuICAgICAgICBpbW1lZGlhdGU6IHRydWUsXG4gICAgICB9XG4gICAgKTtcbiAgfSxcblxuICBmb3Iobm9kZTogSFRNTEVsZW1lbnQsIHZtOiBWTSwgX2RpcmVjdGl2ZTogc3RyaW5nLCBleHByZXNzaW9uOiBzdHJpbmcpIHtcbiAgICAvL+WOu+mZpOepuuagvFxuICAgIGNvbnNvbGUubG9nKFwiZm9yXCIpO1xuICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2UoL1xccy9nLCBcIlwiKTtcbiAgICBjb25zdCBSRUZfTElTVF9GT1IgPSAvKFsoXShcXHcrKCxcXHcrKT8pWyldfChcXHcrKSlpbihcXHcrKS87XG4gICAgY29uc3QgZm9yTWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKFJFRl9MSVNUX0ZPUik7XG4gICAgaWYgKGZvck1hdGNoKSB7XG4gICAgICBjb25zdCBbLCAsIHZhbHVlcywgLCAsIGxpc3RdID0gZm9yTWF0Y2g7XG4gICAgICBsZXQgdmFsdWUgPSBmb3JNYXRjaFsxXTtcbiAgICAgIGxldCBpbmRleDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICAvLyDljrvlt6blj7Pmi6zlj7dcbiAgICAgICAgW3ZhbHVlLCBpbmRleF0gPSB2YWx1ZXMuc3BsaXQoXCIsXCIpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZW5kZXJGb3IgPSByZW5kZXIuZm9yUmVuZGVyKG5vZGUpO1xuICAgICAgZWZmZWN0KCgpID0+IHtcbiAgICAgICAgcmVuZGVyRm9yKHZhbHVlLCBpbmRleCwgcnVuSW5TY29wZSh2bSwgXCJzY29wZVwiLCBsaXN0KSwgdm0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIGJpbmQobm9kZTogTm9kZSwgdm06IFZNLCBkaXJlY3RpdmU6IHN0cmluZywgZXhwcmVzc2lvbjogc3RyaW5nKSB7XG4gICAgY29uc3QgZGlyU3BsaXQgPSBkaXJlY3RpdmUuc3BsaXQoXCI6XCIpO1xuXG4gICAgY29uc3QgZGlyID0gZGlyU3BsaXQubGVuZ3RoID4gMSA/IGRpclNwbGl0WzFdIDogZGlyZWN0aXZlO1xuICAgIGNvbnNvbGUubG9nKGRpcik7XG5cbiAgICBsZXQgcmVuZGVyRm4gPSByZW5kZXJbZGlyICsgXCJSZW5kZXJcIl07XG4gICAgaWYgKCFyZW5kZXJGbikge1xuICAgICAgcmVuZGVyRm4gPSByZW5kZXIuYXR0clJlbmRlcihkaXIpO1xuICAgIH1cbiAgICBpZiAocmVuZGVyRm4pIHtcbiAgICAgIGVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHJlbmRlckZuKG5vZGUsIHJ1bkluU2NvcGUodm0sIFwic2NvcGVcIiwgZXhwcmVzc2lvbikpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxufTtcbiIsImltcG9ydCB7IGNyZWF0ZUFwcCB9IGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBWTSB9IGZyb20gXCIuLi96dm0vdHlwZVwiO1xuaW1wb3J0IHsgQ29tcGlsZUNvbXAgfSBmcm9tIFwiLi9jb21waWxlQ29tcFwiO1xuaW1wb3J0IHsgRElSX0ZPUl9SRUcsIERJUl9SRUcgfSBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IHsgZGlyZWN0aXZlcywgdHJpZ2dlckRpcmVjdGl2ZSB9IGZyb20gXCIuL2RpcmVjdGl2ZXNcIjtcblxuZXhwb3J0IGNsYXNzIENvbXBpbGUge1xuICBub2RlOiBOb2RlO1xuICB2bTogVk07XG4gIC8vIOiuvue9ruagh+iusOWPmOmHj++8jOWvueS6jnYtZm9y55qE5a2Q5YWD57Sg77yM5LiN6ZyA6KaB57un57ut5rex5bqm6YGN5Y6GXG4gIG5lZWREZWVwQ29tcGlsZSA9IHRydWU7XG4gIGZyYWc6IERvY3VtZW50RnJhZ21lbnQ7XG4gIG9wdGlvbnM6IGFueTtcbiAgbW91bnRUeXBlOiBcImFwcGVuZFwiIHwgXCJyZXBsYWNlXCIgfCB1bmRlZmluZWQ7XG4gIG1vdW50Tm9kZTogTm9kZSB8IEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gIHBhcmVudE5vZGU6IE5vZGU7XG5cbiAgY29uc3RydWN0b3Iobm9kZTogTm9kZSwgdm06IFZNLCBvcHRpb25zID0geyBjb21waWxlUm9vdDogZmFsc2UgfSkge1xuICAgIHRoaXMudm0gPSB2bTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgdGhpcy5mcmFnID0gdGhpcy5ub2RlVG9GcmFnbWVudChub2RlKTtcbiAgICAvLyDpnIDopoHmjILovb3nmoTnu5PngrlcbiAgICB0aGlzLm1vdW50Tm9kZSA9IG5vZGU7XG5cbiAgICAvLyDnvJbor5HoioLngrnnmoTpobblsYLoioLngrlcbiAgICB0aGlzLm5vZGUgPSB0aGlzLmZyYWcuY2hpbGRyZW5bMF07XG5cbiAgICAvLyDpobblsYLnvJbor5HoioLngrnnmoTniLboioLngrlcbiAgICB0aGlzLnBhcmVudE5vZGUgPSB0aGlzLm5vZGUucGFyZW50Tm9kZSBhcyBOb2RlO1xuICAgIG9wdGlvbnMuY29tcGlsZVJvb3QgJiYgdGhpcy5jb21waWxlTm9kZSh0aGlzLm5vZGUsIHRoaXMudm0pO1xuICAgIC8vIOino+WGs3otZm9y55qE6IqC54K55pyq57yW6K+R55qE6Zeu6aKYXG4gICAgdGhpcy5jb21waWxlRnJhZyh0aGlzLmZyYWcsIHRoaXMudm0pO1xuICAgIC8vIHRoaXMubm9kZS5hcHBlbmRDaGlsZCh0aGlzLmZyYWcpO1xuICB9XG5cbiAgLy8g5oyC6L296IqC54K577yM5aaC5p6c5Lyg5YWlZWzvvIzliJnmjILovb3liLBlbO+8jOWQpuWImeaMgui9veWIsG5vZGVcbiAgbW91bnQoZWw/OiBzdHJpbmcgfCBOb2RlIHwgRWxlbWVudCwgcmVwbGFjZT86IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoIWVsIHx8IHR5cGVvZiBlbCA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHRoaXMubW91bnROb2RlIS5hcHBlbmRDaGlsZCh0aGlzLmZyYWcpO1xuICAgICAgdGhpcy5tb3VudE5vZGUgPSB0aGlzLm5vZGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCkgfHwgXCJcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbCA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAoZWwgJiYgcmVwbGFjZSkge1xuICAgICAgdGhpcy5wYXJlbnROb2RlID0gZWwucGFyZW50Tm9kZSBhcyBOb2RlO1xuICAgICAgdGhpcy5wYXJlbnROb2RlPy5yZXBsYWNlQ2hpbGQodGhpcy5ub2RlLCBlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsICYmIGVsLmFwcGVuZENoaWxkKHRoaXMuZnJhZyk7XG4gICAgfVxuICAgIHRoaXMubW91bnROb2RlID0gZWw7XG4gICAgdGhpcy5tb3VudFR5cGUgPSByZXBsYWNlID8gXCJyZXBsYWNlXCIgOiBcImFwcGVuZFwiO1xuICAgIHRoaXMudm0ucHVic3ViPy5wdWJsaXNoKFwibW91bnRlZFwiKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB1bm1vdW50ZWQoKSB7XG4gICAgY29uc29sZS5sb2codGhpcy5tb3VudE5vZGUpO1xuICAgIGNvbnNvbGUubG9nKHRoaXMubm9kZSk7XG5cbiAgICBpZiAodGhpcy5tb3VudFR5cGUgPT09IFwiYXBwZW5kXCIpIHtcbiAgICAgIHRoaXMubW91bnROb2RlPy5yZW1vdmVDaGlsZCh0aGlzLm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhcmVudE5vZGU/LnJlcGxhY2VDaGlsZCh0aGlzLm1vdW50Tm9kZSEsIHRoaXMubm9kZSk7XG4gICAgfVxuICAgIHRoaXMudm0ucHVic3ViPy5wdWJsaXNoKFwidW5tb3VudGVkXCIpO1xuICB9XG5cbiAgcmVtb3ZlQ2hpbGRzKG5vZGU6IE5vZGUpIHtcbiAgICB3aGlsZSAobm9kZS5maXJzdENoaWxkKSB7XG4gICAgICBpZiAobm9kZS5maXJzdENoaWxkLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQ2hpbGRzKG5vZGUuZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0RnJhZ21lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZnJhZztcbiAgfVxuXG4gIC8vIOiKgueCuei9rOaNouaIkGZyYWdtZW50XG4gIG5vZGVUb0ZyYWdtZW50KG5vZGU6IE5vZGUpIHtcbiAgICBjb25zdCBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIGxldCBjaGlsZDogQ2hpbGROb2RlIHwgbnVsbDtcblxuICAgIHdoaWxlICgoY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQpKSB7XG4gICAgICBmcmFnLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIGZyYWc7XG4gIH1cblxuICAvLyDnvJbor5HlhaXlj6NcbiAgY29tcGlsZUZyYWcoZnJhZzogRG9jdW1lbnRGcmFnbWVudCB8IEhUTUxFbGVtZW50IHwgTm9kZSwgdm06IFZNKSB7XG4gICAgY29uc3QgY2hpbGROb2RlcyA9IGZyYWcuY2hpbGROb2RlcztcblxuICAgIEFycmF5LmZyb20oY2hpbGROb2RlcykuZm9yRWFjaCgobm9kZTogTm9kZSkgPT4ge1xuICAgICAgdGhpcy5jb21waWxlTm9kZShub2RlLCB2bSk7XG4gICAgICAvLyDlpoLmnpzmnInlrZDoioLngrnkuJRuZWVkRGVlcENvbXBpbGXkuLp0cnVl77yM5YiZ57un57ut5rex5bqm6YGN5Y6GXG4gICAgICBpZiAobm9kZS5jaGlsZE5vZGVzICYmIG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggJiYgdGhpcy5uZWVkRGVlcENvbXBpbGUpIHtcbiAgICAgICAgdGhpcy5jb21waWxlRnJhZyhub2RlIGFzIEhUTUxFbGVtZW50LCB2bSk7XG4gICAgICB9XG4gICAgICB0aGlzLm5lZWREZWVwQ29tcGlsZSA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICAvLyDnvJbor5HoioLngrlcbiAgY29tcGlsZU5vZGUobm9kZTogTm9kZSwgdm06IFZNKSB7XG4gICAgaWYgKHZtLiRjb21wb25lbnRzICYmIHZtLiRjb21wb25lbnRzW25vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0pIHtcbiAgICAgIG5ldyBDb21waWxlQ29tcChub2RlIGFzIEVsZW1lbnQsIHZtKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgIC8v5YWD57Sg6IqC54K5XG4gICAgICB0aGlzLmNvbXBpbGVFbGVtZW50KG5vZGUgYXMgSFRNTEVsZW1lbnQsIHZtKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIHRoaXMuY29tcGlsZVRleHQobm9kZSBhcyBUZXh0LCB2bSk7XG4gICAgfVxuICB9XG5cbiAgLy8g57yW6K+R5paH5pys6IqC54K5XG4gIGNvbXBpbGVUZXh0KG5vZGU6IFRleHQsIHZtOiBWTSkge1xuICAgIGNvbnN0IHRleHQgPSBub2RlLnRleHRDb250ZW50O1xuICAgIGlmICghdGV4dCkgcmV0dXJuO1xuICAgIGNvbnN0IHJlZyA9IC9cXHtcXHsoLiopXFx9XFx9LztcbiAgICBjb25zdCByZXMgPSByZWcuZXhlYyh0ZXh0KTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBkaXJlY3RpdmVzW1widGV4dFwiXShub2RlLCB2bSwgXCJ0ZXh0XCIsIHJlc1sxXSwgcmVzWzBdKTtcbiAgICB9XG4gIH1cblxuICAvLyDnvJbor5HlhYPntKDoioLngrlcbiAgY29tcGlsZUVsZW1lbnQobm9kZTogSFRNTEVsZW1lbnQsIHZtOiBWTSkge1xuICAgIGNvbnN0IGF0dHJzID0gQXJyYXkuZnJvbShub2RlLmF0dHJpYnV0ZXMpO1xuXG4gICAgY29uc3QgaXNaRm9yID0gYXR0cnMuZmluZEluZGV4KChhdHRyOiBBdHRyKSA9PiB7XG4gICAgICByZXR1cm4gRElSX0ZPUl9SRUcudGVzdChhdHRyLm5vZGVOYW1lKTtcbiAgICB9KTtcbiAgICAvLyDlpoLmnpzmmK92LWZvcu+8jOWImeS4jemcgOimgee7p+e7rea3seW6pumBjeWOhu+8jOWPqumcgOimgee8luivkXotZm9y77yM5YW25LuW55qE5oyH5Luk5Zyoei1mb3LlhoXpg6jov5vooYznvJbor5FcbiAgICBpZiAoISF+aXNaRm9yKSB7XG4gICAgICB0aGlzLm5lZWREZWVwQ29tcGlsZSA9IGZhbHNlO1xuICAgICAgdGhpcy5jb21waWxlRGlyZWN0aXZlKG5vZGUsIHZtLCBhdHRyc1tpc1pGb3JdKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBBcnJheS5mcm9tKG5vZGUuYXR0cmlidXRlcykuZm9yRWFjaCgoYXR0cjogQXR0cikgPT4ge1xuICAgICAgdGhpcy5jb21waWxlRGlyZWN0aXZlKG5vZGUsIHZtLCBhdHRyKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIOe8luivkeaMh+S7pFxuICBjb21waWxlRGlyZWN0aXZlKG5vZGU6IEhUTUxFbGVtZW50LCB2bTogVk0sIGF0dHI6IEF0dHIpIHtcbiAgICBjb25zdCBkaXJlY3RpdmUgPSBhdHRyLm5vZGVOYW1lO1xuICAgIGNvbnN0IGV4cHJlc3Npb24gPSBhdHRyLm5vZGVWYWx1ZSB8fCBcIlwiO1xuICAgIGlmIChESVJfUkVHLnRlc3QoZGlyZWN0aXZlKSkge1xuICAgICAgLy8g5a+75om+6K+l5oyH5LukXG4gICAgICBjb25zb2xlLmxvZyhkaXJlY3RpdmUpO1xuXG4gICAgICB0cmlnZ2VyRGlyZWN0aXZlKG5vZGUsIHZtLCBkaXJlY3RpdmUsIGV4cHJlc3Npb24pO1xuXG4gICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShkaXJlY3RpdmUpO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFB1YlN1YiB7XG4gIHN1YnNjcmliZXJzOiB7XG4gICAgW3RvcGljOiBzdHJpbmddOiBTZXQ8KGRhdGE6IGFueSkgPT4gYW55PjtcbiAgfTtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IHt9O1xuICB9XG4gIHN1YnNjcmliZSh0b3BpYzogc3RyaW5nLCBjYWxsYmFjazogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKSB7XG4gICAgaWYgKCF0aGlzLnN1YnNjcmliZXJzW3RvcGljXSkge1xuICAgICAgdGhpcy5zdWJzY3JpYmVyc1t0b3BpY10gPSBuZXcgU2V0KCk7XG4gICAgfVxuICAgIHRoaXMuc3Vic2NyaWJlcnNbdG9waWNdLmFkZChjYWxsYmFjayk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHRoaXMudW5kc3Vic2NyaWJlKHRvcGljLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgfVxuICBwdWJsaXNoKHRvcGljOiBzdHJpbmcsIGRhdGE6IGFueSA9IFwiXCIpIHtcbiAgICBpZiAodGhpcy5zdWJzY3JpYmVyc1t0b3BpY10pIHtcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnNbdG9waWNdLmZvckVhY2goKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHVuZHN1YnNjcmliZSh0b3BpYzogc3RyaW5nLCBjYWxsYmFjazogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKSB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaWJlcnNbdG9waWNdKSB7XG4gICAgICB0aGlzLnN1YnNjcmliZXJzW3RvcGljXS5kZWxldGUoY2FsbGJhY2spO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcGlsZSB9IGZyb20gXCIuLi9jb21waWxlL2NvbXBpbGVcIjtcbmltcG9ydCB7IFB1YlN1YiB9IGZyb20gXCIuLi9wdWJzdWIvcHVic3ViXCI7XG5pbXBvcnQgeyByZWFjdGl2ZSB9IGZyb20gXCIuLi9yZWFjdGl2aXR5L3JlYWN0aXZlXCI7XG5pbXBvcnQgeyBBcHAsIFZNLCBadm1PcHRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tIFwiLi4vbWFpblwiO1xuaW1wb3J0IHsgcmVnaXN0ZXJEaXJlY3RpdmUgfSBmcm9tIFwiLi4vY29tcGlsZS9kaXJlY3RpdmVzXCI7XG5cbi8vIOWIneWni+WMlnZtXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVk0oXG4gIG9wdGlvbnM6IFp2bU9wdGlvbnMsXG4gIHBhcmVudFZNID0ge30sXG4gIG5lZWRQcm94eSA9IHRydWVcbik6IFZNIHtcbiAgY29uc3Qgdm06IFZNID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWTSk7XG4gIGlmIChvcHRpb25zLnRlbXBsYXRlIHx8IG9wdGlvbnMucmVuZGVyKSB7XG4gICAgaWYgKG9wdGlvbnMudGVtcGxhdGUpIHtcbiAgICAgIHZtLiRlbCA9XG4gICAgICAgIHR5cGVvZiBvcHRpb25zLnRlbXBsYXRlID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9wdGlvbnMudGVtcGxhdGUpIVxuICAgICAgICAgIDogb3B0aW9ucy50ZW1wbGF0ZTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgICB2bS4kZWwgPSBvcHRpb25zLnJlbmRlci5jYWxsKHZtLCBjcmVhdGVFbGVtZW50QnlTdHJpbmcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0ZW1wbGF0ZSBvciByZW5kZXIgbm90IGZvdW5kXCIpO1xuICB9XG5cbiAgLy8g5Yid5aeL5YyWcHJvcHNcbiAgaWYgKG9wdGlvbnMucHJvcHMpIHtcbiAgICB2bS4kcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICAgIC8vIOWwhnByb3Bz5Luj55CG5Yiwdm3kuIpcbiAgICBwcm94eVByb3BzKHZtKTtcbiAgfVxuXG4gIC8vIOaMgui9vWRhdGFcbiAgaWYgKG9wdGlvbnMuZGF0YSkge1xuICAgIHZtLiRkYXRhID1cbiAgICAgIHR5cGVvZiBvcHRpb25zLmRhdGEgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IG5lZWRQcm94eVxuICAgICAgICAgID8gcmVhY3RpdmUob3B0aW9ucy5kYXRhKCkpXG4gICAgICAgICAgOiBvcHRpb25zLmRhdGEoKVxuICAgICAgICA6IG5lZWRQcm94eVxuICAgICAgICA/IHJlYWN0aXZlKG9wdGlvbnMuZGF0YSlcbiAgICAgICAgOiBvcHRpb25zLmRhdGE7XG5cbiAgICAvLyDlsIZkYXRh5Lit55qE5bGe5oCn5Luj55CG5Yiwdm3kuIpcbiAgICBwcm94eURhdGEodm0pO1xuICB9XG5cbiAgLy8g5oyC6L29Y29tcG9uZW50c1xuICBpZiAob3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgT2JqZWN0LmtleXMob3B0aW9ucy5jb21wb25lbnRzKS5tYXAoKGtleSkgPT4ge1xuICAgICAgdm0uJGNvbXBvbmVudHMgPSB7XG4gICAgICAgIC4uLnZtLiRjb21wb25lbnRzLFxuICAgICAgICBba2V5LnRvTG93ZXJDYXNlKCldOiBvcHRpb25zLmNvbXBvbmVudHMhW2tleV0sXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgdm0uJG9wdGlvbnMgPSBvcHRpb25zO1xuICB2bS5wdWJzdWIgPSBuZXcgUHViU3ViKCk7XG4gIHZtLl91bnN1YnNjcmliZXMgPSBuZXcgU2V0KCk7XG5cbiAgLy8g5Yid5aeL5YyW55Sf5ZG95ZGo5pyfXG4gIGluaXRMaWZ0Y3ljbGUodm0sIG9wdGlvbnMpO1xuXG4gIC8v5bCGbWV0aG9k5oyC6L295Yiwdm3kuIpcbiAgaWYgKG9wdGlvbnMubWV0aG9kcykge1xuICAgIE9iamVjdC5rZXlzKG9wdGlvbnMubWV0aG9kcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBwcm94eU1ldGhvZCh2bSwga2V5KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIOaMgui9vWNvbXB1dGVkXG4gIGlmIChvcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgaW5pdENvbXB1dGVkKHZtLCBvcHRpb25zLmNvbXB1dGVkKTtcbiAgfVxuXG4gIC8vIOaMgui9vWRpcmVjdGl2ZXNcbiAgaWYgKG9wdGlvbnMuZGlyZWN0aXZlcykge1xuICAgIGluaXREcmlyZWN0aXZlcyh2bSwgb3B0aW9ucy5kaXJlY3RpdmVzKTtcbiAgfVxuICByZXR1cm4gdm07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBcHAob3B0aW9uczogWnZtT3B0aW9ucyk6IEFwcCB7XG4gIGNvbnN0IHZtID0gY3JlYXRlVk0ob3B0aW9ucyk7XG4gIHZtLnB1YnN1Yj8ucHVibGlzaChcImNyZWF0ZWRcIik7XG5cbiAgdm0uX3J1bkNvbXBpbGUgPSAob3B0aW9ucykgPT4ge1xuICAgIHZtLmNvbXBpbGUgPSBuZXcgQ29tcGlsZSh2bS4kZWwhLCB2bSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgY29uc3QgbW91bnQgPSAoZWw6IHN0cmluZykgPT4ge1xuICAgIHZtLl9ydW5Db21waWxlKCk7XG4gICAgdm0uY29tcGlsZSEubW91bnQoZWwpO1xuICB9O1xuXG4gIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgdm0uY29tcGlsZT8udW5tb3VudGVkKCk7XG4gICAgdm0uX3Vuc3Vic2NyaWJlcy5mb3JFYWNoKChmbikgPT4ge1xuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCByZWdpc3RlckNvbXBvbmVudCA9IGNyZWF0ZVJlZ2lzdGVyQ29tcG9uZW50RmFjdG9yeSh2bSk7XG5cbiAgcmV0dXJuIHtcbiAgICB2bSxcbiAgICBtb3VudCxcbiAgICBkaXJlY3RpdmU6IHJlZ2lzdGVyRGlyZWN0aXZlLFxuICAgIGRlc3Ryb3ksXG4gICAgY29tcG9uZW50OiByZWdpc3RlckNvbXBvbmVudCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJveHlQcm9wcyhjb250ZXh0OiBWTSkge1xuICBPYmplY3Qua2V5cyhjb250ZXh0LiRwcm9wcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnRleHQsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICByZXR1cm4gY29udGV4dC4kcHJvcHNba2V5XS5kZWZhdWx0O1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHByb3h5RGF0YShjb250ZXh0OiBWTSkge1xuICBPYmplY3Qua2V5cyhjb250ZXh0LiRkYXRhKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udGV4dCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICByZXR1cm4gY29udGV4dC4kZGF0YVtrZXldO1xuICAgICAgfSxcbiAgICAgIHNldDogKG5ld1ZhbCkgPT4ge1xuICAgICAgICBjb250ZXh0LiRkYXRhW2tleV0gPSBuZXdWYWw7XG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5pdExpZnRjeWNsZShjb250ZXh0OiBWTSwgb3B0aW9uczogWnZtT3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5jcmVhdGVkKSB7XG4gICAgY29udGV4dC5wdWJzdWI/LnN1YnNjcmliZShcImNyZWF0ZWRcIiwgb3B0aW9ucy5jcmVhdGVkLmJpbmQoY29udGV4dCkpO1xuICB9XG4gIGlmIChvcHRpb25zLm1vdW50ZWQpIHtcbiAgICBjb250ZXh0LnB1YnN1Yj8uc3Vic2NyaWJlKFwibW91bnRlZFwiLCBvcHRpb25zLm1vdW50ZWQuYmluZChjb250ZXh0KSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdERyaXJlY3RpdmVzKF9jb250ZXh0OiBWTSwgZGlyZWN0aXZlczogb2JqZWN0KSB7XG4gIGlmICh0eXBlb2YgZGlyZWN0aXZlcyA9PT0gXCJvYmplY3RcIikge1xuICAgIE9iamVjdC5rZXlzKGRpcmVjdGl2ZXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgcmVnaXN0ZXJEaXJlY3RpdmUoa2V5LCBkaXJlY3RpdmVzW2tleV0pO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb3h5TWV0aG9kKGNvbnRleHQ6IFZNLCBrZXk6IHN0cmluZykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udGV4dCwga2V5LCB7XG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogKCkgPT4ge1xuICAgICAgcmV0dXJuIGNvbnRleHQuJG9wdGlvbnM/Lm1ldGhvZHM/LltrZXldO1xuICAgIH0sXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQoY29udGV4dDogVk0sIGNvbXB1dGVkRm5zOiBvYmplY3QpIHtcbiAgaWYgKHR5cGVvZiBjb21wdXRlZEZucyA9PT0gXCJvYmplY3RcIikge1xuICAgIE9iamVjdC5rZXlzKGNvbXB1dGVkRm5zKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IGdldHRlciA9IGNvbXB1dGVkKGNvbXB1dGVkRm5zW2tleV0uYmluZChjb250ZXh0KSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udGV4dCwga2V5LCB7XG4gICAgICAgIC8vIOWmguaenOaYr+WHveaVsO+8jOebtOaOpeWwseS9nOS4umdldO+8jOWQpuWImeWPr+iDveaYr+S4gOS4quWvueixoe+8jOS9v+eUqOWvueixoeeahGdldFxuICAgICAgICAvLyB2YWx1ZTogY29tcHV0ZWQoY29tcHV0ZWRGbnNba2V5XS5iaW5kKGNvbnRleHQpKSxcbiAgICAgICAgZ2V0OiAoKSA9PiBnZXR0ZXIudmFsdWUsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50QnlTdHJpbmcoc3RyOiBzdHJpbmcpOiBFbGVtZW50IHtcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZGl2LmlubmVySFRNTCA9IHN0cjtcbiAgcmV0dXJuIGRpdiBhcyBFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWdpc3RlckNvbXBvbmVudEZhY3Rvcnkodm06IFZNKSB7XG4gIHJldHVybiAobmFtZTogc3RyaW5nLCBjb21wb25lbnQ6IGFueSkgPT4ge1xuICAgIHZtLiRjb21wb25lbnRzID0ge1xuICAgICAgLi4udm0uJGNvbXBvbmVudHMsXG4gICAgICBbbmFtZS50b0xvd2VyQ2FzZSgpXTogY29tcG9uZW50LFxuICAgIH07XG4gIH07XG59XG4iLCJpbXBvcnQgeyByZWFjdGl2ZSB9IGZyb20gXCIuLi9tYWluXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVmKHZhbHVlOiBhbnkpIHtcclxuICBjb25zdCByZWZPYmogPSB7XHJcbiAgICB2YWx1ZSxcclxuICB9O1xyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZWZPYmosIFwiX192X2lzUmVmXCIsIHtcclxuICAgIHZhbHVlOiB0cnVlLFxyXG4gIH0pO1xyXG4gIHJldHVybiByZWFjdGl2ZShyZWZPYmopO1xyXG59XHJcblxyXG4vLyDljp/lp4vlgLzmmK/msqHms5Xlk43lupTnmoTvvIzmlYXov5nph4zov5Tlm57kuIDkuKpnZXR0ZXLvvIzmr4/mrKHpg73lkJFcclxuLy8gb2JqW2tleV3ojrflj5blgLzvvIzku47ogIzovr7liLDlk43lupTlvI9cclxuZXhwb3J0IGZ1bmN0aW9uIHRvUmVmKG9iajogb2JqZWN0LCBrZXk6IHN0cmluZykge1xyXG4gIGNvbnN0IHJlZk9iaiA9IHtcclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgcmV0dXJuIG9ialtrZXldO1xyXG4gICAgfSxcclxuICAgIHNldCB2YWx1ZShuZXdWYWx1ZSkge1xyXG4gICAgICBvYmpba2V5XSA9IG5ld1ZhbHVlO1xyXG4gICAgfSxcclxuICB9O1xyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZWZPYmosIFwiX192X2lzUmVmXCIsIHtcclxuICAgIHZhbHVlOiB0cnVlLFxyXG4gIH0pO1xyXG4gIHJldHVybiByZWZPYmo7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b1JlZnMob2JqOiBvYmplY3QpIHtcclxuICBjb25zdCByZXMgPSB7fTtcclxuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgIHJlc1trZXldID0gdG9SZWYob2JqLCBrZXkpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHJldHVybiByZXM7XHJcbn1cclxuIiwiZXhwb3J0ICogZnJvbSBcIi4vcmVhY3Rpdml0eS9yZWFjdGl2ZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcmVhY3Rpdml0eS9lZmZlY3RcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JlYWN0aXZpdHkvY29tcHV0ZWRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JlYWN0aXZpdHkvd2F0Y2hcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3p2bS96dm1cIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JlYWN0aXZpdHkvcmVmXCI7XG5cbmNvbnNvbGUubG9nKFwienZtIDAuMS4wXCIpO1xuIl0sIm5hbWVzIjpbImdldFR5cGUiLCJvYmoiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsInRvTG93ZXJDYXNlIiwiUkFXX0tFWSIsIlN5bWJvbCIsIklURVJBVEVfS0VZIiwiTUFQX0tFWV9JVEVSQVRFX0tFWSIsIlRyaWdnZXJUeXBlIiwiYWN0aXZlRWZmZWN0Rm4iLCJidWNrZXQiLCJXZWFrTWFwIiwiZWZmZWN0Rm5TdGFjayIsImVmZmVjdCIsImZuIiwib3B0aW9ucyIsImVmZmVjdEZuIiwiZGVwcyIsImkiLCJsZW5ndGgiLCJkZWxldGUiLCJjbGVhblVwIiwicHVzaCIsInJlcyIsInBvcCIsImxhenkiLCJ0cmFjayIsInRhcmdldCIsImtleSIsInNob3VkVHJhY2siLCJkZXBzTWFwIiwiZ2V0Iiwic2V0IiwiTWFwIiwiU2V0IiwiYWRkIiwidHJpZ2dlciIsInR5cGUiLCJlZmZlY3RzVG9SdW4iLCJpdGVyYXRlRWZmZWN0cyIsImZvckVhY2giLCJBREQiLCJERUxFVEUiLCJTRVQiLCJpdGVyYXRlS2V5RWZmZWN0cyIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aEVmZmVjdHMiLCJzY2hlZHVsZXIiLCJtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyIsInZhbHVlIiwidGhpcyIsImhhc1ZhbHVlIiwiaGFzIiwibmV3VmFsIiwiaGFzS2V5IiwicmVhY3RpdmUiLCJvbGRWYWwiLCJjYWxsYmFja2ZuIiwidGhpc0FyZyIsInYiLCJrIiwibSIsIndyYXAiLCJpdGVyYXRvciIsIml0ciIsIm5leHQiLCJkb25lIiwiZW50cmllcyIsInZhbHVlcyIsImtleXMiLCJ2YWwiLCJyZWFjdGl2ZU1hcCIsImNyZWF0ZVJlYWN0aXZlIiwiaXNTaGFsbG93IiwicHJveHlPYmpUeXBlIiwiUHJveHkiLCJyZWNlaXZlciIsIlJlZmxlY3QiLCJiaW5kIiwiTnVtYmVyIiwiaGFzT3duUHJvcGVydHkiLCJvd25LZXlzIiwiZGVsZXRlUHJvcGVydHkiLCJleGlzdFByb3h5IiwicHJveHkiLCJzaGFsbG93UmVhY3RpdmUiLCJjb21wdXRlZCIsImdldHRlciIsImRpcnR5Iiwid2F0Y2giLCJpbW1lZGlhdGUiLCJvbkludmFsaWRhdGUiLCJqb2IiLCJjb25zb2xlIiwibG9nIiwidHJhdmVyc2UiLCJmbHVzaCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInNlZW4iLCJESVJfUkVHIiwiRElSX0ZPUl9SRUciLCJESVJfQklORF9SRUciLCJyZW5kZXIiLCJ0ZXh0UmVuZGVyIiwibm9kZSIsInRleHQiLCJyZXBsYWNlIiwibm9kZU5hbWUiLCJpbnB1dFR5cGUiLCJnZXRBdHRyaWJ1dGUiLCJjaGVja2VkIiwiaGFzT3duIiwiZGVmaW5lUHJvcGVydHkiLCJ0ZXh0Q29udGVudCIsIm9yaWdpblRleHQiLCJfdGV4dENvbnRlbnQiLCJjbGFzc1JlbmRlciIsImNsYXNzTGlzdCIsInJlbW92ZSIsImF0dHJSZW5kZXIiLCJhdHRyIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiZm9yUmVuZGVyIiwiX2Nsb25lTm9kZSIsImNsb25lTm9kZSIsIl9wYXJlbnROb2RlIiwicGFyZW50Tm9kZSIsIl9wcmV2aW91c05vZGUiLCJwcmV2aW91c1NpYmxpbmciLCJmb3JOb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5kZXgiLCJpdGVtcyIsInZtIiwibGFzdE5vZGUiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsImluc2VydEJlZm9yZSIsIm5leHRTaWJsaW5nIiwiYXBwZW5kQ2hpbGQiLCJjaGlsZFZtIiwiY3JlYXRlVk0iLCJ0ZW1wbGF0ZSIsImRhdGEiLCJDb21waWxlIiwiY29tcGlsZVJvb3QiLCJtb3VudCIsInNldFZhbHVlQnlQYXRoIiwicGF0aCIsInBhdGhzIiwic3BsaXQiLCJsZW4iLCJydW5JblNjb3BlIiwic2NvcGUiLCJzY29wZU5hbWUiLCJleHAiLCJmdW5jIiwiRnVuY3Rpb24iLCJib29sUmVnZXgiLCJfYSIsImIiLCJjIiwidGVzdCIsIl93aXRoIiwiY29tcERpcmVjdGl2ZXMiLCJvbiIsImRpcmVjdGl2ZSIsImV4cHJlc3Npb24iLCJhcHBzIiwibWF0Y2hNZXRob2QiLCJtYXRjaCIsIm1ldGhvZCIsImV2ZW50VHlwZSIsImV2ZW50SGFuZGxlciIsImFyZ3MiLCJhcHBseSIsInVuZHN1YnNjcmliZSIsInB1YnN1YiIsInN1YnNjcmliZSIsImFwcCIsIiRlbWl0IiwicHVibGlzaCIsIl91bnN1YnNjcmliZXMiLCJtb2RlbCIsInRhZ05hbWUiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsIiRkYXRhIiwicHJldmVudERlZmF1bHQiLCJfZGlyZWN0aXZlIiwicmVuZGVyRm4iLCJuZXdWYWx1ZSIsImlmIiwiY29tcGlsZUNvbXAiLCJuZXd2YWx1ZSIsImNyZWF0ZUNvbXBBcHAiLCJtb3VudGVkIiwidW5tb3VudGVkIiwiZm9yIiwiZm9yTWF0Y2giLCJsaXN0IiwicmVuZGVyRm9yIiwicHJvcHMiLCJhdHRycyIsImRpclNwbGl0IiwiZGlyIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndhcm4iLCJuYW1lIiwiQ29tcGlsZUNvbXAiLCJjb21wb25lbnROYW1lIiwicGFyZW50Vm0iLCJjb21tZW50IiwiY29tcG9uZW50IiwiY29uc3RydWN0b3IiLCIkY29tcG9uZW50cyIsIkVycm9yIiwiaW5pdEF0dHJzIiwiaW5pdEFwcCIsImNyZWF0ZUFwcCIsIl9ydW5Db21waWxlIiwiY29tcGlsZURpcmVjdGl2ZXMiLCJjb21waWxlIiwiZGVzdHJveSIsInJlcGxhY2VDaGlsZCIsImNvbXBvbmVudFByb3BzIiwiZG9jdW1lbnQiLCJjcmVhdGVDb21tZW50IiwiZnJvbSIsImF0dHJpYnV0ZXMiLCJub2RlVmFsdWUiLCJhcmciLCJtYXRjaERpcmVjdGl2ZSIsInBhcnNlRGlyZWN0aXZlIiwidHJpZ2dlckNvbXBEaXJlY3RpdmUiLCIkYXR0cnMiLCJjdXN0b21EaXJlY3RpdmVzIiwicmVnaXN0ZXJEaXJlY3RpdmUiLCJkaXJlY3RpdmVzIiwibWV0aG9kQXJncyIsInNpbmdsZVJlZyIsIiRldmVudFJlZyIsIiRldmVudElkeCIsImdldFZhbHVlQnlQYXRoIiwic3BsaWNlIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZWxzZU5vZGUiLCJ1bmRlZmluZWQiLCJzdHlsZSIsImRpc3BsYXkiLCJuZWVkRGVlcENvbXBpbGUiLCJmcmFnIiwibW91bnRUeXBlIiwibW91bnROb2RlIiwibm9kZVRvRnJhZ21lbnQiLCJjaGlsZHJlbiIsImNvbXBpbGVOb2RlIiwiY29tcGlsZUZyYWciLCJlbCIsInF1ZXJ5U2VsZWN0b3IiLCJyZW1vdmVDaGlsZHMiLCJmaXJzdENoaWxkIiwiY2hpbGROb2RlcyIsImdldEZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoaWxkIiwibm9kZVR5cGUiLCJjb21waWxlRWxlbWVudCIsImNvbXBpbGVUZXh0IiwiZXhlYyIsImlzWkZvciIsImZpbmRJbmRleCIsImNvbXBpbGVEaXJlY3RpdmUiLCJ0cmlnZ2VyRGlyZWN0aXZlIiwiUHViU3ViIiwic3Vic2NyaWJlcnMiLCJ0b3BpYyIsImNhbGxiYWNrIiwicGFyZW50Vk0iLCJuZWVkUHJveHkiLCJjcmVhdGUiLCJjb250ZXh0IiwiJGVsIiwiY3JlYXRlRWxlbWVudEJ5U3RyaW5nIiwiJHByb3BzIiwiZGVmYXVsdCIsInByb3h5RGF0YSIsImNvbXBvbmVudHMiLCJtYXAiLCIkb3B0aW9ucyIsImNyZWF0ZWQiLCJpbml0TGlmdGN5Y2xlIiwibWV0aG9kcyIsInByb3h5TWV0aG9kIiwiY29tcHV0ZWRGbnMiLCJpbml0Q29tcHV0ZWQiLCJfY29udGV4dCIsImluaXREcmlyZWN0aXZlcyIsInJlZ2lzdGVyQ29tcG9uZW50IiwiY3JlYXRlUmVnaXN0ZXJDb21wb25lbnRGYWN0b3J5Iiwic3RyIiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInJlZiIsInJlZk9iaiIsInRvUmVmIiwidG9SZWZzIl0sIm1hcHBpbmdzIjoiQUFDTSxTQUFVQSxFQUFRQyxHQUN0QixPQUFPQyxPQUFPQyxVQUFVQyxTQUFTQyxLQUFLSixHQUFLSyxNQUFNLEdBQUksR0FBR0MsY0NGbkQsTUFBTUMsRUFBVUMsT0FBTyxXQUdqQkMsRUFBY0QsT0FBTyxXQUVyQkUsRUFBc0JGLE9BQU8sbUJDUTFDLElBQVlHLEVDUlosSUFBSUMsR0RRSixTQUFZRCxHQUNWQSxFQUFBQSxFQUFBLElBQUEsR0FBQSxNQUNBQSxFQUFBQSxFQUFBLElBQUEsR0FBQSxNQUNBQSxFQUFBQSxFQUFBLE9BQUEsR0FBQSxTQUhGLENBQVlBLElBQUFBLEVBSVgsS0NURCxNQUFNRSxFQUFnRCxJQUFJQyxRQUdwREMsRUFBaUMsWUFRdkJDLEVBQU9DLEVBQWdCQyxFQUF5QixJQUM5RCxNQUFNQyxFQUFxQixNQTJCN0IsU0FBaUJBLEdBQ2YsSUFBS0EsRUFBU0MsS0FBTSxPQUNwQixJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUYsRUFBU0MsS0FBS0UsT0FBUUQsSUFBSyxDQUNoQ0YsRUFB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\n\n\n//# sourceURL=webpack://example/../zvm/dist/es/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/model.js");
/******/ 	
/******/ })()
;