/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/bind.js":
/*!*********************!*\
  !*** ./src/bind.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mini_zvm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mini-zvm */ \"../zvm/dist/es/main.js\");\n\n\nconst app = (0,mini_zvm__WEBPACK_IMPORTED_MODULE_0__.createApp)({\n  template: \"#app\",\n  data() {\n    return {\n      data: \"这是绑定的值\",\n      isDisable: false,\n    };\n  },\n  methods: {\n    handleBtnClick() {\n      this.isDisable = !this.isDisable;\n    },\n  },\n});\n\napp.mount(\"#app\");\n\n\n//# sourceURL=webpack://example/./src/bind.js?");

/***/ }),

/***/ "../zvm/dist/es/main.js":
/*!******************************!*\
  !*** ../zvm/dist/es/main.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"computed\": () => (/* binding */ h),\n/* harmony export */   \"createApp\": () => (/* binding */ S),\n/* harmony export */   \"effect\": () => (/* binding */ s),\n/* harmony export */   \"reactive\": () => (/* binding */ p),\n/* harmony export */   \"shallowReactive\": () => (/* binding */ f),\n/* harmony export */   \"watch\": () => (/* binding */ m)\n/* harmony export */ });\nvar e;let t;!function(e){e[e.SET=0]=\"SET\",e[e.ADD=1]=\"ADD\",e[e.DELETE=2]=\"DELETE\"}(e||(e={}));const n=new WeakMap,o=Symbol(\"iterate\"),r=[];function s(e,n={}){const o=()=>{!function(e){if(!e.deps)return;for(let t=0;t<e.deps.length;t++){e.deps[t].delete(e)}e.deps.length=0}(o),t=o,r.push(o);const n=e();return r.pop(),t=r[r.length-1],n};return o.options=n,o.deps=[],n.lazy||o(),o}function i(e,o){if(!t||!a)return;const r=n.get(e)||n.set(e,new Map).get(e),s=r.get(o)||r.set(o,new Set).get(o);s.add(t),t.deps?t.deps.push(s):(t.deps=[]).push(s)}function c(r,s,{type:i}){const c=n.get(r);if(!c)return;const l=new Set,a=c.get(s),u=c.get(o);if(a&&a.forEach((e=>{l.add(e)})),i!==e.ADD&&i!==e.DELETE||u&&u.forEach((e=>{e!=t&&l.add(e)})),i===e.ADD&&Array.isArray(r)){const e=c.get(\"length\");e&&e.forEach((e=>{e!=t&&l.add(e)}))}l.forEach((e=>{t!==e&&(e.options&&e.options.scheduler?e.options.scheduler(e):e())}))}const l=Symbol(\"raw_key\"),a=!0,u=new Map;function d(t,{isShallow:n=!1}){return new Proxy(t,{get(e,t,o){if(\"__isProxy__\"===t)return!0;if(t===l)return e;\"symbol\"!=typeof t&&i(e,t);const r=Reflect.get(e,t,o);return n?r:\"object\"==typeof r&&null!==r?p(r):r},set(t,n,o,r){const s=t[n],i=Array.isArray(t)?Number(n)<t.length?e.SET:e.ADD:Object.prototype.hasOwnProperty.call(t,n)?e.SET:e.ADD,l=Reflect.set(t,n,o,r);return s!==o&&c(t,n,{type:i}),l},has:(e,t)=>(i(e,t),Reflect.has(e,t)),ownKeys:e=>(i(e,Array.isArray(e)?\"length\":o),Reflect.ownKeys(e)),deleteProperty(t,n){const o=Object.prototype.hasOwnProperty.call(t,n),r=Reflect.deleteProperty(t,n);return o&&r&&(Array.isArray(t)?c(t,n,{type:e.SET}):c(t,n,{type:e.DELETE})),r}})}function p(e){const t=u.get(e);if(t)return t;const n=d(e,{});return u.set(e,n),n}function f(e){return d(e,{isShallow:!0})}function h(t){let n,o=!0;const r=s(t,{lazy:!0,scheduler(){o||(o=!0,c(l,\"value\",{type:e.SET}))}}),l={get value(){return o&&(n=r(),o=!1),i(l,\"value\"),n}};return l}function m(e,t,n={immediate:!1}){let o,r,i;function c(e){i=e}function l(){i&&i(),i=null,r=a(),t(r,o,c),o=r}const a=s((()=>\"function\"==typeof e?e():(console.log(e),b(e))),{lazy:!0,scheduler:()=>{\"post\"===n.flush?Promise.resolve().then(l):l()}});n.immediate?l():o=a()}function b(e,t=new Set){if(\"object\"!=typeof e||null===e||t.has(e))return e;t.add(e);for(const n in e)b(e[n],t);return e}const g={textRender:(e,t,n)=>{if(\"INPUT\"===e.nodeName){const n=e.getAttribute(\"type\");if(console.log(n),\"radio\"===n){console.log(\"radio\");const n=e.value;return void(e.checked=t===n)}return\"checkbox\"===n?void(e.checked=!!t):void(e.value=t)}Object.hasOwn(e,\"_textContent\")||Object.defineProperty(e,\"_textContent\",{value:e.textContent});const o=e._textContent;e.textContent=n?o.replace(n,t)||\"\":void 0===t?\"\":t},classRender:(e,t)=>{for(const n in t)t[n]?e.classList.add(n):e.classList.remove(n)},attrRender:e=>(t,n)=>{!0===n?t.setAttribute(e,\"\"):!1===n?t.removeAttribute(e):t.setAttribute(e,n)},forRender:e=>{const t=e.cloneNode(!0),n=e.parentNode,o=e.previousSibling,r=[];return n?.removeChild(e),(e,s,i,c)=>{console.log(i),r.forEach((e=>{n?.removeChild(e)})),r.length=0;let l=o;for(let o=0;o<i.length;o++){if(!i[o])continue;const d=t.cloneNode(!0);d.removeAttribute(\"z-for\"),l?(a=d,(u=l)?.parentNode?.insertBefore(a,u.nextSibling)):n?.appendChild(d),l=d,r.push(d);const p=T({data:{[e]:i[o],[s]:o}},c);Object.setPrototypeOf(p,c),new x(d,p,{compileRoot:!0}).mount(),l=d}var a,u}}};function y(e,t,n){const o=t.split(\".\"),r=o.length;let s=0;for(;s<r-1;)e=e[o[s++]];e[o[s]]=n}function v(e,t,n){const o=new Function(t,\"return \"+function(e,t){t=t.replace(/\\s/g,\"\");const n=/(true|false|null|undefined)/g;return(t=\" \"+t).replace(/([\\(:,\\s\\+\\-\\*\\/%&\\|\\^!\\*~]\\s*?)(([a-zA-Z_$][a-zA-Z_$0-9]*))/g,((t,o,r)=>n.test(r)?o+r:o+e+\".\"+r))}(t,n));return o(e)}function E(e,t,n,o,r=\"\"){const s=g.textRender;s&&m((()=>v(t,\"scope\",o)),(t=>{s&&s(e,t,r)}),{immediate:!0})}var A={on:function(e,t,n,o){const r=(o=o.replace(/\\s/g,\"\")).match(/^(\\w+)([(]((,?[$'\\w']+)+)[)])?/);if(!r)return;const s=r[1],i=[],c=/^'(.*)'$/,l=/(\\$event)$/;let a=-1;if(r&&r[3]){r[3].split(\",\").forEach((e=>{c.test(e)?i.push(e.replace(c,\"$1\")):l.test(e)?(i.push(e),a=i.length-1):i.push(function(e,t){const n=t.split(\".\"),o=n.length;let r=0;for(;r<o;)e=e[n[r++]];return e}(t.$data,e))}))}const u=n.split(\":\")[1],d=t&&t[s];u&&d&&e.addEventListener(u,(e=>(~a&&i.splice(a,1,e),i.length||i.push(e),d.call(t,...i))))},model:function(e,t,n,o){E(e,t,n,o),(\"INPUT\"===e.tagName&&\"text\"===e.type||\"TEXTAREA\"===e.tagName)&&e.addEventListener(\"input\",(e=>{y(t.$data,o,e.target.value),e.preventDefault()})),\"INPUT\"===e.tagName&&\"checkbox\"===e.type&&e.addEventListener(\"change\",(e=>{y(t.$data,o,e.target.checked)})),\"INPUT\"===e.tagName&&\"radio\"===e.type&&e.addEventListener(\"change\",(e=>{y(t.$data,o,e.target.value)}))},text:E,if:function(e,t,n,o){const r=e.nextElementSibling;let s=null;r&&void 0!==r.getAttribute(\"z-else\")&&(s=r),m((()=>!!v(t,\"scope\",o)),(t=>{t?(e.style.display=\"block\",s&&(s.style.display=\"none\")):(e.style.display=\"none\",s&&(s.style.display=\"block\"))}),{immediate:!0})},bind:function(e,t,n,o){const r=n.split(\":\"),i=r.length>1?r[1]:n;let c=g[i+\"Render\"];c||(c=g.attrRender(i)),c&&s((()=>{c(e,v(t,\"scope\",o))}))},for:function(e,t,n,o){const r=(o=o.replace(/\\s/g,\"\")).match(/[(](\\w+)(,(\\w+))[)]in(\\w+)/);if(r&&r[4]){const[,n,,o,i]=r;console.log(i);const c=g.forRender(e);s((()=>{c(n,o,v(t,\"scope\",i),t)}))}}};const w=/^z-/,D=/^z-for/;class x{node;vm;needDeepCompile=!0;frag;options;constructor(e,t,n={compileRoot:!1}){this.node=e,this.vm=t,this.options=n,this.frag=this.nodeToFragment(this.node),n.compileRoot&&this.compileNode(this.node,this.vm),this.compileFrag(this.frag,this.vm)}mount(e){if(e){const t=document.querySelector(e);t&&t.appendChild(this.frag)}else this.node.appendChild(this.frag);this.vm.pubsub?.publish(\"mounted\")}nodeToFragment(e){const t=document.createDocumentFragment();let n;for(;n=e.firstChild;)t.appendChild(n);return t}compileFrag(e,t){const n=e.childNodes;Array.from(n).forEach((e=>{this.compileNode(e,t),e.childNodes&&e.childNodes.length&&this.needDeepCompile&&this.compileFrag(e,t),this.needDeepCompile=!0}))}compileNode(e,t){1===e.nodeType?this.compileElement(e,t):3===e.nodeType&&this.compileText(e,t)}compileText(e,t){const n=e.textContent;if(!n)return;const o=/\\{\\{(.*)\\}\\}/.exec(n);null!==o&&A.text(e,t,\"text\",o[1],o[0])}compileElement(e,t){const n=Array.from(e.attributes),o=n.findIndex((e=>D.test(e.nodeName)));if(~o)return this.needDeepCompile=!1,void this.compileDirective(e,t,n[o]);Array.from(e.attributes).forEach((n=>{this.compileDirective(e,t,n)}))}compileDirective(e,t,n){const o=n.nodeName,r=n.nodeValue;if(w.test(o)){const n=o.substring(2).split(\":\")[0];A[n]&&A[n](e,t,o,r),e.removeAttribute(o)}}}class N{subscribers;constructor(){this.subscribers={}}subscribe(e,t){this.subscribers[e]||(this.subscribers[e]=new Set),this.subscribers[e].add(t)}publish(e,t=\"\"){this.subscribers[e]&&this.subscribers[e].forEach((e=>{e(t)}))}}function T(e,t={},n=!0){const o=Object.create(t);var r,s;return o.$el=document.querySelector(e.template),o.$data=\"function\"==typeof e.data?n?p(e.data()):e.data():n?p(e.data):e.data,o.$options=e,o.pubsub=new N,function(e,t){t.created&&e.pubsub?.subscribe(\"created\",t.created.bind(e));t.mounted&&e.pubsub?.subscribe(\"mounted\",t.mounted.bind(e))}(o,e),Object.keys(o.$data).forEach((e=>{!function(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$data[t],set:n=>{e.$data[t]=n}})}(o,e)})),e.methods&&Object.keys(e.methods).forEach((e=>{!function(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:()=>e.$options?.methods?.[t]})}(o,e)})),r=o,\"object\"==typeof(s=e.computed)&&Object.keys(s).forEach((e=>{Object.defineProperty(r,e,{value:h(s[e].bind(r))})})),o}function S(e){const t=T(e,this);t.pubsub?.publish(\"created\");const n=new x(t.$el,t);return{vm:t,mount:n.mount.bind(n)}}console.log(\"zvm 0.0.3\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n\n//# sourceURL=webpack://example/../zvm/dist/es/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/bind.js");
/******/ 	
/******/ })()
;